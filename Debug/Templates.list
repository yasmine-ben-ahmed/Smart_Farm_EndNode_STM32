
Templates.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004134  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080041ec  080041ec  000051ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800434c  0800434c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  0800434c  0800434c  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800434c  0800434c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800434c  0800434c  0000534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004350  08004350  00005350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004354  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000005c  080043b0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080043b0  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec32  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e60  00000000  00000000  00014cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00016b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6a  00000000  00000000  00017848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ffa  00000000  00000000  000182b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101bd  00000000  00000000  0002e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e4cc  00000000  00000000  0003e469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc935  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d0  00000000  00000000  000cc978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000cff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080041d4 	.word	0x080041d4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	080041d4 	.word	0x080041d4

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_fadd>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	46ce      	mov	lr, r9
 8000414:	4647      	mov	r7, r8
 8000416:	0243      	lsls	r3, r0, #9
 8000418:	0a5a      	lsrs	r2, r3, #9
 800041a:	024e      	lsls	r6, r1, #9
 800041c:	0045      	lsls	r5, r0, #1
 800041e:	0fc4      	lsrs	r4, r0, #31
 8000420:	0048      	lsls	r0, r1, #1
 8000422:	4691      	mov	r9, r2
 8000424:	0e2d      	lsrs	r5, r5, #24
 8000426:	0a72      	lsrs	r2, r6, #9
 8000428:	0e00      	lsrs	r0, r0, #24
 800042a:	4694      	mov	ip, r2
 800042c:	b580      	push	{r7, lr}
 800042e:	099b      	lsrs	r3, r3, #6
 8000430:	0fc9      	lsrs	r1, r1, #31
 8000432:	09b6      	lsrs	r6, r6, #6
 8000434:	1a2a      	subs	r2, r5, r0
 8000436:	428c      	cmp	r4, r1
 8000438:	d021      	beq.n	800047e <__aeabi_fadd+0x6e>
 800043a:	2a00      	cmp	r2, #0
 800043c:	dd0d      	ble.n	800045a <__aeabi_fadd+0x4a>
 800043e:	2800      	cmp	r0, #0
 8000440:	d12d      	bne.n	800049e <__aeabi_fadd+0x8e>
 8000442:	2e00      	cmp	r6, #0
 8000444:	d100      	bne.n	8000448 <__aeabi_fadd+0x38>
 8000446:	e08d      	b.n	8000564 <__aeabi_fadd+0x154>
 8000448:	1e51      	subs	r1, r2, #1
 800044a:	2a01      	cmp	r2, #1
 800044c:	d100      	bne.n	8000450 <__aeabi_fadd+0x40>
 800044e:	e11d      	b.n	800068c <__aeabi_fadd+0x27c>
 8000450:	2aff      	cmp	r2, #255	@ 0xff
 8000452:	d100      	bne.n	8000456 <__aeabi_fadd+0x46>
 8000454:	e0ab      	b.n	80005ae <__aeabi_fadd+0x19e>
 8000456:	000a      	movs	r2, r1
 8000458:	e027      	b.n	80004aa <__aeabi_fadd+0x9a>
 800045a:	2a00      	cmp	r2, #0
 800045c:	d04d      	beq.n	80004fa <__aeabi_fadd+0xea>
 800045e:	1b42      	subs	r2, r0, r5
 8000460:	2d00      	cmp	r5, #0
 8000462:	d000      	beq.n	8000466 <__aeabi_fadd+0x56>
 8000464:	e0cc      	b.n	8000600 <__aeabi_fadd+0x1f0>
 8000466:	2b00      	cmp	r3, #0
 8000468:	d100      	bne.n	800046c <__aeabi_fadd+0x5c>
 800046a:	e079      	b.n	8000560 <__aeabi_fadd+0x150>
 800046c:	1e54      	subs	r4, r2, #1
 800046e:	2a01      	cmp	r2, #1
 8000470:	d100      	bne.n	8000474 <__aeabi_fadd+0x64>
 8000472:	e128      	b.n	80006c6 <__aeabi_fadd+0x2b6>
 8000474:	2aff      	cmp	r2, #255	@ 0xff
 8000476:	d100      	bne.n	800047a <__aeabi_fadd+0x6a>
 8000478:	e097      	b.n	80005aa <__aeabi_fadd+0x19a>
 800047a:	0022      	movs	r2, r4
 800047c:	e0c5      	b.n	800060a <__aeabi_fadd+0x1fa>
 800047e:	2a00      	cmp	r2, #0
 8000480:	dc00      	bgt.n	8000484 <__aeabi_fadd+0x74>
 8000482:	e096      	b.n	80005b2 <__aeabi_fadd+0x1a2>
 8000484:	2800      	cmp	r0, #0
 8000486:	d04f      	beq.n	8000528 <__aeabi_fadd+0x118>
 8000488:	2dff      	cmp	r5, #255	@ 0xff
 800048a:	d100      	bne.n	800048e <__aeabi_fadd+0x7e>
 800048c:	e08f      	b.n	80005ae <__aeabi_fadd+0x19e>
 800048e:	2180      	movs	r1, #128	@ 0x80
 8000490:	04c9      	lsls	r1, r1, #19
 8000492:	430e      	orrs	r6, r1
 8000494:	2a1b      	cmp	r2, #27
 8000496:	dd51      	ble.n	800053c <__aeabi_fadd+0x12c>
 8000498:	002a      	movs	r2, r5
 800049a:	3301      	adds	r3, #1
 800049c:	e018      	b.n	80004d0 <__aeabi_fadd+0xc0>
 800049e:	2dff      	cmp	r5, #255	@ 0xff
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x94>
 80004a2:	e084      	b.n	80005ae <__aeabi_fadd+0x19e>
 80004a4:	2180      	movs	r1, #128	@ 0x80
 80004a6:	04c9      	lsls	r1, r1, #19
 80004a8:	430e      	orrs	r6, r1
 80004aa:	2101      	movs	r1, #1
 80004ac:	2a1b      	cmp	r2, #27
 80004ae:	dc08      	bgt.n	80004c2 <__aeabi_fadd+0xb2>
 80004b0:	0031      	movs	r1, r6
 80004b2:	2020      	movs	r0, #32
 80004b4:	40d1      	lsrs	r1, r2
 80004b6:	1a82      	subs	r2, r0, r2
 80004b8:	4096      	lsls	r6, r2
 80004ba:	0032      	movs	r2, r6
 80004bc:	1e50      	subs	r0, r2, #1
 80004be:	4182      	sbcs	r2, r0
 80004c0:	4311      	orrs	r1, r2
 80004c2:	1a5b      	subs	r3, r3, r1
 80004c4:	015a      	lsls	r2, r3, #5
 80004c6:	d459      	bmi.n	800057c <__aeabi_fadd+0x16c>
 80004c8:	2107      	movs	r1, #7
 80004ca:	002a      	movs	r2, r5
 80004cc:	4019      	ands	r1, r3
 80004ce:	d049      	beq.n	8000564 <__aeabi_fadd+0x154>
 80004d0:	210f      	movs	r1, #15
 80004d2:	4019      	ands	r1, r3
 80004d4:	2904      	cmp	r1, #4
 80004d6:	d000      	beq.n	80004da <__aeabi_fadd+0xca>
 80004d8:	3304      	adds	r3, #4
 80004da:	0159      	lsls	r1, r3, #5
 80004dc:	d542      	bpl.n	8000564 <__aeabi_fadd+0x154>
 80004de:	1c50      	adds	r0, r2, #1
 80004e0:	2afe      	cmp	r2, #254	@ 0xfe
 80004e2:	d03a      	beq.n	800055a <__aeabi_fadd+0x14a>
 80004e4:	019b      	lsls	r3, r3, #6
 80004e6:	b2c0      	uxtb	r0, r0
 80004e8:	0a5b      	lsrs	r3, r3, #9
 80004ea:	05c0      	lsls	r0, r0, #23
 80004ec:	4318      	orrs	r0, r3
 80004ee:	07e4      	lsls	r4, r4, #31
 80004f0:	4320      	orrs	r0, r4
 80004f2:	bcc0      	pop	{r6, r7}
 80004f4:	46b9      	mov	r9, r7
 80004f6:	46b0      	mov	r8, r6
 80004f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004fa:	20fe      	movs	r0, #254	@ 0xfe
 80004fc:	4680      	mov	r8, r0
 80004fe:	1c6f      	adds	r7, r5, #1
 8000500:	0038      	movs	r0, r7
 8000502:	4647      	mov	r7, r8
 8000504:	4207      	tst	r7, r0
 8000506:	d000      	beq.n	800050a <__aeabi_fadd+0xfa>
 8000508:	e08e      	b.n	8000628 <__aeabi_fadd+0x218>
 800050a:	2d00      	cmp	r5, #0
 800050c:	d000      	beq.n	8000510 <__aeabi_fadd+0x100>
 800050e:	e0b4      	b.n	800067a <__aeabi_fadd+0x26a>
 8000510:	2b00      	cmp	r3, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x106>
 8000514:	e0db      	b.n	80006ce <__aeabi_fadd+0x2be>
 8000516:	2e00      	cmp	r6, #0
 8000518:	d06c      	beq.n	80005f4 <__aeabi_fadd+0x1e4>
 800051a:	1b98      	subs	r0, r3, r6
 800051c:	0145      	lsls	r5, r0, #5
 800051e:	d400      	bmi.n	8000522 <__aeabi_fadd+0x112>
 8000520:	e0f7      	b.n	8000712 <__aeabi_fadd+0x302>
 8000522:	000c      	movs	r4, r1
 8000524:	1af3      	subs	r3, r6, r3
 8000526:	e03d      	b.n	80005a4 <__aeabi_fadd+0x194>
 8000528:	2e00      	cmp	r6, #0
 800052a:	d01b      	beq.n	8000564 <__aeabi_fadd+0x154>
 800052c:	1e51      	subs	r1, r2, #1
 800052e:	2a01      	cmp	r2, #1
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x124>
 8000532:	e082      	b.n	800063a <__aeabi_fadd+0x22a>
 8000534:	2aff      	cmp	r2, #255	@ 0xff
 8000536:	d03a      	beq.n	80005ae <__aeabi_fadd+0x19e>
 8000538:	000a      	movs	r2, r1
 800053a:	e7ab      	b.n	8000494 <__aeabi_fadd+0x84>
 800053c:	0031      	movs	r1, r6
 800053e:	2020      	movs	r0, #32
 8000540:	40d1      	lsrs	r1, r2
 8000542:	1a82      	subs	r2, r0, r2
 8000544:	4096      	lsls	r6, r2
 8000546:	0032      	movs	r2, r6
 8000548:	1e50      	subs	r0, r2, #1
 800054a:	4182      	sbcs	r2, r0
 800054c:	430a      	orrs	r2, r1
 800054e:	189b      	adds	r3, r3, r2
 8000550:	015a      	lsls	r2, r3, #5
 8000552:	d5b9      	bpl.n	80004c8 <__aeabi_fadd+0xb8>
 8000554:	1c6a      	adds	r2, r5, #1
 8000556:	2dfe      	cmp	r5, #254	@ 0xfe
 8000558:	d175      	bne.n	8000646 <__aeabi_fadd+0x236>
 800055a:	20ff      	movs	r0, #255	@ 0xff
 800055c:	2300      	movs	r3, #0
 800055e:	e7c4      	b.n	80004ea <__aeabi_fadd+0xda>
 8000560:	000c      	movs	r4, r1
 8000562:	0033      	movs	r3, r6
 8000564:	08db      	lsrs	r3, r3, #3
 8000566:	2aff      	cmp	r2, #255	@ 0xff
 8000568:	d146      	bne.n	80005f8 <__aeabi_fadd+0x1e8>
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f5      	beq.n	800055a <__aeabi_fadd+0x14a>
 800056e:	2280      	movs	r2, #128	@ 0x80
 8000570:	03d2      	lsls	r2, r2, #15
 8000572:	4313      	orrs	r3, r2
 8000574:	025b      	lsls	r3, r3, #9
 8000576:	20ff      	movs	r0, #255	@ 0xff
 8000578:	0a5b      	lsrs	r3, r3, #9
 800057a:	e7b6      	b.n	80004ea <__aeabi_fadd+0xda>
 800057c:	019f      	lsls	r7, r3, #6
 800057e:	09bf      	lsrs	r7, r7, #6
 8000580:	0038      	movs	r0, r7
 8000582:	f000 fbdb 	bl	8000d3c <__clzsi2>
 8000586:	3805      	subs	r0, #5
 8000588:	4087      	lsls	r7, r0
 800058a:	4285      	cmp	r5, r0
 800058c:	dc24      	bgt.n	80005d8 <__aeabi_fadd+0x1c8>
 800058e:	003b      	movs	r3, r7
 8000590:	2120      	movs	r1, #32
 8000592:	1b42      	subs	r2, r0, r5
 8000594:	3201      	adds	r2, #1
 8000596:	40d3      	lsrs	r3, r2
 8000598:	1a8a      	subs	r2, r1, r2
 800059a:	4097      	lsls	r7, r2
 800059c:	1e7a      	subs	r2, r7, #1
 800059e:	4197      	sbcs	r7, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	433b      	orrs	r3, r7
 80005a4:	0759      	lsls	r1, r3, #29
 80005a6:	d193      	bne.n	80004d0 <__aeabi_fadd+0xc0>
 80005a8:	e797      	b.n	80004da <__aeabi_fadd+0xca>
 80005aa:	000c      	movs	r4, r1
 80005ac:	0033      	movs	r3, r6
 80005ae:	08db      	lsrs	r3, r3, #3
 80005b0:	e7db      	b.n	800056a <__aeabi_fadd+0x15a>
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	d014      	beq.n	80005e0 <__aeabi_fadd+0x1d0>
 80005b6:	1b42      	subs	r2, r0, r5
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d14b      	bne.n	8000654 <__aeabi_fadd+0x244>
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0d0      	beq.n	8000562 <__aeabi_fadd+0x152>
 80005c0:	1e51      	subs	r1, r2, #1
 80005c2:	2a01      	cmp	r2, #1
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x1b8>
 80005c6:	e09e      	b.n	8000706 <__aeabi_fadd+0x2f6>
 80005c8:	2aff      	cmp	r2, #255	@ 0xff
 80005ca:	d0ef      	beq.n	80005ac <__aeabi_fadd+0x19c>
 80005cc:	000a      	movs	r2, r1
 80005ce:	2a1b      	cmp	r2, #27
 80005d0:	dd5f      	ble.n	8000692 <__aeabi_fadd+0x282>
 80005d2:	0002      	movs	r2, r0
 80005d4:	1c73      	adds	r3, r6, #1
 80005d6:	e77b      	b.n	80004d0 <__aeabi_fadd+0xc0>
 80005d8:	4b50      	ldr	r3, [pc, #320]	@ (800071c <__aeabi_fadd+0x30c>)
 80005da:	1a2a      	subs	r2, r5, r0
 80005dc:	403b      	ands	r3, r7
 80005de:	e7e1      	b.n	80005a4 <__aeabi_fadd+0x194>
 80005e0:	21fe      	movs	r1, #254	@ 0xfe
 80005e2:	1c6a      	adds	r2, r5, #1
 80005e4:	4211      	tst	r1, r2
 80005e6:	d13b      	bne.n	8000660 <__aeabi_fadd+0x250>
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d15d      	bne.n	80006a8 <__aeabi_fadd+0x298>
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d07f      	beq.n	80006f0 <__aeabi_fadd+0x2e0>
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d17f      	bne.n	80006f4 <__aeabi_fadd+0x2e4>
 80005f4:	2200      	movs	r2, #0
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	025b      	lsls	r3, r3, #9
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	b2d0      	uxtb	r0, r2
 80005fe:	e774      	b.n	80004ea <__aeabi_fadd+0xda>
 8000600:	28ff      	cmp	r0, #255	@ 0xff
 8000602:	d0d2      	beq.n	80005aa <__aeabi_fadd+0x19a>
 8000604:	2480      	movs	r4, #128	@ 0x80
 8000606:	04e4      	lsls	r4, r4, #19
 8000608:	4323      	orrs	r3, r4
 800060a:	2401      	movs	r4, #1
 800060c:	2a1b      	cmp	r2, #27
 800060e:	dc07      	bgt.n	8000620 <__aeabi_fadd+0x210>
 8000610:	001c      	movs	r4, r3
 8000612:	2520      	movs	r5, #32
 8000614:	40d4      	lsrs	r4, r2
 8000616:	1aaa      	subs	r2, r5, r2
 8000618:	4093      	lsls	r3, r2
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	4193      	sbcs	r3, r2
 800061e:	431c      	orrs	r4, r3
 8000620:	1b33      	subs	r3, r6, r4
 8000622:	0005      	movs	r5, r0
 8000624:	000c      	movs	r4, r1
 8000626:	e74d      	b.n	80004c4 <__aeabi_fadd+0xb4>
 8000628:	1b9f      	subs	r7, r3, r6
 800062a:	017a      	lsls	r2, r7, #5
 800062c:	d422      	bmi.n	8000674 <__aeabi_fadd+0x264>
 800062e:	2f00      	cmp	r7, #0
 8000630:	d1a6      	bne.n	8000580 <__aeabi_fadd+0x170>
 8000632:	2400      	movs	r4, #0
 8000634:	2000      	movs	r0, #0
 8000636:	2300      	movs	r3, #0
 8000638:	e757      	b.n	80004ea <__aeabi_fadd+0xda>
 800063a:	199b      	adds	r3, r3, r6
 800063c:	2501      	movs	r5, #1
 800063e:	3201      	adds	r2, #1
 8000640:	0159      	lsls	r1, r3, #5
 8000642:	d400      	bmi.n	8000646 <__aeabi_fadd+0x236>
 8000644:	e740      	b.n	80004c8 <__aeabi_fadd+0xb8>
 8000646:	2101      	movs	r1, #1
 8000648:	4835      	ldr	r0, [pc, #212]	@ (8000720 <__aeabi_fadd+0x310>)
 800064a:	4019      	ands	r1, r3
 800064c:	085b      	lsrs	r3, r3, #1
 800064e:	4003      	ands	r3, r0
 8000650:	430b      	orrs	r3, r1
 8000652:	e7a7      	b.n	80005a4 <__aeabi_fadd+0x194>
 8000654:	28ff      	cmp	r0, #255	@ 0xff
 8000656:	d0a9      	beq.n	80005ac <__aeabi_fadd+0x19c>
 8000658:	2180      	movs	r1, #128	@ 0x80
 800065a:	04c9      	lsls	r1, r1, #19
 800065c:	430b      	orrs	r3, r1
 800065e:	e7b6      	b.n	80005ce <__aeabi_fadd+0x1be>
 8000660:	2aff      	cmp	r2, #255	@ 0xff
 8000662:	d100      	bne.n	8000666 <__aeabi_fadd+0x256>
 8000664:	e779      	b.n	800055a <__aeabi_fadd+0x14a>
 8000666:	199b      	adds	r3, r3, r6
 8000668:	085b      	lsrs	r3, r3, #1
 800066a:	0759      	lsls	r1, r3, #29
 800066c:	d000      	beq.n	8000670 <__aeabi_fadd+0x260>
 800066e:	e72f      	b.n	80004d0 <__aeabi_fadd+0xc0>
 8000670:	08db      	lsrs	r3, r3, #3
 8000672:	e7c1      	b.n	80005f8 <__aeabi_fadd+0x1e8>
 8000674:	000c      	movs	r4, r1
 8000676:	1af7      	subs	r7, r6, r3
 8000678:	e782      	b.n	8000580 <__aeabi_fadd+0x170>
 800067a:	2b00      	cmp	r3, #0
 800067c:	d12c      	bne.n	80006d8 <__aeabi_fadd+0x2c8>
 800067e:	2e00      	cmp	r6, #0
 8000680:	d193      	bne.n	80005aa <__aeabi_fadd+0x19a>
 8000682:	2380      	movs	r3, #128	@ 0x80
 8000684:	2400      	movs	r4, #0
 8000686:	20ff      	movs	r0, #255	@ 0xff
 8000688:	03db      	lsls	r3, r3, #15
 800068a:	e72e      	b.n	80004ea <__aeabi_fadd+0xda>
 800068c:	2501      	movs	r5, #1
 800068e:	1b9b      	subs	r3, r3, r6
 8000690:	e718      	b.n	80004c4 <__aeabi_fadd+0xb4>
 8000692:	0019      	movs	r1, r3
 8000694:	2520      	movs	r5, #32
 8000696:	40d1      	lsrs	r1, r2
 8000698:	1aaa      	subs	r2, r5, r2
 800069a:	4093      	lsls	r3, r2
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	4193      	sbcs	r3, r2
 80006a0:	430b      	orrs	r3, r1
 80006a2:	0005      	movs	r5, r0
 80006a4:	199b      	adds	r3, r3, r6
 80006a6:	e753      	b.n	8000550 <__aeabi_fadd+0x140>
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0x29e>
 80006ac:	e77e      	b.n	80005ac <__aeabi_fadd+0x19c>
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x2a4>
 80006b2:	e77c      	b.n	80005ae <__aeabi_fadd+0x19e>
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	03d2      	lsls	r2, r2, #15
 80006b8:	4591      	cmp	r9, r2
 80006ba:	d302      	bcc.n	80006c2 <__aeabi_fadd+0x2b2>
 80006bc:	4594      	cmp	ip, r2
 80006be:	d200      	bcs.n	80006c2 <__aeabi_fadd+0x2b2>
 80006c0:	0033      	movs	r3, r6
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	e753      	b.n	800056e <__aeabi_fadd+0x15e>
 80006c6:	000c      	movs	r4, r1
 80006c8:	1af3      	subs	r3, r6, r3
 80006ca:	3501      	adds	r5, #1
 80006cc:	e6fa      	b.n	80004c4 <__aeabi_fadd+0xb4>
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d0af      	beq.n	8000632 <__aeabi_fadd+0x222>
 80006d2:	000c      	movs	r4, r1
 80006d4:	0033      	movs	r3, r6
 80006d6:	e78d      	b.n	80005f4 <__aeabi_fadd+0x1e4>
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d100      	bne.n	80006de <__aeabi_fadd+0x2ce>
 80006dc:	e767      	b.n	80005ae <__aeabi_fadd+0x19e>
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	03d2      	lsls	r2, r2, #15
 80006e2:	4591      	cmp	r9, r2
 80006e4:	d3ed      	bcc.n	80006c2 <__aeabi_fadd+0x2b2>
 80006e6:	4594      	cmp	ip, r2
 80006e8:	d2eb      	bcs.n	80006c2 <__aeabi_fadd+0x2b2>
 80006ea:	000c      	movs	r4, r1
 80006ec:	0033      	movs	r3, r6
 80006ee:	e7e8      	b.n	80006c2 <__aeabi_fadd+0x2b2>
 80006f0:	0033      	movs	r3, r6
 80006f2:	e77f      	b.n	80005f4 <__aeabi_fadd+0x1e4>
 80006f4:	199b      	adds	r3, r3, r6
 80006f6:	2200      	movs	r2, #0
 80006f8:	0159      	lsls	r1, r3, #5
 80006fa:	d5b9      	bpl.n	8000670 <__aeabi_fadd+0x260>
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <__aeabi_fadd+0x30c>)
 80006fe:	4013      	ands	r3, r2
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	2201      	movs	r2, #1
 8000704:	e778      	b.n	80005f8 <__aeabi_fadd+0x1e8>
 8000706:	199b      	adds	r3, r3, r6
 8000708:	3201      	adds	r2, #1
 800070a:	3501      	adds	r5, #1
 800070c:	0159      	lsls	r1, r3, #5
 800070e:	d49a      	bmi.n	8000646 <__aeabi_fadd+0x236>
 8000710:	e6da      	b.n	80004c8 <__aeabi_fadd+0xb8>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d08d      	beq.n	8000632 <__aeabi_fadd+0x222>
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	e76e      	b.n	80005f8 <__aeabi_fadd+0x1e8>
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	fbffffff 	.word	0xfbffffff
 8000720:	7dffffff 	.word	0x7dffffff

08000724 <__aeabi_fdiv>:
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	464f      	mov	r7, r9
 8000728:	4646      	mov	r6, r8
 800072a:	46d6      	mov	lr, sl
 800072c:	0244      	lsls	r4, r0, #9
 800072e:	b5c0      	push	{r6, r7, lr}
 8000730:	0047      	lsls	r7, r0, #1
 8000732:	1c0e      	adds	r6, r1, #0
 8000734:	0a64      	lsrs	r4, r4, #9
 8000736:	0e3f      	lsrs	r7, r7, #24
 8000738:	0fc5      	lsrs	r5, r0, #31
 800073a:	2f00      	cmp	r7, #0
 800073c:	d03c      	beq.n	80007b8 <__aeabi_fdiv+0x94>
 800073e:	2fff      	cmp	r7, #255	@ 0xff
 8000740:	d042      	beq.n	80007c8 <__aeabi_fdiv+0xa4>
 8000742:	2300      	movs	r3, #0
 8000744:	2280      	movs	r2, #128	@ 0x80
 8000746:	4699      	mov	r9, r3
 8000748:	469a      	mov	sl, r3
 800074a:	00e4      	lsls	r4, r4, #3
 800074c:	04d2      	lsls	r2, r2, #19
 800074e:	4314      	orrs	r4, r2
 8000750:	3f7f      	subs	r7, #127	@ 0x7f
 8000752:	0273      	lsls	r3, r6, #9
 8000754:	0a5b      	lsrs	r3, r3, #9
 8000756:	4698      	mov	r8, r3
 8000758:	0073      	lsls	r3, r6, #1
 800075a:	0e1b      	lsrs	r3, r3, #24
 800075c:	0ff6      	lsrs	r6, r6, #31
 800075e:	2b00      	cmp	r3, #0
 8000760:	d01b      	beq.n	800079a <__aeabi_fdiv+0x76>
 8000762:	2bff      	cmp	r3, #255	@ 0xff
 8000764:	d013      	beq.n	800078e <__aeabi_fdiv+0x6a>
 8000766:	4642      	mov	r2, r8
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	00d2      	lsls	r2, r2, #3
 800076c:	04c9      	lsls	r1, r1, #19
 800076e:	4311      	orrs	r1, r2
 8000770:	4688      	mov	r8, r1
 8000772:	2000      	movs	r0, #0
 8000774:	3b7f      	subs	r3, #127	@ 0x7f
 8000776:	0029      	movs	r1, r5
 8000778:	1aff      	subs	r7, r7, r3
 800077a:	464b      	mov	r3, r9
 800077c:	4071      	eors	r1, r6
 800077e:	b2c9      	uxtb	r1, r1
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d900      	bls.n	8000786 <__aeabi_fdiv+0x62>
 8000784:	e0b5      	b.n	80008f2 <__aeabi_fdiv+0x1ce>
 8000786:	4a74      	ldr	r2, [pc, #464]	@ (8000958 <__aeabi_fdiv+0x234>)
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	58d3      	ldr	r3, [r2, r3]
 800078c:	469f      	mov	pc, r3
 800078e:	4643      	mov	r3, r8
 8000790:	2b00      	cmp	r3, #0
 8000792:	d13f      	bne.n	8000814 <__aeabi_fdiv+0xf0>
 8000794:	3fff      	subs	r7, #255	@ 0xff
 8000796:	3302      	adds	r3, #2
 8000798:	e003      	b.n	80007a2 <__aeabi_fdiv+0x7e>
 800079a:	4643      	mov	r3, r8
 800079c:	2b00      	cmp	r3, #0
 800079e:	d12d      	bne.n	80007fc <__aeabi_fdiv+0xd8>
 80007a0:	2301      	movs	r3, #1
 80007a2:	0029      	movs	r1, r5
 80007a4:	464a      	mov	r2, r9
 80007a6:	4071      	eors	r1, r6
 80007a8:	b2c9      	uxtb	r1, r1
 80007aa:	431a      	orrs	r2, r3
 80007ac:	2a0e      	cmp	r2, #14
 80007ae:	d838      	bhi.n	8000822 <__aeabi_fdiv+0xfe>
 80007b0:	486a      	ldr	r0, [pc, #424]	@ (800095c <__aeabi_fdiv+0x238>)
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	5882      	ldr	r2, [r0, r2]
 80007b6:	4697      	mov	pc, r2
 80007b8:	2c00      	cmp	r4, #0
 80007ba:	d113      	bne.n	80007e4 <__aeabi_fdiv+0xc0>
 80007bc:	2304      	movs	r3, #4
 80007be:	4699      	mov	r9, r3
 80007c0:	3b03      	subs	r3, #3
 80007c2:	2700      	movs	r7, #0
 80007c4:	469a      	mov	sl, r3
 80007c6:	e7c4      	b.n	8000752 <__aeabi_fdiv+0x2e>
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d105      	bne.n	80007d8 <__aeabi_fdiv+0xb4>
 80007cc:	2308      	movs	r3, #8
 80007ce:	4699      	mov	r9, r3
 80007d0:	3b06      	subs	r3, #6
 80007d2:	27ff      	movs	r7, #255	@ 0xff
 80007d4:	469a      	mov	sl, r3
 80007d6:	e7bc      	b.n	8000752 <__aeabi_fdiv+0x2e>
 80007d8:	230c      	movs	r3, #12
 80007da:	4699      	mov	r9, r3
 80007dc:	3b09      	subs	r3, #9
 80007de:	27ff      	movs	r7, #255	@ 0xff
 80007e0:	469a      	mov	sl, r3
 80007e2:	e7b6      	b.n	8000752 <__aeabi_fdiv+0x2e>
 80007e4:	0020      	movs	r0, r4
 80007e6:	f000 faa9 	bl	8000d3c <__clzsi2>
 80007ea:	2776      	movs	r7, #118	@ 0x76
 80007ec:	1f43      	subs	r3, r0, #5
 80007ee:	409c      	lsls	r4, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	427f      	negs	r7, r7
 80007f4:	4699      	mov	r9, r3
 80007f6:	469a      	mov	sl, r3
 80007f8:	1a3f      	subs	r7, r7, r0
 80007fa:	e7aa      	b.n	8000752 <__aeabi_fdiv+0x2e>
 80007fc:	4640      	mov	r0, r8
 80007fe:	f000 fa9d 	bl	8000d3c <__clzsi2>
 8000802:	4642      	mov	r2, r8
 8000804:	1f43      	subs	r3, r0, #5
 8000806:	409a      	lsls	r2, r3
 8000808:	2376      	movs	r3, #118	@ 0x76
 800080a:	425b      	negs	r3, r3
 800080c:	1a1b      	subs	r3, r3, r0
 800080e:	4690      	mov	r8, r2
 8000810:	2000      	movs	r0, #0
 8000812:	e7b0      	b.n	8000776 <__aeabi_fdiv+0x52>
 8000814:	2303      	movs	r3, #3
 8000816:	464a      	mov	r2, r9
 8000818:	431a      	orrs	r2, r3
 800081a:	4691      	mov	r9, r2
 800081c:	2003      	movs	r0, #3
 800081e:	33fc      	adds	r3, #252	@ 0xfc
 8000820:	e7a9      	b.n	8000776 <__aeabi_fdiv+0x52>
 8000822:	000d      	movs	r5, r1
 8000824:	20ff      	movs	r0, #255	@ 0xff
 8000826:	2200      	movs	r2, #0
 8000828:	05c0      	lsls	r0, r0, #23
 800082a:	07ed      	lsls	r5, r5, #31
 800082c:	4310      	orrs	r0, r2
 800082e:	4328      	orrs	r0, r5
 8000830:	bce0      	pop	{r5, r6, r7}
 8000832:	46ba      	mov	sl, r7
 8000834:	46b1      	mov	r9, r6
 8000836:	46a8      	mov	r8, r5
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083a:	000d      	movs	r5, r1
 800083c:	2000      	movs	r0, #0
 800083e:	2200      	movs	r2, #0
 8000840:	e7f2      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000842:	4653      	mov	r3, sl
 8000844:	2b02      	cmp	r3, #2
 8000846:	d0ed      	beq.n	8000824 <__aeabi_fdiv+0x100>
 8000848:	2b03      	cmp	r3, #3
 800084a:	d033      	beq.n	80008b4 <__aeabi_fdiv+0x190>
 800084c:	46a0      	mov	r8, r4
 800084e:	2b01      	cmp	r3, #1
 8000850:	d105      	bne.n	800085e <__aeabi_fdiv+0x13a>
 8000852:	2000      	movs	r0, #0
 8000854:	2200      	movs	r2, #0
 8000856:	e7e7      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000858:	0035      	movs	r5, r6
 800085a:	2803      	cmp	r0, #3
 800085c:	d07a      	beq.n	8000954 <__aeabi_fdiv+0x230>
 800085e:	003b      	movs	r3, r7
 8000860:	337f      	adds	r3, #127	@ 0x7f
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd2d      	ble.n	80008c2 <__aeabi_fdiv+0x19e>
 8000866:	4642      	mov	r2, r8
 8000868:	0752      	lsls	r2, r2, #29
 800086a:	d007      	beq.n	800087c <__aeabi_fdiv+0x158>
 800086c:	220f      	movs	r2, #15
 800086e:	4641      	mov	r1, r8
 8000870:	400a      	ands	r2, r1
 8000872:	2a04      	cmp	r2, #4
 8000874:	d002      	beq.n	800087c <__aeabi_fdiv+0x158>
 8000876:	2204      	movs	r2, #4
 8000878:	4694      	mov	ip, r2
 800087a:	44e0      	add	r8, ip
 800087c:	4642      	mov	r2, r8
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	d505      	bpl.n	800088e <__aeabi_fdiv+0x16a>
 8000882:	4642      	mov	r2, r8
 8000884:	4b36      	ldr	r3, [pc, #216]	@ (8000960 <__aeabi_fdiv+0x23c>)
 8000886:	401a      	ands	r2, r3
 8000888:	003b      	movs	r3, r7
 800088a:	4690      	mov	r8, r2
 800088c:	3380      	adds	r3, #128	@ 0x80
 800088e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000890:	dcc8      	bgt.n	8000824 <__aeabi_fdiv+0x100>
 8000892:	4642      	mov	r2, r8
 8000894:	0192      	lsls	r2, r2, #6
 8000896:	0a52      	lsrs	r2, r2, #9
 8000898:	b2d8      	uxtb	r0, r3
 800089a:	e7c5      	b.n	8000828 <__aeabi_fdiv+0x104>
 800089c:	2280      	movs	r2, #128	@ 0x80
 800089e:	2500      	movs	r5, #0
 80008a0:	20ff      	movs	r0, #255	@ 0xff
 80008a2:	03d2      	lsls	r2, r2, #15
 80008a4:	e7c0      	b.n	8000828 <__aeabi_fdiv+0x104>
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	03d2      	lsls	r2, r2, #15
 80008aa:	4214      	tst	r4, r2
 80008ac:	d002      	beq.n	80008b4 <__aeabi_fdiv+0x190>
 80008ae:	4643      	mov	r3, r8
 80008b0:	4213      	tst	r3, r2
 80008b2:	d049      	beq.n	8000948 <__aeabi_fdiv+0x224>
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	03d2      	lsls	r2, r2, #15
 80008b8:	4322      	orrs	r2, r4
 80008ba:	0252      	lsls	r2, r2, #9
 80008bc:	20ff      	movs	r0, #255	@ 0xff
 80008be:	0a52      	lsrs	r2, r2, #9
 80008c0:	e7b2      	b.n	8000828 <__aeabi_fdiv+0x104>
 80008c2:	2201      	movs	r2, #1
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	2b1b      	cmp	r3, #27
 80008c8:	dcc3      	bgt.n	8000852 <__aeabi_fdiv+0x12e>
 80008ca:	4642      	mov	r2, r8
 80008cc:	40da      	lsrs	r2, r3
 80008ce:	4643      	mov	r3, r8
 80008d0:	379e      	adds	r7, #158	@ 0x9e
 80008d2:	40bb      	lsls	r3, r7
 80008d4:	1e59      	subs	r1, r3, #1
 80008d6:	418b      	sbcs	r3, r1
 80008d8:	431a      	orrs	r2, r3
 80008da:	0753      	lsls	r3, r2, #29
 80008dc:	d004      	beq.n	80008e8 <__aeabi_fdiv+0x1c4>
 80008de:	230f      	movs	r3, #15
 80008e0:	4013      	ands	r3, r2
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fdiv+0x1c4>
 80008e6:	3204      	adds	r2, #4
 80008e8:	0153      	lsls	r3, r2, #5
 80008ea:	d529      	bpl.n	8000940 <__aeabi_fdiv+0x21c>
 80008ec:	2001      	movs	r0, #1
 80008ee:	2200      	movs	r2, #0
 80008f0:	e79a      	b.n	8000828 <__aeabi_fdiv+0x104>
 80008f2:	4642      	mov	r2, r8
 80008f4:	0163      	lsls	r3, r4, #5
 80008f6:	0155      	lsls	r5, r2, #5
 80008f8:	42ab      	cmp	r3, r5
 80008fa:	d215      	bcs.n	8000928 <__aeabi_fdiv+0x204>
 80008fc:	201b      	movs	r0, #27
 80008fe:	2200      	movs	r2, #0
 8000900:	3f01      	subs	r7, #1
 8000902:	2601      	movs	r6, #1
 8000904:	001c      	movs	r4, r3
 8000906:	0052      	lsls	r2, r2, #1
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2c00      	cmp	r4, #0
 800090c:	db01      	blt.n	8000912 <__aeabi_fdiv+0x1ee>
 800090e:	429d      	cmp	r5, r3
 8000910:	d801      	bhi.n	8000916 <__aeabi_fdiv+0x1f2>
 8000912:	1b5b      	subs	r3, r3, r5
 8000914:	4332      	orrs	r2, r6
 8000916:	3801      	subs	r0, #1
 8000918:	2800      	cmp	r0, #0
 800091a:	d1f3      	bne.n	8000904 <__aeabi_fdiv+0x1e0>
 800091c:	1e58      	subs	r0, r3, #1
 800091e:	4183      	sbcs	r3, r0
 8000920:	4313      	orrs	r3, r2
 8000922:	4698      	mov	r8, r3
 8000924:	000d      	movs	r5, r1
 8000926:	e79a      	b.n	800085e <__aeabi_fdiv+0x13a>
 8000928:	201a      	movs	r0, #26
 800092a:	2201      	movs	r2, #1
 800092c:	1b5b      	subs	r3, r3, r5
 800092e:	e7e8      	b.n	8000902 <__aeabi_fdiv+0x1de>
 8000930:	3b02      	subs	r3, #2
 8000932:	425a      	negs	r2, r3
 8000934:	4153      	adcs	r3, r2
 8000936:	425b      	negs	r3, r3
 8000938:	0035      	movs	r5, r6
 800093a:	2200      	movs	r2, #0
 800093c:	b2d8      	uxtb	r0, r3
 800093e:	e773      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000940:	0192      	lsls	r2, r2, #6
 8000942:	2000      	movs	r0, #0
 8000944:	0a52      	lsrs	r2, r2, #9
 8000946:	e76f      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000948:	431a      	orrs	r2, r3
 800094a:	0252      	lsls	r2, r2, #9
 800094c:	0035      	movs	r5, r6
 800094e:	20ff      	movs	r0, #255	@ 0xff
 8000950:	0a52      	lsrs	r2, r2, #9
 8000952:	e769      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000954:	4644      	mov	r4, r8
 8000956:	e7ad      	b.n	80008b4 <__aeabi_fdiv+0x190>
 8000958:	08004214 	.word	0x08004214
 800095c:	08004254 	.word	0x08004254
 8000960:	f7ffffff 	.word	0xf7ffffff

08000964 <__aeabi_fmul>:
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000966:	464f      	mov	r7, r9
 8000968:	4646      	mov	r6, r8
 800096a:	46d6      	mov	lr, sl
 800096c:	0243      	lsls	r3, r0, #9
 800096e:	0a5b      	lsrs	r3, r3, #9
 8000970:	0045      	lsls	r5, r0, #1
 8000972:	b5c0      	push	{r6, r7, lr}
 8000974:	4699      	mov	r9, r3
 8000976:	1c0f      	adds	r7, r1, #0
 8000978:	0e2d      	lsrs	r5, r5, #24
 800097a:	0fc6      	lsrs	r6, r0, #31
 800097c:	2d00      	cmp	r5, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_fmul+0x1e>
 8000980:	e088      	b.n	8000a94 <__aeabi_fmul+0x130>
 8000982:	2dff      	cmp	r5, #255	@ 0xff
 8000984:	d100      	bne.n	8000988 <__aeabi_fmul+0x24>
 8000986:	e08d      	b.n	8000aa4 <__aeabi_fmul+0x140>
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	04d2      	lsls	r2, r2, #19
 800098e:	431a      	orrs	r2, r3
 8000990:	2300      	movs	r3, #0
 8000992:	4691      	mov	r9, r2
 8000994:	4698      	mov	r8, r3
 8000996:	469a      	mov	sl, r3
 8000998:	3d7f      	subs	r5, #127	@ 0x7f
 800099a:	027c      	lsls	r4, r7, #9
 800099c:	007b      	lsls	r3, r7, #1
 800099e:	0a64      	lsrs	r4, r4, #9
 80009a0:	0e1b      	lsrs	r3, r3, #24
 80009a2:	0fff      	lsrs	r7, r7, #31
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d068      	beq.n	8000a7a <__aeabi_fmul+0x116>
 80009a8:	2bff      	cmp	r3, #255	@ 0xff
 80009aa:	d021      	beq.n	80009f0 <__aeabi_fmul+0x8c>
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	00e4      	lsls	r4, r4, #3
 80009b0:	04d2      	lsls	r2, r2, #19
 80009b2:	4314      	orrs	r4, r2
 80009b4:	4642      	mov	r2, r8
 80009b6:	3b7f      	subs	r3, #127	@ 0x7f
 80009b8:	195b      	adds	r3, r3, r5
 80009ba:	2100      	movs	r1, #0
 80009bc:	1c5d      	adds	r5, r3, #1
 80009be:	2a0a      	cmp	r2, #10
 80009c0:	dc2e      	bgt.n	8000a20 <__aeabi_fmul+0xbc>
 80009c2:	407e      	eors	r6, r7
 80009c4:	4642      	mov	r2, r8
 80009c6:	2a02      	cmp	r2, #2
 80009c8:	dc23      	bgt.n	8000a12 <__aeabi_fmul+0xae>
 80009ca:	3a01      	subs	r2, #1
 80009cc:	2a01      	cmp	r2, #1
 80009ce:	d900      	bls.n	80009d2 <__aeabi_fmul+0x6e>
 80009d0:	e0bd      	b.n	8000b4e <__aeabi_fmul+0x1ea>
 80009d2:	2902      	cmp	r1, #2
 80009d4:	d06e      	beq.n	8000ab4 <__aeabi_fmul+0x150>
 80009d6:	2901      	cmp	r1, #1
 80009d8:	d12c      	bne.n	8000a34 <__aeabi_fmul+0xd0>
 80009da:	2000      	movs	r0, #0
 80009dc:	2200      	movs	r2, #0
 80009de:	05c0      	lsls	r0, r0, #23
 80009e0:	07f6      	lsls	r6, r6, #31
 80009e2:	4310      	orrs	r0, r2
 80009e4:	4330      	orrs	r0, r6
 80009e6:	bce0      	pop	{r5, r6, r7}
 80009e8:	46ba      	mov	sl, r7
 80009ea:	46b1      	mov	r9, r6
 80009ec:	46a8      	mov	r8, r5
 80009ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f0:	002b      	movs	r3, r5
 80009f2:	33ff      	adds	r3, #255	@ 0xff
 80009f4:	2c00      	cmp	r4, #0
 80009f6:	d065      	beq.n	8000ac4 <__aeabi_fmul+0x160>
 80009f8:	2203      	movs	r2, #3
 80009fa:	4641      	mov	r1, r8
 80009fc:	4311      	orrs	r1, r2
 80009fe:	0032      	movs	r2, r6
 8000a00:	3501      	adds	r5, #1
 8000a02:	4688      	mov	r8, r1
 8000a04:	407a      	eors	r2, r7
 8000a06:	35ff      	adds	r5, #255	@ 0xff
 8000a08:	290a      	cmp	r1, #10
 8000a0a:	dd00      	ble.n	8000a0e <__aeabi_fmul+0xaa>
 8000a0c:	e0d8      	b.n	8000bc0 <__aeabi_fmul+0x25c>
 8000a0e:	0016      	movs	r6, r2
 8000a10:	2103      	movs	r1, #3
 8000a12:	4640      	mov	r0, r8
 8000a14:	2201      	movs	r2, #1
 8000a16:	4082      	lsls	r2, r0
 8000a18:	20a6      	movs	r0, #166	@ 0xa6
 8000a1a:	00c0      	lsls	r0, r0, #3
 8000a1c:	4202      	tst	r2, r0
 8000a1e:	d020      	beq.n	8000a62 <__aeabi_fmul+0xfe>
 8000a20:	4653      	mov	r3, sl
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d046      	beq.n	8000ab4 <__aeabi_fmul+0x150>
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fmul+0xc8>
 8000a2a:	e0bb      	b.n	8000ba4 <__aeabi_fmul+0x240>
 8000a2c:	4651      	mov	r1, sl
 8000a2e:	464c      	mov	r4, r9
 8000a30:	2901      	cmp	r1, #1
 8000a32:	d0d2      	beq.n	80009da <__aeabi_fmul+0x76>
 8000a34:	002b      	movs	r3, r5
 8000a36:	337f      	adds	r3, #127	@ 0x7f
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dd70      	ble.n	8000b1e <__aeabi_fmul+0x1ba>
 8000a3c:	0762      	lsls	r2, r4, #29
 8000a3e:	d004      	beq.n	8000a4a <__aeabi_fmul+0xe6>
 8000a40:	220f      	movs	r2, #15
 8000a42:	4022      	ands	r2, r4
 8000a44:	2a04      	cmp	r2, #4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fmul+0xe6>
 8000a48:	3404      	adds	r4, #4
 8000a4a:	0122      	lsls	r2, r4, #4
 8000a4c:	d503      	bpl.n	8000a56 <__aeabi_fmul+0xf2>
 8000a4e:	4b63      	ldr	r3, [pc, #396]	@ (8000bdc <__aeabi_fmul+0x278>)
 8000a50:	401c      	ands	r4, r3
 8000a52:	002b      	movs	r3, r5
 8000a54:	3380      	adds	r3, #128	@ 0x80
 8000a56:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a58:	dc2c      	bgt.n	8000ab4 <__aeabi_fmul+0x150>
 8000a5a:	01a2      	lsls	r2, r4, #6
 8000a5c:	0a52      	lsrs	r2, r2, #9
 8000a5e:	b2d8      	uxtb	r0, r3
 8000a60:	e7bd      	b.n	80009de <__aeabi_fmul+0x7a>
 8000a62:	2090      	movs	r0, #144	@ 0x90
 8000a64:	0080      	lsls	r0, r0, #2
 8000a66:	4202      	tst	r2, r0
 8000a68:	d127      	bne.n	8000aba <__aeabi_fmul+0x156>
 8000a6a:	38b9      	subs	r0, #185	@ 0xb9
 8000a6c:	38ff      	subs	r0, #255	@ 0xff
 8000a6e:	4210      	tst	r0, r2
 8000a70:	d06d      	beq.n	8000b4e <__aeabi_fmul+0x1ea>
 8000a72:	003e      	movs	r6, r7
 8000a74:	46a1      	mov	r9, r4
 8000a76:	468a      	mov	sl, r1
 8000a78:	e7d2      	b.n	8000a20 <__aeabi_fmul+0xbc>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d141      	bne.n	8000b02 <__aeabi_fmul+0x19e>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	4642      	mov	r2, r8
 8000a82:	431a      	orrs	r2, r3
 8000a84:	4690      	mov	r8, r2
 8000a86:	002b      	movs	r3, r5
 8000a88:	4642      	mov	r2, r8
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	1c5d      	adds	r5, r3, #1
 8000a8e:	2a0a      	cmp	r2, #10
 8000a90:	dd97      	ble.n	80009c2 <__aeabi_fmul+0x5e>
 8000a92:	e7c5      	b.n	8000a20 <__aeabi_fmul+0xbc>
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d126      	bne.n	8000ae6 <__aeabi_fmul+0x182>
 8000a98:	2304      	movs	r3, #4
 8000a9a:	4698      	mov	r8, r3
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	e77a      	b.n	800099a <__aeabi_fmul+0x36>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d118      	bne.n	8000ada <__aeabi_fmul+0x176>
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	4698      	mov	r8, r3
 8000aac:	3b06      	subs	r3, #6
 8000aae:	25ff      	movs	r5, #255	@ 0xff
 8000ab0:	469a      	mov	sl, r3
 8000ab2:	e772      	b.n	800099a <__aeabi_fmul+0x36>
 8000ab4:	20ff      	movs	r0, #255	@ 0xff
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	e791      	b.n	80009de <__aeabi_fmul+0x7a>
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	2600      	movs	r6, #0
 8000abe:	20ff      	movs	r0, #255	@ 0xff
 8000ac0:	03d2      	lsls	r2, r2, #15
 8000ac2:	e78c      	b.n	80009de <__aeabi_fmul+0x7a>
 8000ac4:	4641      	mov	r1, r8
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	3501      	adds	r5, #1
 8000aca:	4311      	orrs	r1, r2
 8000acc:	4688      	mov	r8, r1
 8000ace:	35ff      	adds	r5, #255	@ 0xff
 8000ad0:	290a      	cmp	r1, #10
 8000ad2:	dca5      	bgt.n	8000a20 <__aeabi_fmul+0xbc>
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	407e      	eors	r6, r7
 8000ad8:	e774      	b.n	80009c4 <__aeabi_fmul+0x60>
 8000ada:	230c      	movs	r3, #12
 8000adc:	4698      	mov	r8, r3
 8000ade:	3b09      	subs	r3, #9
 8000ae0:	25ff      	movs	r5, #255	@ 0xff
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	e759      	b.n	800099a <__aeabi_fmul+0x36>
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f928 	bl	8000d3c <__clzsi2>
 8000aec:	464a      	mov	r2, r9
 8000aee:	1f43      	subs	r3, r0, #5
 8000af0:	2576      	movs	r5, #118	@ 0x76
 8000af2:	409a      	lsls	r2, r3
 8000af4:	2300      	movs	r3, #0
 8000af6:	426d      	negs	r5, r5
 8000af8:	4691      	mov	r9, r2
 8000afa:	4698      	mov	r8, r3
 8000afc:	469a      	mov	sl, r3
 8000afe:	1a2d      	subs	r5, r5, r0
 8000b00:	e74b      	b.n	800099a <__aeabi_fmul+0x36>
 8000b02:	0020      	movs	r0, r4
 8000b04:	f000 f91a 	bl	8000d3c <__clzsi2>
 8000b08:	4642      	mov	r2, r8
 8000b0a:	1f43      	subs	r3, r0, #5
 8000b0c:	409c      	lsls	r4, r3
 8000b0e:	1a2b      	subs	r3, r5, r0
 8000b10:	3b76      	subs	r3, #118	@ 0x76
 8000b12:	2100      	movs	r1, #0
 8000b14:	1c5d      	adds	r5, r3, #1
 8000b16:	2a0a      	cmp	r2, #10
 8000b18:	dc00      	bgt.n	8000b1c <__aeabi_fmul+0x1b8>
 8000b1a:	e752      	b.n	80009c2 <__aeabi_fmul+0x5e>
 8000b1c:	e780      	b.n	8000a20 <__aeabi_fmul+0xbc>
 8000b1e:	2201      	movs	r2, #1
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b1b      	cmp	r3, #27
 8000b24:	dd00      	ble.n	8000b28 <__aeabi_fmul+0x1c4>
 8000b26:	e758      	b.n	80009da <__aeabi_fmul+0x76>
 8000b28:	359e      	adds	r5, #158	@ 0x9e
 8000b2a:	0022      	movs	r2, r4
 8000b2c:	40ac      	lsls	r4, r5
 8000b2e:	40da      	lsrs	r2, r3
 8000b30:	1e63      	subs	r3, r4, #1
 8000b32:	419c      	sbcs	r4, r3
 8000b34:	4322      	orrs	r2, r4
 8000b36:	0753      	lsls	r3, r2, #29
 8000b38:	d004      	beq.n	8000b44 <__aeabi_fmul+0x1e0>
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fmul+0x1e0>
 8000b42:	3204      	adds	r2, #4
 8000b44:	0153      	lsls	r3, r2, #5
 8000b46:	d537      	bpl.n	8000bb8 <__aeabi_fmul+0x254>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	e747      	b.n	80009de <__aeabi_fmul+0x7a>
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	464a      	mov	r2, r9
 8000b52:	0424      	lsls	r4, r4, #16
 8000b54:	0c24      	lsrs	r4, r4, #16
 8000b56:	0027      	movs	r7, r4
 8000b58:	0c10      	lsrs	r0, r2, #16
 8000b5a:	0412      	lsls	r2, r2, #16
 8000b5c:	0c12      	lsrs	r2, r2, #16
 8000b5e:	4344      	muls	r4, r0
 8000b60:	4357      	muls	r7, r2
 8000b62:	4348      	muls	r0, r1
 8000b64:	4351      	muls	r1, r2
 8000b66:	0c3a      	lsrs	r2, r7, #16
 8000b68:	1909      	adds	r1, r1, r4
 8000b6a:	1852      	adds	r2, r2, r1
 8000b6c:	4294      	cmp	r4, r2
 8000b6e:	d903      	bls.n	8000b78 <__aeabi_fmul+0x214>
 8000b70:	2180      	movs	r1, #128	@ 0x80
 8000b72:	0249      	lsls	r1, r1, #9
 8000b74:	468c      	mov	ip, r1
 8000b76:	4460      	add	r0, ip
 8000b78:	043f      	lsls	r7, r7, #16
 8000b7a:	0411      	lsls	r1, r2, #16
 8000b7c:	0c3f      	lsrs	r7, r7, #16
 8000b7e:	19c9      	adds	r1, r1, r7
 8000b80:	018c      	lsls	r4, r1, #6
 8000b82:	1e67      	subs	r7, r4, #1
 8000b84:	41bc      	sbcs	r4, r7
 8000b86:	0c12      	lsrs	r2, r2, #16
 8000b88:	0e89      	lsrs	r1, r1, #26
 8000b8a:	1812      	adds	r2, r2, r0
 8000b8c:	430c      	orrs	r4, r1
 8000b8e:	0192      	lsls	r2, r2, #6
 8000b90:	4314      	orrs	r4, r2
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	d50e      	bpl.n	8000bb4 <__aeabi_fmul+0x250>
 8000b96:	2301      	movs	r3, #1
 8000b98:	0862      	lsrs	r2, r4, #1
 8000b9a:	401c      	ands	r4, r3
 8000b9c:	4314      	orrs	r4, r2
 8000b9e:	e749      	b.n	8000a34 <__aeabi_fmul+0xd0>
 8000ba0:	003e      	movs	r6, r7
 8000ba2:	46a1      	mov	r9, r4
 8000ba4:	2280      	movs	r2, #128	@ 0x80
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	03d2      	lsls	r2, r2, #15
 8000baa:	431a      	orrs	r2, r3
 8000bac:	0252      	lsls	r2, r2, #9
 8000bae:	20ff      	movs	r0, #255	@ 0xff
 8000bb0:	0a52      	lsrs	r2, r2, #9
 8000bb2:	e714      	b.n	80009de <__aeabi_fmul+0x7a>
 8000bb4:	001d      	movs	r5, r3
 8000bb6:	e73d      	b.n	8000a34 <__aeabi_fmul+0xd0>
 8000bb8:	0192      	lsls	r2, r2, #6
 8000bba:	2000      	movs	r0, #0
 8000bbc:	0a52      	lsrs	r2, r2, #9
 8000bbe:	e70e      	b.n	80009de <__aeabi_fmul+0x7a>
 8000bc0:	290f      	cmp	r1, #15
 8000bc2:	d1ed      	bne.n	8000ba0 <__aeabi_fmul+0x23c>
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	464b      	mov	r3, r9
 8000bc8:	03d2      	lsls	r2, r2, #15
 8000bca:	4213      	tst	r3, r2
 8000bcc:	d0ea      	beq.n	8000ba4 <__aeabi_fmul+0x240>
 8000bce:	4214      	tst	r4, r2
 8000bd0:	d1e8      	bne.n	8000ba4 <__aeabi_fmul+0x240>
 8000bd2:	003e      	movs	r6, r7
 8000bd4:	20ff      	movs	r0, #255	@ 0xff
 8000bd6:	4322      	orrs	r2, r4
 8000bd8:	e701      	b.n	80009de <__aeabi_fmul+0x7a>
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	f7ffffff 	.word	0xf7ffffff

08000be0 <__aeabi_f2iz>:
 8000be0:	0241      	lsls	r1, r0, #9
 8000be2:	0042      	lsls	r2, r0, #1
 8000be4:	0fc3      	lsrs	r3, r0, #31
 8000be6:	0a49      	lsrs	r1, r1, #9
 8000be8:	2000      	movs	r0, #0
 8000bea:	0e12      	lsrs	r2, r2, #24
 8000bec:	2a7e      	cmp	r2, #126	@ 0x7e
 8000bee:	dd03      	ble.n	8000bf8 <__aeabi_f2iz+0x18>
 8000bf0:	2a9d      	cmp	r2, #157	@ 0x9d
 8000bf2:	dd02      	ble.n	8000bfa <__aeabi_f2iz+0x1a>
 8000bf4:	4a09      	ldr	r2, [pc, #36]	@ (8000c1c <__aeabi_f2iz+0x3c>)
 8000bf6:	1898      	adds	r0, r3, r2
 8000bf8:	4770      	bx	lr
 8000bfa:	2080      	movs	r0, #128	@ 0x80
 8000bfc:	0400      	lsls	r0, r0, #16
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	2a95      	cmp	r2, #149	@ 0x95
 8000c02:	dc07      	bgt.n	8000c14 <__aeabi_f2iz+0x34>
 8000c04:	2096      	movs	r0, #150	@ 0x96
 8000c06:	1a82      	subs	r2, r0, r2
 8000c08:	40d1      	lsrs	r1, r2
 8000c0a:	4248      	negs	r0, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f3      	bne.n	8000bf8 <__aeabi_f2iz+0x18>
 8000c10:	0008      	movs	r0, r1
 8000c12:	e7f1      	b.n	8000bf8 <__aeabi_f2iz+0x18>
 8000c14:	3a96      	subs	r2, #150	@ 0x96
 8000c16:	4091      	lsls	r1, r2
 8000c18:	e7f7      	b.n	8000c0a <__aeabi_f2iz+0x2a>
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	7fffffff 	.word	0x7fffffff

08000c20 <__aeabi_i2f>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	2800      	cmp	r0, #0
 8000c24:	d013      	beq.n	8000c4e <__aeabi_i2f+0x2e>
 8000c26:	17c3      	asrs	r3, r0, #31
 8000c28:	18c5      	adds	r5, r0, r3
 8000c2a:	405d      	eors	r5, r3
 8000c2c:	0fc4      	lsrs	r4, r0, #31
 8000c2e:	0028      	movs	r0, r5
 8000c30:	f000 f884 	bl	8000d3c <__clzsi2>
 8000c34:	239e      	movs	r3, #158	@ 0x9e
 8000c36:	0001      	movs	r1, r0
 8000c38:	1a1b      	subs	r3, r3, r0
 8000c3a:	2b96      	cmp	r3, #150	@ 0x96
 8000c3c:	dc0f      	bgt.n	8000c5e <__aeabi_i2f+0x3e>
 8000c3e:	2808      	cmp	r0, #8
 8000c40:	d034      	beq.n	8000cac <__aeabi_i2f+0x8c>
 8000c42:	3908      	subs	r1, #8
 8000c44:	408d      	lsls	r5, r1
 8000c46:	026d      	lsls	r5, r5, #9
 8000c48:	0a6d      	lsrs	r5, r5, #9
 8000c4a:	b2d8      	uxtb	r0, r3
 8000c4c:	e002      	b.n	8000c54 <__aeabi_i2f+0x34>
 8000c4e:	2400      	movs	r4, #0
 8000c50:	2000      	movs	r0, #0
 8000c52:	2500      	movs	r5, #0
 8000c54:	05c0      	lsls	r0, r0, #23
 8000c56:	4328      	orrs	r0, r5
 8000c58:	07e4      	lsls	r4, r4, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
 8000c5e:	2b99      	cmp	r3, #153	@ 0x99
 8000c60:	dc16      	bgt.n	8000c90 <__aeabi_i2f+0x70>
 8000c62:	1f42      	subs	r2, r0, #5
 8000c64:	2805      	cmp	r0, #5
 8000c66:	d000      	beq.n	8000c6a <__aeabi_i2f+0x4a>
 8000c68:	4095      	lsls	r5, r2
 8000c6a:	002a      	movs	r2, r5
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <__aeabi_i2f+0x94>)
 8000c6e:	4002      	ands	r2, r0
 8000c70:	076e      	lsls	r6, r5, #29
 8000c72:	d009      	beq.n	8000c88 <__aeabi_i2f+0x68>
 8000c74:	260f      	movs	r6, #15
 8000c76:	4035      	ands	r5, r6
 8000c78:	2d04      	cmp	r5, #4
 8000c7a:	d005      	beq.n	8000c88 <__aeabi_i2f+0x68>
 8000c7c:	3204      	adds	r2, #4
 8000c7e:	0155      	lsls	r5, r2, #5
 8000c80:	d502      	bpl.n	8000c88 <__aeabi_i2f+0x68>
 8000c82:	239f      	movs	r3, #159	@ 0x9f
 8000c84:	4002      	ands	r2, r0
 8000c86:	1a5b      	subs	r3, r3, r1
 8000c88:	0192      	lsls	r2, r2, #6
 8000c8a:	0a55      	lsrs	r5, r2, #9
 8000c8c:	b2d8      	uxtb	r0, r3
 8000c8e:	e7e1      	b.n	8000c54 <__aeabi_i2f+0x34>
 8000c90:	2205      	movs	r2, #5
 8000c92:	1a12      	subs	r2, r2, r0
 8000c94:	0028      	movs	r0, r5
 8000c96:	40d0      	lsrs	r0, r2
 8000c98:	0002      	movs	r2, r0
 8000c9a:	0008      	movs	r0, r1
 8000c9c:	301b      	adds	r0, #27
 8000c9e:	4085      	lsls	r5, r0
 8000ca0:	0028      	movs	r0, r5
 8000ca2:	1e45      	subs	r5, r0, #1
 8000ca4:	41a8      	sbcs	r0, r5
 8000ca6:	4302      	orrs	r2, r0
 8000ca8:	0015      	movs	r5, r2
 8000caa:	e7de      	b.n	8000c6a <__aeabi_i2f+0x4a>
 8000cac:	026d      	lsls	r5, r5, #9
 8000cae:	2096      	movs	r0, #150	@ 0x96
 8000cb0:	0a6d      	lsrs	r5, r5, #9
 8000cb2:	e7cf      	b.n	8000c54 <__aeabi_i2f+0x34>
 8000cb4:	fbffffff 	.word	0xfbffffff

08000cb8 <__aeabi_ui2f>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	1e04      	subs	r4, r0, #0
 8000cbc:	d00e      	beq.n	8000cdc <__aeabi_ui2f+0x24>
 8000cbe:	f000 f83d 	bl	8000d3c <__clzsi2>
 8000cc2:	239e      	movs	r3, #158	@ 0x9e
 8000cc4:	0001      	movs	r1, r0
 8000cc6:	1a1b      	subs	r3, r3, r0
 8000cc8:	2b96      	cmp	r3, #150	@ 0x96
 8000cca:	dc0c      	bgt.n	8000ce6 <__aeabi_ui2f+0x2e>
 8000ccc:	2808      	cmp	r0, #8
 8000cce:	d02f      	beq.n	8000d30 <__aeabi_ui2f+0x78>
 8000cd0:	3908      	subs	r1, #8
 8000cd2:	408c      	lsls	r4, r1
 8000cd4:	0264      	lsls	r4, r4, #9
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	b2d8      	uxtb	r0, r3
 8000cda:	e001      	b.n	8000ce0 <__aeabi_ui2f+0x28>
 8000cdc:	2000      	movs	r0, #0
 8000cde:	2400      	movs	r4, #0
 8000ce0:	05c0      	lsls	r0, r0, #23
 8000ce2:	4320      	orrs	r0, r4
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
 8000ce6:	2b99      	cmp	r3, #153	@ 0x99
 8000ce8:	dc16      	bgt.n	8000d18 <__aeabi_ui2f+0x60>
 8000cea:	1f42      	subs	r2, r0, #5
 8000cec:	2805      	cmp	r0, #5
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_ui2f+0x3a>
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	0022      	movs	r2, r4
 8000cf4:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <__aeabi_ui2f+0x80>)
 8000cf6:	4002      	ands	r2, r0
 8000cf8:	0765      	lsls	r5, r4, #29
 8000cfa:	d009      	beq.n	8000d10 <__aeabi_ui2f+0x58>
 8000cfc:	250f      	movs	r5, #15
 8000cfe:	402c      	ands	r4, r5
 8000d00:	2c04      	cmp	r4, #4
 8000d02:	d005      	beq.n	8000d10 <__aeabi_ui2f+0x58>
 8000d04:	3204      	adds	r2, #4
 8000d06:	0154      	lsls	r4, r2, #5
 8000d08:	d502      	bpl.n	8000d10 <__aeabi_ui2f+0x58>
 8000d0a:	239f      	movs	r3, #159	@ 0x9f
 8000d0c:	4002      	ands	r2, r0
 8000d0e:	1a5b      	subs	r3, r3, r1
 8000d10:	0192      	lsls	r2, r2, #6
 8000d12:	0a54      	lsrs	r4, r2, #9
 8000d14:	b2d8      	uxtb	r0, r3
 8000d16:	e7e3      	b.n	8000ce0 <__aeabi_ui2f+0x28>
 8000d18:	0002      	movs	r2, r0
 8000d1a:	0020      	movs	r0, r4
 8000d1c:	321b      	adds	r2, #27
 8000d1e:	4090      	lsls	r0, r2
 8000d20:	0002      	movs	r2, r0
 8000d22:	1e50      	subs	r0, r2, #1
 8000d24:	4182      	sbcs	r2, r0
 8000d26:	2005      	movs	r0, #5
 8000d28:	1a40      	subs	r0, r0, r1
 8000d2a:	40c4      	lsrs	r4, r0
 8000d2c:	4314      	orrs	r4, r2
 8000d2e:	e7e0      	b.n	8000cf2 <__aeabi_ui2f+0x3a>
 8000d30:	0264      	lsls	r4, r4, #9
 8000d32:	2096      	movs	r0, #150	@ 0x96
 8000d34:	0a64      	lsrs	r4, r4, #9
 8000d36:	e7d3      	b.n	8000ce0 <__aeabi_ui2f+0x28>
 8000d38:	fbffffff 	.word	0xfbffffff

08000d3c <__clzsi2>:
 8000d3c:	211c      	movs	r1, #28
 8000d3e:	2301      	movs	r3, #1
 8000d40:	041b      	lsls	r3, r3, #16
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d301      	bcc.n	8000d4a <__clzsi2+0xe>
 8000d46:	0c00      	lsrs	r0, r0, #16
 8000d48:	3910      	subs	r1, #16
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	d301      	bcc.n	8000d54 <__clzsi2+0x18>
 8000d50:	0a00      	lsrs	r0, r0, #8
 8000d52:	3908      	subs	r1, #8
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d301      	bcc.n	8000d5e <__clzsi2+0x22>
 8000d5a:	0900      	lsrs	r0, r0, #4
 8000d5c:	3904      	subs	r1, #4
 8000d5e:	a202      	add	r2, pc, #8	@ (adr r2, 8000d68 <__clzsi2+0x2c>)
 8000d60:	5c10      	ldrb	r0, [r2, r0]
 8000d62:	1840      	adds	r0, r0, r1
 8000d64:	4770      	bx	lr
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	02020304 	.word	0x02020304
 8000d6c:	01010101 	.word	0x01010101
	...

08000d78 <microDelay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay(uint16_t delay) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	1dbb      	adds	r3, r7, #6
 8000d82:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <microDelay+0x30>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <microDelay+0x30>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d94:	1dbb      	adds	r3, r7, #6
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3f8      	bcc.n	8000d8e <microDelay+0x16>
}
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	20000078 	.word	0x20000078

08000dac <DHT22_Start>:

uint8_t DHT22_Start(void) {
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8000db2:	2417      	movs	r4, #23
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	003b      	movs	r3, r7
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	2314      	movs	r3, #20
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f002 fd88 	bl	80038d8 <memset>

    // Set pin as output
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_RESET);
 8000dc8:	23a0      	movs	r3, #160	@ 0xa0
 8000dca:	05db      	lsls	r3, r3, #23
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2102      	movs	r1, #2
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 ff4e 	bl	8001c72 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = DHT22_PIN;
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	2202      	movs	r2, #2
 8000dda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	003b      	movs	r3, r7
 8000dde:	2201      	movs	r2, #1
 8000de0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStruct);
 8000dee:	003a      	movs	r2, r7
 8000df0:	23a0      	movs	r3, #160	@ 0xa0
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	0011      	movs	r1, r2
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fdba 	bl	8001970 <HAL_GPIO_Init>

    // Pull the pin low for 1300 µs
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0); // Pin low
 8000dfc:	23a0      	movs	r3, #160	@ 0xa0
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	2200      	movs	r2, #0
 8000e02:	2102      	movs	r1, #2
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 ff34 	bl	8001c72 <HAL_GPIO_WritePin>
    microDelay(1300); // Wait for 1300 µs
 8000e0a:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <DHT22_Start+0x100>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ffb3 	bl	8000d78 <microDelay>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1); // Pin high
 8000e12:	23a0      	movs	r3, #160	@ 0xa0
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	2201      	movs	r2, #1
 8000e18:	2102      	movs	r1, #2
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 ff29 	bl	8001c72 <HAL_GPIO_WritePin>
    microDelay(30); // Wait for 30 µs
 8000e20:	201e      	movs	r0, #30
 8000e22:	f7ff ffa9 	bl	8000d78 <microDelay>

    // Set pin as input to receive response
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // Default pull-up (internally)
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStruct);
 8000e32:	003a      	movs	r2, r7
 8000e34:	23a0      	movs	r3, #160	@ 0xa0
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 fd98 	bl	8001970 <HAL_GPIO_Init>

    // Wait for sensor response, checking if the pin is low
    microDelay(40); // Wait for 40 µs
 8000e40:	2028      	movs	r0, #40	@ 0x28
 8000e42:	f7ff ff99 	bl	8000d78 <microDelay>
    if (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) { // If pin is low
 8000e46:	23a0      	movs	r3, #160	@ 0xa0
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f000 fef3 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d10d      	bne.n	8000e72 <DHT22_Start+0xc6>
        microDelay(80); // Wait for 80 µs (total 120 µs from the start)
 8000e56:	2050      	movs	r0, #80	@ 0x50
 8000e58:	f7ff ff8e 	bl	8000d78 <microDelay>
        if (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) Response = 1; // If pin goes high, response OK
 8000e5c:	23a0      	movs	r3, #160	@ 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	2102      	movs	r1, #2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 fee8 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d002      	beq.n	8000e72 <DHT22_Start+0xc6>
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
    }

    // Wait for the pin to go low (sensor finishes communication)
    pMillis = HAL_GetTick();
 8000e72:	f000 fc85 	bl	8001780 <HAL_GetTick>
 8000e76:	0002      	movs	r2, r0
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <DHT22_Start+0x104>)
 8000e7a:	601a      	str	r2, [r3, #0]
    while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN) && (HAL_GetTick() - pMillis < 2)); // Timeout if pin stays high for too long
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	23a0      	movs	r3, #160	@ 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	2102      	movs	r1, #2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f000 fed7 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d007      	beq.n	8000e9e <DHT22_Start+0xf2>
 8000e8e:	f000 fc77 	bl	8001780 <HAL_GetTick>
 8000e92:	0002      	movs	r2, r0
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <DHT22_Start+0x104>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d9ef      	bls.n	8000e7e <DHT22_Start+0xd2>

    return Response; // Return 1 if response was valid, 0 otherwise
 8000e9e:	2317      	movs	r3, #23
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	781b      	ldrb	r3, [r3, #0]
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b007      	add	sp, #28
 8000eaa:	bd90      	pop	{r4, r7, pc}
 8000eac:	00000514 	.word	0x00000514
 8000eb0:	20000160 	.word	0x20000160

08000eb4 <DHT22_Read>:


uint8_t DHT22_Read(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
    uint8_t a, b = 0;
 8000eba:	1dbb      	adds	r3, r7, #6
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
    for (a = 0; a < 8; a++) {
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e05c      	b.n	8000f82 <DHT22_Read+0xce>
        pMillis = HAL_GetTick();
 8000ec8:	f000 fc5a 	bl	8001780 <HAL_GetTick>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <DHT22_Read+0xe4>)
 8000ed0:	601a      	str	r2, [r3, #0]
        while (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN) && (HAL_GetTick() - pMillis < 2));
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	23a0      	movs	r3, #160	@ 0xa0
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	2102      	movs	r1, #2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 feac 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000ee0:	1e03      	subs	r3, r0, #0
 8000ee2:	d107      	bne.n	8000ef4 <DHT22_Read+0x40>
 8000ee4:	f000 fc4c 	bl	8001780 <HAL_GetTick>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <DHT22_Read+0xe4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d9ef      	bls.n	8000ed4 <DHT22_Read+0x20>

        microDelay(40); // Wait for 40us
 8000ef4:	2028      	movs	r0, #40	@ 0x28
 8000ef6:	f7ff ff3f 	bl	8000d78 <microDelay>

        if (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8000efa:	23a0      	movs	r3, #160	@ 0xa0
 8000efc:	05db      	lsls	r3, r3, #23
 8000efe:	2102      	movs	r1, #2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 fe99 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d00f      	beq.n	8000f2a <DHT22_Read+0x76>
            b |= (1 << (7 - a)); // Set bit
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2207      	movs	r2, #7
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2201      	movs	r2, #1
 8000f14:	409a      	lsls	r2, r3
 8000f16:	0013      	movs	r3, r2
 8000f18:	b25a      	sxtb	r2, r3
 8000f1a:	1dbb      	adds	r3, r7, #6
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b25a      	sxtb	r2, r3
 8000f24:	1dbb      	adds	r3, r7, #6
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e010      	b.n	8000f4c <DHT22_Read+0x98>
        else
            b &= ~(1 << (7 - a)); // Clear bit
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2207      	movs	r2, #7
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2201      	movs	r2, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	1dba      	adds	r2, r7, #6
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	b252      	sxtb	r2, r2
 8000f44:	4013      	ands	r3, r2
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	1dbb      	adds	r3, r7, #6
 8000f4a:	701a      	strb	r2, [r3, #0]

        pMillis = HAL_GetTick();
 8000f4c:	f000 fc18 	bl	8001780 <HAL_GetTick>
 8000f50:	0002      	movs	r2, r0
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <DHT22_Read+0xe4>)
 8000f54:	601a      	str	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN) && (HAL_GetTick() - pMillis < 2));
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	23a0      	movs	r3, #160	@ 0xa0
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 fe6a 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d007      	beq.n	8000f78 <DHT22_Read+0xc4>
 8000f68:	f000 fc0a 	bl	8001780 <HAL_GetTick>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <DHT22_Read+0xe4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d9ef      	bls.n	8000f58 <DHT22_Read+0xa4>
    for (a = 0; a < 8; a++) {
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	3201      	adds	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	d99e      	bls.n	8000ec8 <DHT22_Read+0x14>
    }
    return b;
 8000f8a:	1dbb      	adds	r3, r7, #6
 8000f8c:	781b      	ldrb	r3, [r3, #0]
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	20000160 	.word	0x20000160

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f000 fb71 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f90f 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 fa11 	bl	80013d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fae:	f000 f965 	bl	800127c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000fb2:	f000 f9bf 	bl	8001334 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000fb6:	4b74      	ldr	r3, [pc, #464]	@ (8001188 <main+0x1ec>)
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f001 fbd5 	bl	8002768 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (DHT22_Start()) {
 8000fbe:	f7ff fef5 	bl	8000dac <DHT22_Start>
 8000fc2:	1e03      	subs	r3, r0, #0
 8000fc4:	d100      	bne.n	8000fc8 <main+0x2c>
 8000fc6:	e083      	b.n	80010d0 <main+0x134>
          RH1 = DHT22_Read();
 8000fc8:	f7ff ff74 	bl	8000eb4 <DHT22_Read>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	001a      	movs	r2, r3
 8000fd0:	4b6e      	ldr	r3, [pc, #440]	@ (800118c <main+0x1f0>)
 8000fd2:	701a      	strb	r2, [r3, #0]
          RH2 = DHT22_Read();
 8000fd4:	f7ff ff6e 	bl	8000eb4 <DHT22_Read>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	001a      	movs	r2, r3
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8001190 <main+0x1f4>)
 8000fde:	701a      	strb	r2, [r3, #0]
          TC1 = DHT22_Read();
 8000fe0:	f7ff ff68 	bl	8000eb4 <DHT22_Read>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8001194 <main+0x1f8>)
 8000fea:	701a      	strb	r2, [r3, #0]
          TC2 = DHT22_Read();
 8000fec:	f7ff ff62 	bl	8000eb4 <DHT22_Read>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	4b68      	ldr	r3, [pc, #416]	@ (8001198 <main+0x1fc>)
 8000ff6:	701a      	strb	r2, [r3, #0]
          SUM = DHT22_Read();
 8000ff8:	f7ff ff5c 	bl	8000eb4 <DHT22_Read>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	001a      	movs	r2, r3
 8001000:	4b66      	ldr	r3, [pc, #408]	@ (800119c <main+0x200>)
 8001002:	701a      	strb	r2, [r3, #0]

          CHECK = RH1 + RH2 + TC1 + TC2;
 8001004:	4b61      	ldr	r3, [pc, #388]	@ (800118c <main+0x1f0>)
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	4b61      	ldr	r3, [pc, #388]	@ (8001190 <main+0x1f4>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b60      	ldr	r3, [pc, #384]	@ (8001194 <main+0x1f8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b5f      	ldr	r3, [pc, #380]	@ (8001198 <main+0x1fc>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b5f      	ldr	r3, [pc, #380]	@ (80011a0 <main+0x204>)
 8001022:	701a      	strb	r2, [r3, #0]
          if (CHECK == SUM) {
 8001024:	4b5e      	ldr	r3, [pc, #376]	@ (80011a0 <main+0x204>)
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	4b5c      	ldr	r3, [pc, #368]	@ (800119c <main+0x200>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d14f      	bne.n	80010d0 <main+0x134>
              if (TC1 > 127) { // Negative temperature
 8001030:	4b58      	ldr	r3, [pc, #352]	@ (8001194 <main+0x1f8>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b25b      	sxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	da11      	bge.n	800105e <main+0xc2>
                  tCelsius = (float)TC2 / 10 * (-1);
 800103a:	4b57      	ldr	r3, [pc, #348]	@ (8001198 <main+0x1fc>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff fe3a 	bl	8000cb8 <__aeabi_ui2f>
 8001044:	1c03      	adds	r3, r0, #0
 8001046:	4957      	ldr	r1, [pc, #348]	@ (80011a4 <main+0x208>)
 8001048:	1c18      	adds	r0, r3, #0
 800104a:	f7ff fb6b 	bl	8000724 <__aeabi_fdiv>
 800104e:	1c03      	adds	r3, r0, #0
 8001050:	1c1a      	adds	r2, r3, #0
 8001052:	2380      	movs	r3, #128	@ 0x80
 8001054:	061b      	lsls	r3, r3, #24
 8001056:	405a      	eors	r2, r3
 8001058:	4b53      	ldr	r3, [pc, #332]	@ (80011a8 <main+0x20c>)
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e011      	b.n	8001082 <main+0xe6>
              } else {
                  tCelsius = (float)((TC1 << 8) | TC2) / 10;
 800105e:	4b4d      	ldr	r3, [pc, #308]	@ (8001194 <main+0x1f8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	4a4c      	ldr	r2, [pc, #304]	@ (8001198 <main+0x1fc>)
 8001066:	7812      	ldrb	r2, [r2, #0]
 8001068:	4313      	orrs	r3, r2
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff fdd8 	bl	8000c20 <__aeabi_i2f>
 8001070:	1c03      	adds	r3, r0, #0
 8001072:	494c      	ldr	r1, [pc, #304]	@ (80011a4 <main+0x208>)
 8001074:	1c18      	adds	r0, r3, #0
 8001076:	f7ff fb55 	bl	8000724 <__aeabi_fdiv>
 800107a:	1c03      	adds	r3, r0, #0
 800107c:	1c1a      	adds	r2, r3, #0
 800107e:	4b4a      	ldr	r3, [pc, #296]	@ (80011a8 <main+0x20c>)
 8001080:	601a      	str	r2, [r3, #0]
              }
              tFahrenheit = tCelsius * 9 / 5 + 32;
 8001082:	4b49      	ldr	r3, [pc, #292]	@ (80011a8 <main+0x20c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4949      	ldr	r1, [pc, #292]	@ (80011ac <main+0x210>)
 8001088:	1c18      	adds	r0, r3, #0
 800108a:	f7ff fc6b 	bl	8000964 <__aeabi_fmul>
 800108e:	1c03      	adds	r3, r0, #0
 8001090:	4947      	ldr	r1, [pc, #284]	@ (80011b0 <main+0x214>)
 8001092:	1c18      	adds	r0, r3, #0
 8001094:	f7ff fb46 	bl	8000724 <__aeabi_fdiv>
 8001098:	1c03      	adds	r3, r0, #0
 800109a:	2184      	movs	r1, #132	@ 0x84
 800109c:	05c9      	lsls	r1, r1, #23
 800109e:	1c18      	adds	r0, r3, #0
 80010a0:	f7ff f9b6 	bl	8000410 <__aeabi_fadd>
 80010a4:	1c03      	adds	r3, r0, #0
 80010a6:	1c1a      	adds	r2, r3, #0
 80010a8:	4b42      	ldr	r3, [pc, #264]	@ (80011b4 <main+0x218>)
 80010aa:	601a      	str	r2, [r3, #0]
              RH = (float)((RH1 << 8) | RH2) / 10;
 80010ac:	4b37      	ldr	r3, [pc, #220]	@ (800118c <main+0x1f0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	4a37      	ldr	r2, [pc, #220]	@ (8001190 <main+0x1f4>)
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff fdb1 	bl	8000c20 <__aeabi_i2f>
 80010be:	1c03      	adds	r3, r0, #0
 80010c0:	4938      	ldr	r1, [pc, #224]	@ (80011a4 <main+0x208>)
 80010c2:	1c18      	adds	r0, r3, #0
 80010c4:	f7ff fb2e 	bl	8000724 <__aeabi_fdiv>
 80010c8:	1c03      	adds	r3, r0, #0
 80010ca:	1c1a      	adds	r2, r3, #0
 80010cc:	4b3a      	ldr	r3, [pc, #232]	@ (80011b8 <main+0x21c>)
 80010ce:	601a      	str	r2, [r3, #0]
          }
      }
      // Send temperature and humidity as integers multiplied by 10
      int16_t tCelsiusScaled = (int16_t)(tCelsius * 10);
 80010d0:	4b35      	ldr	r3, [pc, #212]	@ (80011a8 <main+0x20c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4933      	ldr	r1, [pc, #204]	@ (80011a4 <main+0x208>)
 80010d6:	1c18      	adds	r0, r3, #0
 80010d8:	f7ff fc44 	bl	8000964 <__aeabi_fmul>
 80010dc:	1c03      	adds	r3, r0, #0
 80010de:	1dbc      	adds	r4, r7, #6
 80010e0:	1c18      	adds	r0, r3, #0
 80010e2:	f7ff fd7d 	bl	8000be0 <__aeabi_f2iz>
 80010e6:	0003      	movs	r3, r0
 80010e8:	8023      	strh	r3, [r4, #0]
      int16_t RHScaled = (int16_t)(RH * 10);
 80010ea:	4b33      	ldr	r3, [pc, #204]	@ (80011b8 <main+0x21c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	492d      	ldr	r1, [pc, #180]	@ (80011a4 <main+0x208>)
 80010f0:	1c18      	adds	r0, r3, #0
 80010f2:	f7ff fc37 	bl	8000964 <__aeabi_fmul>
 80010f6:	1c03      	adds	r3, r0, #0
 80010f8:	1d3c      	adds	r4, r7, #4
 80010fa:	1c18      	adds	r0, r3, #0
 80010fc:	f7ff fd70 	bl	8000be0 <__aeabi_f2iz>
 8001100:	0003      	movs	r3, r0
 8001102:	8023      	strh	r3, [r4, #0]

      // Format as integers and send
      sprintf((char *)txBuffer, "Temperature:%d.%dC,Humidity:%d.%d%%\n",
 8001104:	1dbb      	adds	r3, r7, #6
 8001106:	2200      	movs	r2, #0
 8001108:	5e9b      	ldrsh	r3, [r3, r2]
 800110a:	210a      	movs	r1, #10
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff f893 	bl	8000238 <__divsi3>
 8001112:	0003      	movs	r3, r0
 8001114:	b21b      	sxth	r3, r3
 8001116:	001d      	movs	r5, r3
 8001118:	1dbb      	adds	r3, r7, #6
 800111a:	2200      	movs	r2, #0
 800111c:	5e9b      	ldrsh	r3, [r3, r2]
 800111e:	210a      	movs	r1, #10
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff f96f 	bl	8000404 <__aeabi_idivmod>
 8001126:	000b      	movs	r3, r1
 8001128:	b21b      	sxth	r3, r3
 800112a:	001e      	movs	r6, r3
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	5e9b      	ldrsh	r3, [r3, r2]
 8001132:	210a      	movs	r1, #10
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff f87f 	bl	8000238 <__divsi3>
 800113a:	0003      	movs	r3, r0
 800113c:	b21b      	sxth	r3, r3
 800113e:	001c      	movs	r4, r3
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2200      	movs	r2, #0
 8001144:	5e9b      	ldrsh	r3, [r3, r2]
 8001146:	210a      	movs	r1, #10
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff f95b 	bl	8000404 <__aeabi_idivmod>
 800114e:	000b      	movs	r3, r1
 8001150:	b21b      	sxth	r3, r3
 8001152:	491a      	ldr	r1, [pc, #104]	@ (80011bc <main+0x220>)
 8001154:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <main+0x224>)
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	9400      	str	r4, [sp, #0]
 800115a:	0033      	movs	r3, r6
 800115c:	002a      	movs	r2, r5
 800115e:	f002 fb9b 	bl	8003898 <siprintf>
              tCelsiusScaled / 10, tCelsiusScaled % 10,
              RHScaled / 10, RHScaled % 10);

      // Send the string over UART2
      HAL_UART_Transmit(&huart2, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY);
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <main+0x224>)
 8001164:	0018      	movs	r0, r3
 8001166:	f7fe ffcb 	bl	8000100 <strlen>
 800116a:	0003      	movs	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	2301      	movs	r3, #1
 8001170:	425b      	negs	r3, r3
 8001172:	4913      	ldr	r1, [pc, #76]	@ (80011c0 <main+0x224>)
 8001174:	4813      	ldr	r0, [pc, #76]	@ (80011c4 <main+0x228>)
 8001176:	f001 fdf9 	bl	8002d6c <HAL_UART_Transmit>

      HAL_Delay(4000);  // Wait 1 second
 800117a:	23fa      	movs	r3, #250	@ 0xfa
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	0018      	movs	r0, r3
 8001180:	f000 fb08 	bl	8001794 <HAL_Delay>
  {
 8001184:	e71b      	b.n	8000fbe <main+0x22>
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	20000078 	.word	0x20000078
 800118c:	20000158 	.word	0x20000158
 8001190:	20000159 	.word	0x20000159
 8001194:	2000015a 	.word	0x2000015a
 8001198:	2000015b 	.word	0x2000015b
 800119c:	2000015c 	.word	0x2000015c
 80011a0:	2000015d 	.word	0x2000015d
 80011a4:	41200000 	.word	0x41200000
 80011a8:	20000164 	.word	0x20000164
 80011ac:	41100000 	.word	0x41100000
 80011b0:	40a00000 	.word	0x40a00000
 80011b4:	20000168 	.word	0x20000168
 80011b8:	2000016c 	.word	0x2000016c
 80011bc:	080041ec 	.word	0x080041ec
 80011c0:	20000170 	.word	0x20000170
 80011c4:	200000c4 	.word	0x200000c4

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b093      	sub	sp, #76	@ 0x4c
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	2414      	movs	r4, #20
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	0018      	movs	r0, r3
 80011d4:	2334      	movs	r3, #52	@ 0x34
 80011d6:	001a      	movs	r2, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	f002 fb7d 	bl	80038d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	0018      	movs	r0, r3
 80011e2:	2310      	movs	r3, #16
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	f002 fb76 	bl	80038d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	0018      	movs	r0, r3
 80011f2:	f000 fd5b 	bl	8001cac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f6:	193b      	adds	r3, r7, r4
 80011f8:	2202      	movs	r2, #2
 80011fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fc:	193b      	adds	r3, r7, r4
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	0052      	lsls	r2, r2, #1
 8001202:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001204:	0021      	movs	r1, r4
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2240      	movs	r2, #64	@ 0x40
 8001210:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2202      	movs	r2, #2
 8001216:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2202      	movs	r2, #2
 800121c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2230      	movs	r2, #48	@ 0x30
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2246      	movs	r2, #70	@ 0x46
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2290      	movs	r2, #144	@ 0x90
 800122e:	0352      	lsls	r2, r2, #13
 8001230:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2280      	movs	r2, #128	@ 0x80
 8001236:	0612      	lsls	r2, r2, #24
 8001238:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123a:	187b      	adds	r3, r7, r1
 800123c:	0018      	movs	r0, r3
 800123e:	f000 fd81 	bl	8001d44 <HAL_RCC_OscConfig>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001246:	f000 f907 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2202      	movs	r2, #2
 8001254:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2102      	movs	r1, #2
 8001266:	0018      	movs	r0, r3
 8001268:	f001 f87c 	bl	8002364 <HAL_RCC_ClockConfig>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001270:	f000 f8f2 	bl	8001458 <Error_Handler>
  }
}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b013      	add	sp, #76	@ 0x4c
 800127a:	bd90      	pop	{r4, r7, pc}

0800127c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	2310      	movs	r3, #16
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	0018      	movs	r0, r3
 8001288:	2310      	movs	r3, #16
 800128a:	001a      	movs	r2, r3
 800128c:	2100      	movs	r1, #0
 800128e:	f002 fb23 	bl	80038d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	0018      	movs	r0, r3
 8001296:	230c      	movs	r3, #12
 8001298:	001a      	movs	r2, r3
 800129a:	2100      	movs	r1, #0
 800129c:	f002 fb1c 	bl	80038d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <MX_TIM1_Init+0xac>)
 80012a2:	4a22      	ldr	r2, [pc, #136]	@ (800132c <MX_TIM1_Init+0xb0>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 55;
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <MX_TIM1_Init+0xac>)
 80012a8:	2237      	movs	r2, #55	@ 0x37
 80012aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <MX_TIM1_Init+0xac>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <MX_TIM1_Init+0xac>)
 80012b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001330 <MX_TIM1_Init+0xb4>)
 80012b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_TIM1_Init+0xac>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_TIM1_Init+0xac>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <MX_TIM1_Init+0xac>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <MX_TIM1_Init+0xac>)
 80012cc:	0018      	movs	r0, r3
 80012ce:	f001 f9f3 	bl	80026b8 <HAL_TIM_Base_Init>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80012d6:	f000 f8bf 	bl	8001458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012da:	2110      	movs	r1, #16
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2280      	movs	r2, #128	@ 0x80
 80012e0:	0152      	lsls	r2, r2, #5
 80012e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e4:	187a      	adds	r2, r7, r1
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <MX_TIM1_Init+0xac>)
 80012e8:	0011      	movs	r1, r2
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 fa8a 	bl	8002804 <HAL_TIM_ConfigClockSource>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012f4:	f000 f8b0 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130a:	1d3a      	adds	r2, r7, #4
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_TIM1_Init+0xac>)
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f001 fc6d 	bl	8002bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800131a:	f000 f89d 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b008      	add	sp, #32
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	20000078 	.word	0x20000078
 800132c:	40012c00 	.word	0x40012c00
 8001330:	0000ffff 	.word	0x0000ffff

08001334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001338:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 800133a:	4a24      	ldr	r2, [pc, #144]	@ (80013cc <MX_USART2_UART_Init+0x98>)
 800133c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800133e:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 8001340:	2296      	movs	r2, #150	@ 0x96
 8001342:	0192      	lsls	r2, r2, #6
 8001344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 800137e:	0018      	movs	r0, r3
 8001380:	f001 fc9e 	bl	8002cc0 <HAL_UART_Init>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d001      	beq.n	800138c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001388:	f000 f866 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 800138e:	2100      	movs	r1, #0
 8001390:	0018      	movs	r0, r3
 8001392:	f002 f9a1 	bl	80036d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	d001      	beq.n	800139e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800139a:	f000 f85d 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	0018      	movs	r0, r3
 80013a4:	f002 f9d8 	bl	8003758 <HAL_UARTEx_SetRxFifoThreshold>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013ac:	f000 f854 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <MX_USART2_UART_Init+0x94>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f002 f956 	bl	8003664 <HAL_UARTEx_DisableFifoMode>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013bc:	f000 f84c 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	200000c4 	.word	0x200000c4
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	240c      	movs	r4, #12
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	0018      	movs	r0, r3
 80013dc:	2314      	movs	r3, #20
 80013de:	001a      	movs	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	f002 fa79 	bl	80038d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_GPIO_Init+0x84>)
 80013e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_GPIO_Init+0x84>)
 80013ec:	2120      	movs	r1, #32
 80013ee:	430a      	orrs	r2, r1
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_GPIO_Init+0x84>)
 80013f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f6:	2220      	movs	r2, #32
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <MX_GPIO_Init+0x84>)
 8001400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_GPIO_Init+0x84>)
 8001404:	2101      	movs	r1, #1
 8001406:	430a      	orrs	r2, r1
 8001408:	635a      	str	r2, [r3, #52]	@ 0x34
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_GPIO_Init+0x84>)
 800140c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800140e:	2201      	movs	r2, #1
 8001410:	4013      	ands	r3, r2
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001416:	23a0      	movs	r3, #160	@ 0xa0
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	0018      	movs	r0, r3
 8001420:	f000 fc27 	bl	8001c72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001424:	0021      	movs	r1, r4
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2202      	movs	r2, #2
 800142a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2201      	movs	r2, #1
 8001430:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	187a      	adds	r2, r7, r1
 8001440:	23a0      	movs	r3, #160	@ 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f000 fa92 	bl	8001970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b009      	add	sp, #36	@ 0x24
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	40021000 	.word	0x40021000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	46c0      	nop			@ (mov r8, r8)
 8001462:	e7fd      	b.n	8001460 <Error_Handler+0x8>

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_MspInit+0x4c>)
 800146c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_MspInit+0x4c>)
 8001470:	2101      	movs	r1, #1
 8001472:	430a      	orrs	r2, r1
 8001474:	641a      	str	r2, [r3, #64]	@ 0x40
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	2201      	movs	r2, #1
 800147c:	4013      	ands	r3, r2
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <HAL_MspInit+0x4c>)
 8001484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_MspInit+0x4c>)
 8001488:	2180      	movs	r1, #128	@ 0x80
 800148a:	0549      	lsls	r1, r1, #21
 800148c:	430a      	orrs	r2, r1
 800148e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <HAL_MspInit+0x4c>)
 8001492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	055b      	lsls	r3, r3, #21
 8001498:	4013      	ands	r3, r2
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800149e:	23c0      	movs	r3, #192	@ 0xc0
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	0018      	movs	r0, r3
 80014a4:	f000 f99a 	bl	80017dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <HAL_TIM_Base_MspInit+0x38>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10d      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_TIM_Base_MspInit+0x3c>)
 80014c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_TIM_Base_MspInit+0x3c>)
 80014cc:	2180      	movs	r1, #128	@ 0x80
 80014ce:	0109      	lsls	r1, r1, #4
 80014d0:	430a      	orrs	r2, r1
 80014d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_TIM_Base_MspInit+0x3c>)
 80014d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b004      	add	sp, #16
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	40012c00 	.word	0x40012c00
 80014f0:	40021000 	.word	0x40021000

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b08b      	sub	sp, #44	@ 0x2c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	2414      	movs	r4, #20
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	0018      	movs	r0, r3
 8001502:	2314      	movs	r3, #20
 8001504:	001a      	movs	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	f002 f9e6 	bl	80038d8 <memset>
  if(huart->Instance==USART2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <HAL_UART_MspInit+0x8c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d130      	bne.n	8001578 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_UART_MspInit+0x90>)
 8001518:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <HAL_UART_MspInit+0x90>)
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	0289      	lsls	r1, r1, #10
 8001520:	430a      	orrs	r2, r1
 8001522:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_UART_MspInit+0x90>)
 8001526:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001528:	2380      	movs	r3, #128	@ 0x80
 800152a:	029b      	lsls	r3, r3, #10
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <HAL_UART_MspInit+0x90>)
 8001534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001536:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <HAL_UART_MspInit+0x90>)
 8001538:	2101      	movs	r1, #1
 800153a:	430a      	orrs	r2, r1
 800153c:	635a      	str	r2, [r3, #52]	@ 0x34
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <HAL_UART_MspInit+0x90>)
 8001540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001542:	2201      	movs	r2, #1
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800154a:	0021      	movs	r1, r4
 800154c:	187b      	adds	r3, r7, r1
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2202      	movs	r2, #2
 8001556:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2201      	movs	r2, #1
 8001568:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	187a      	adds	r2, r7, r1
 800156c:	23a0      	movs	r3, #160	@ 0xa0
 800156e:	05db      	lsls	r3, r3, #23
 8001570:	0011      	movs	r1, r2
 8001572:	0018      	movs	r0, r3
 8001574:	f000 f9fc 	bl	8001970 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001578:	46c0      	nop			@ (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b00b      	add	sp, #44	@ 0x2c
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	40004400 	.word	0x40004400
 8001584:	40021000 	.word	0x40021000

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800158c:	46c0      	nop			@ (mov r8, r8)
 800158e:	e7fd      	b.n	800158c <NMI_Handler+0x4>

08001590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001594:	46c0      	nop			@ (mov r8, r8)
 8001596:	e7fd      	b.n	8001594 <HardFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f8d4 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	46c0      	nop			@ (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	18d3      	adds	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f002 f97c 	bl	80038e8 <__errno>
 80015f0:	0003      	movs	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	425b      	negs	r3, r3
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	18d2      	adds	r2, r2, r3
 800160a:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <_sbrk+0x64>)
 800160c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b006      	add	sp, #24
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20009000 	.word	0x20009000
 800161c:	00000400 	.word	0x00000400
 8001620:	200001a4 	.word	0x200001a4
 8001624:	200002f8 	.word	0x200002f8

08001628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	46c0      	nop			@ (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001634:	480d      	ldr	r0, [pc, #52]	@ (800166c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001636:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001638:	f7ff fff6 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <LoopForever+0x6>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	@ (8001674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <LoopForever+0xe>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	@ (8001680 <LoopForever+0x16>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001662:	f002 f947 	bl	80038f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001666:	f7ff fc99 	bl	8000f9c <main>

0800166a <LoopForever>:

LoopForever:
  b LoopForever
 800166a:	e7fe      	b.n	800166a <LoopForever>
  ldr   r0, =_estack
 800166c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001678:	08004354 	.word	0x08004354
  ldr r2, =_sbss
 800167c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001680:	200002f4 	.word	0x200002f4

08001684 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_IRQHandler>
	...

08001688 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001694:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <HAL_Init+0x3c>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_Init+0x3c>)
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	0049      	lsls	r1, r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f810 	bl	80016c8 <HAL_InitTick>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e001      	b.n	80016b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fed6 	bl	8001464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b8:	1dfb      	adds	r3, r7, #7
 80016ba:	781b      	ldrb	r3, [r3, #0]
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	b002      	add	sp, #8
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d0:	230f      	movs	r3, #15
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <HAL_InitTick+0x88>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d02b      	beq.n	8001738 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80016e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <HAL_InitTick+0x8c>)
 80016e2:	681c      	ldr	r4, [r3, #0]
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <HAL_InitTick+0x88>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	0019      	movs	r1, r3
 80016ea:	23fa      	movs	r3, #250	@ 0xfa
 80016ec:	0098      	lsls	r0, r3, #2
 80016ee:	f7fe fd19 	bl	8000124 <__udivsi3>
 80016f2:	0003      	movs	r3, r0
 80016f4:	0019      	movs	r1, r3
 80016f6:	0020      	movs	r0, r4
 80016f8:	f7fe fd14 	bl	8000124 <__udivsi3>
 80016fc:	0003      	movs	r3, r0
 80016fe:	0018      	movs	r0, r3
 8001700:	f000 f929 	bl	8001956 <HAL_SYSTICK_Config>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d112      	bne.n	800172e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d80a      	bhi.n	8001724 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	2301      	movs	r3, #1
 8001712:	425b      	negs	r3, r3
 8001714:	2200      	movs	r2, #0
 8001716:	0018      	movs	r0, r3
 8001718:	f000 f908 	bl	800192c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_InitTick+0x90>)
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e00d      	b.n	8001740 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001724:	230f      	movs	r3, #15
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e008      	b.n	8001740 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800172e:	230f      	movs	r3, #15
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	e003      	b.n	8001740 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001738:	230f      	movs	r3, #15
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001740:	230f      	movs	r3, #15
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	781b      	ldrb	r3, [r3, #0]
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b005      	add	sp, #20
 800174c:	bd90      	pop	{r4, r7, pc}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	20000008 	.word	0x20000008
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <HAL_IncTick+0x1c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	001a      	movs	r2, r3
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <HAL_IncTick+0x20>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	18d2      	adds	r2, r2, r3
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_IncTick+0x20>)
 800176e:	601a      	str	r2, [r3, #0]
}
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	20000008 	.word	0x20000008
 800177c:	200001a8 	.word	0x200001a8

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b02      	ldr	r3, [pc, #8]	@ (8001790 <HAL_GetTick+0x10>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	200001a8 	.word	0x200001a8

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff fff0 	bl	8001780 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	001a      	movs	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	189b      	adds	r3, r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	f7ff ffe0 	bl	8001780 <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	46c0      	nop			@ (mov r8, r8)
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b004      	add	sp, #16
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	20000008 	.word	0x20000008

080017dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a06      	ldr	r2, [pc, #24]	@ (8001804 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	40010000 	.word	0x40010000
 8001804:	fffff9ff 	.word	0xfffff9ff

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	0002      	movs	r2, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b7f      	cmp	r3, #127	@ 0x7f
 800181c:	d828      	bhi.n	8001870 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800181e:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <__NVIC_SetPriority+0xd4>)
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b25b      	sxtb	r3, r3
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	33c0      	adds	r3, #192	@ 0xc0
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	589b      	ldr	r3, [r3, r2]
 800182e:	1dfa      	adds	r2, r7, #7
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	0011      	movs	r1, r2
 8001834:	2203      	movs	r2, #3
 8001836:	400a      	ands	r2, r1
 8001838:	00d2      	lsls	r2, r2, #3
 800183a:	21ff      	movs	r1, #255	@ 0xff
 800183c:	4091      	lsls	r1, r2
 800183e:	000a      	movs	r2, r1
 8001840:	43d2      	mvns	r2, r2
 8001842:	401a      	ands	r2, r3
 8001844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	22ff      	movs	r2, #255	@ 0xff
 800184c:	401a      	ands	r2, r3
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	0018      	movs	r0, r3
 8001854:	2303      	movs	r3, #3
 8001856:	4003      	ands	r3, r0
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185c:	481f      	ldr	r0, [pc, #124]	@ (80018dc <__NVIC_SetPriority+0xd4>)
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b25b      	sxtb	r3, r3
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	430a      	orrs	r2, r1
 8001868:	33c0      	adds	r3, #192	@ 0xc0
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800186e:	e031      	b.n	80018d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001870:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <__NVIC_SetPriority+0xd8>)
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	0019      	movs	r1, r3
 8001878:	230f      	movs	r3, #15
 800187a:	400b      	ands	r3, r1
 800187c:	3b08      	subs	r3, #8
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3306      	adds	r3, #6
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	18d3      	adds	r3, r2, r3
 8001886:	3304      	adds	r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	1dfa      	adds	r2, r7, #7
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	0011      	movs	r1, r2
 8001890:	2203      	movs	r2, #3
 8001892:	400a      	ands	r2, r1
 8001894:	00d2      	lsls	r2, r2, #3
 8001896:	21ff      	movs	r1, #255	@ 0xff
 8001898:	4091      	lsls	r1, r2
 800189a:	000a      	movs	r2, r1
 800189c:	43d2      	mvns	r2, r2
 800189e:	401a      	ands	r2, r3
 80018a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	22ff      	movs	r2, #255	@ 0xff
 80018a8:	401a      	ands	r2, r3
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	0018      	movs	r0, r3
 80018b0:	2303      	movs	r3, #3
 80018b2:	4003      	ands	r3, r0
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b8:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <__NVIC_SetPriority+0xd8>)
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	001c      	movs	r4, r3
 80018c0:	230f      	movs	r3, #15
 80018c2:	4023      	ands	r3, r4
 80018c4:	3b08      	subs	r3, #8
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	430a      	orrs	r2, r1
 80018ca:	3306      	adds	r3, #6
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	18c3      	adds	r3, r0, r3
 80018d0:	3304      	adds	r3, #4
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	46c0      	nop			@ (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b003      	add	sp, #12
 80018da:	bd90      	pop	{r4, r7, pc}
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	1e5a      	subs	r2, r3, #1
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	045b      	lsls	r3, r3, #17
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d301      	bcc.n	80018fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f8:	2301      	movs	r3, #1
 80018fa:	e010      	b.n	800191e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <SysTick_Config+0x44>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	3a01      	subs	r2, #1
 8001902:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001904:	2301      	movs	r3, #1
 8001906:	425b      	negs	r3, r3
 8001908:	2103      	movs	r1, #3
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff ff7c 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <SysTick_Config+0x44>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <SysTick_Config+0x44>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	210f      	movs	r1, #15
 8001938:	187b      	adds	r3, r7, r1
 800193a:	1c02      	adds	r2, r0, #0
 800193c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	187b      	adds	r3, r7, r1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b25b      	sxtb	r3, r3
 8001946:	0011      	movs	r1, r2
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b004      	add	sp, #16
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff ffbf 	bl	80018e4 <SysTick_Config>
 8001966:	0003      	movs	r3, r0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e147      	b.n	8001c10 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4091      	lsls	r1, r2
 800198a:	000a      	movs	r2, r1
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d100      	bne.n	8001998 <HAL_GPIO_Init+0x28>
 8001996:	e138      	b.n	8001c0a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2203      	movs	r2, #3
 800199e:	4013      	ands	r3, r2
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d005      	beq.n	80019b0 <HAL_GPIO_Init+0x40>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2203      	movs	r2, #3
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d130      	bne.n	8001a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	409a      	lsls	r2, r3
 80019be:	0013      	movs	r3, r2
 80019c0:	43da      	mvns	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	409a      	lsls	r2, r3
 80019d2:	0013      	movs	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019e6:	2201      	movs	r2, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	2201      	movs	r2, #1
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2203      	movs	r2, #3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d017      	beq.n	8001a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2203      	movs	r2, #3
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d123      	bne.n	8001aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	58d3      	ldr	r3, [r2, r3]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	43da      	mvns	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2107      	movs	r1, #7
 8001a86:	400b      	ands	r3, r1
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	6939      	ldr	r1, [r7, #16]
 8001aa0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	23c0      	movs	r3, #192	@ 0xc0
 8001adc:	029b      	lsls	r3, r3, #10
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d100      	bne.n	8001ae4 <HAL_GPIO_Init+0x174>
 8001ae2:	e092      	b.n	8001c0a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ae4:	4a50      	ldr	r2, [pc, #320]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3318      	adds	r3, #24
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	589b      	ldr	r3, [r3, r2]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2203      	movs	r2, #3
 8001af6:	4013      	ands	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	220f      	movs	r2, #15
 8001afc:	409a      	lsls	r2, r3
 8001afe:	0013      	movs	r3, r2
 8001b00:	43da      	mvns	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	23a0      	movs	r3, #160	@ 0xa0
 8001b0c:	05db      	lsls	r3, r3, #23
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x1ca>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a45      	ldr	r2, [pc, #276]	@ (8001c2c <HAL_GPIO_Init+0x2bc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x1c6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a44      	ldr	r2, [pc, #272]	@ (8001c30 <HAL_GPIO_Init+0x2c0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x1c2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a43      	ldr	r2, [pc, #268]	@ (8001c34 <HAL_GPIO_Init+0x2c4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x1be>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x1cc>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x1cc>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x1cc>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x1cc>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	2103      	movs	r1, #3
 8001b40:	400a      	ands	r2, r1
 8001b42:	00d2      	lsls	r2, r2, #3
 8001b44:	4093      	lsls	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b4c:	4936      	ldr	r1, [pc, #216]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3318      	adds	r3, #24
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b5a:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43da      	mvns	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	035b      	lsls	r3, r3, #13
 8001b72:	4013      	ands	r3, r2
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	039b      	lsls	r3, r3, #14
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bae:	4a1e      	ldr	r2, [pc, #120]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001bb0:	2384      	movs	r3, #132	@ 0x84
 8001bb2:	58d3      	ldr	r3, [r2, r3]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	029b      	lsls	r3, r3, #10
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd4:	4914      	ldr	r1, [pc, #80]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	2284      	movs	r2, #132	@ 0x84
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001bdc:	4a12      	ldr	r2, [pc, #72]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001bde:	2380      	movs	r3, #128	@ 0x80
 8001be0:	58d3      	ldr	r3, [r2, r3]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43da      	mvns	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c02:	4909      	ldr	r1, [pc, #36]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001c04:	2280      	movs	r2, #128	@ 0x80
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	40da      	lsrs	r2, r3
 8001c18:	1e13      	subs	r3, r2, #0
 8001c1a:	d000      	beq.n	8001c1e <HAL_GPIO_Init+0x2ae>
 8001c1c:	e6b0      	b.n	8001980 <HAL_GPIO_Init+0x10>
  }
}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b006      	add	sp, #24
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021800 	.word	0x40021800
 8001c2c:	50000400 	.word	0x50000400
 8001c30:	50000800 	.word	0x50000800
 8001c34:	50000c00 	.word	0x50000c00

08001c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	000a      	movs	r2, r1
 8001c42:	1cbb      	adds	r3, r7, #2
 8001c44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	1cba      	adds	r2, r7, #2
 8001c4c:	8812      	ldrh	r2, [r2, #0]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c52:	230f      	movs	r3, #15
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e003      	b.n	8001c64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b004      	add	sp, #16
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	0008      	movs	r0, r1
 8001c7c:	0011      	movs	r1, r2
 8001c7e:	1cbb      	adds	r3, r7, #2
 8001c80:	1c02      	adds	r2, r0, #0
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	1c7b      	adds	r3, r7, #1
 8001c86:	1c0a      	adds	r2, r1, #0
 8001c88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8a:	1c7b      	adds	r3, r7, #1
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d004      	beq.n	8001c9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c92:	1cbb      	adds	r3, r7, #2
 8001c94:	881a      	ldrh	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c9a:	e003      	b.n	8001ca4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9c:	1cbb      	adds	r3, r7, #2
 8001c9e:	881a      	ldrh	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ca4:	46c0      	nop			@ (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	@ (8001d20 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d11f      	bne.n	8001d10 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	189b      	adds	r3, r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4912      	ldr	r1, [pc, #72]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f7fe fa20 	bl	8000124 <__udivsi3>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cea:	e008      	b.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e001      	b.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e009      	b.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	401a      	ands	r2, r3
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d0ed      	beq.n	8001cec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	0018      	movs	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b004      	add	sp, #16
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	40007000 	.word	0x40007000
 8001d20:	fffff9ff 	.word	0xfffff9ff
 8001d24:	20000000 	.word	0x20000000
 8001d28:	000f4240 	.word	0x000f4240

08001d2c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	23e0      	movs	r3, #224	@ 0xe0
 8001d36:	01db      	lsls	r3, r3, #7
 8001d38:	4013      	ands	r3, r2
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e2f3      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1e>
 8001d60:	e07c      	b.n	8001e5c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d62:	4bc3      	ldr	r3, [pc, #780]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2238      	movs	r2, #56	@ 0x38
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6c:	4bc0      	ldr	r3, [pc, #768]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2203      	movs	r2, #3
 8001d72:	4013      	ands	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3e>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d10b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	4bb9      	ldr	r3, [pc, #740]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	d062      	beq.n	8001e5a <HAL_RCC_OscConfig+0x116>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d15e      	bne.n	8001e5a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e2ce      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_OscConfig+0x78>
 8001dac:	4bb0      	ldr	r3, [pc, #704]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4baf      	ldr	r3, [pc, #700]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	2180      	movs	r1, #128	@ 0x80
 8001db4:	0249      	lsls	r1, r1, #9
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e020      	b.n	8001dfe <HAL_RCC_OscConfig+0xba>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	23a0      	movs	r3, #160	@ 0xa0
 8001dc2:	02db      	lsls	r3, r3, #11
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d10e      	bne.n	8001de6 <HAL_RCC_OscConfig+0xa2>
 8001dc8:	4ba9      	ldr	r3, [pc, #676]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4ba8      	ldr	r3, [pc, #672]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dce:	2180      	movs	r1, #128	@ 0x80
 8001dd0:	02c9      	lsls	r1, r1, #11
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	4ba6      	ldr	r3, [pc, #664]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4ba5      	ldr	r3, [pc, #660]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	0249      	lsls	r1, r1, #9
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0xba>
 8001de6:	4ba2      	ldr	r3, [pc, #648]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4ba1      	ldr	r3, [pc, #644]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dec:	49a1      	ldr	r1, [pc, #644]	@ (8002074 <HAL_RCC_OscConfig+0x330>)
 8001dee:	400a      	ands	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	4b9f      	ldr	r3, [pc, #636]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b9e      	ldr	r3, [pc, #632]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001df8:	499f      	ldr	r1, [pc, #636]	@ (8002078 <HAL_RCC_OscConfig+0x334>)
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d014      	beq.n	8001e30 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff fcbb 	bl	8001780 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fcb6 	bl	8001780 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	@ 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e28d      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e22:	4b93      	ldr	r3, [pc, #588]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	@ 0x80
 8001e28:	029b      	lsls	r3, r3, #10
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xcc>
 8001e2e:	e015      	b.n	8001e5c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fca6 	bl	8001780 <HAL_GetTick>
 8001e34:	0003      	movs	r3, r0
 8001e36:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fca1 	bl	8001780 <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	@ 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e278      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4c:	4b88      	ldr	r3, [pc, #544]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	4013      	ands	r3, r2
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0xf6>
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d100      	bne.n	8001e68 <HAL_RCC_OscConfig+0x124>
 8001e66:	e099      	b.n	8001f9c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e68:	4b81      	ldr	r3, [pc, #516]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2238      	movs	r2, #56	@ 0x38
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e72:	4b7f      	ldr	r3, [pc, #508]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2203      	movs	r2, #3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0x144>
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d002      	beq.n	8001e8e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d135      	bne.n	8001efa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8e:	4b78      	ldr	r3, [pc, #480]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4013      	ands	r3, r2
 8001e98:	d005      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x162>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e24b      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b72      	ldr	r3, [pc, #456]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a74      	ldr	r2, [pc, #464]	@ (800207c <HAL_RCC_OscConfig+0x338>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	021a      	lsls	r2, r3, #8
 8001eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d112      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ec2:	4b6b      	ldr	r3, [pc, #428]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6e      	ldr	r2, [pc, #440]	@ (8002080 <HAL_RCC_OscConfig+0x33c>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	4b67      	ldr	r3, [pc, #412]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ed6:	4b66      	ldr	r3, [pc, #408]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0adb      	lsrs	r3, r3, #11
 8001edc:	2207      	movs	r2, #7
 8001ede:	4013      	ands	r3, r2
 8001ee0:	4a68      	ldr	r2, [pc, #416]	@ (8002084 <HAL_RCC_OscConfig+0x340>)
 8001ee2:	40da      	lsrs	r2, r3
 8001ee4:	4b68      	ldr	r3, [pc, #416]	@ (8002088 <HAL_RCC_OscConfig+0x344>)
 8001ee6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ee8:	4b68      	ldr	r3, [pc, #416]	@ (800208c <HAL_RCC_OscConfig+0x348>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff fbeb 	bl	80016c8 <HAL_InitTick>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d051      	beq.n	8001f9a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e221      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d030      	beq.n	8001f64 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f02:	4b5b      	ldr	r3, [pc, #364]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5e      	ldr	r2, [pc, #376]	@ (8002080 <HAL_RCC_OscConfig+0x33c>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	4b57      	ldr	r3, [pc, #348]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f16:	4b56      	ldr	r3, [pc, #344]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b55      	ldr	r3, [pc, #340]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	0049      	lsls	r1, r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff fc2c 	bl	8001780 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fc27 	bl	8001780 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1fe      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f40:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b48      	ldr	r3, [pc, #288]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	@ (800207c <HAL_RCC_OscConfig+0x338>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	021a      	lsls	r2, r3, #8
 8001f5c:	4b44      	ldr	r3, [pc, #272]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	e01b      	b.n	8001f9c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f64:	4b42      	ldr	r3, [pc, #264]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b41      	ldr	r3, [pc, #260]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	4949      	ldr	r1, [pc, #292]	@ (8002090 <HAL_RCC_OscConfig+0x34c>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff fc06 	bl	8001780 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fc01 	bl	8001780 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1d8      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f8c:	4b38      	ldr	r3, [pc, #224]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4013      	ands	r3, r2
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x236>
 8001f98:	e000      	b.n	8001f9c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f9a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d047      	beq.n	8002036 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fa6:	4b32      	ldr	r3, [pc, #200]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2238      	movs	r2, #56	@ 0x38
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b18      	cmp	r3, #24
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d03c      	beq.n	8002036 <HAL_RCC_OscConfig+0x2f2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d138      	bne.n	8002036 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e1ba      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d019      	beq.n	8002004 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001fd0:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fd4:	4b26      	ldr	r3, [pc, #152]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fbd0 	bl	8001780 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7ff fbcb 	bl	8001780 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1a2      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d0f1      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x2a2>
 8002002:	e018      	b.n	8002036 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002004:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8002006:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002008:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 800200a:	2101      	movs	r1, #1
 800200c:	438a      	bics	r2, r1
 800200e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fbb6 	bl	8001780 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201a:	f7ff fbb1 	bl	8001780 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e188      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800202c:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 800202e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d1f1      	bne.n	800201a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2204      	movs	r2, #4
 800203c:	4013      	ands	r3, r2
 800203e:	d100      	bne.n	8002042 <HAL_RCC_OscConfig+0x2fe>
 8002040:	e0c6      	b.n	80021d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002042:	231f      	movs	r3, #31
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800204a:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2238      	movs	r2, #56	@ 0x38
 8002050:	4013      	ands	r3, r2
 8002052:	2b20      	cmp	r3, #32
 8002054:	d11e      	bne.n	8002094 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_RCC_OscConfig+0x32c>)
 8002058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x31e>
 8002060:	e0b6      	b.n	80021d0 <HAL_RCC_OscConfig+0x48c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d000      	beq.n	800206c <HAL_RCC_OscConfig+0x328>
 800206a:	e0b1      	b.n	80021d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e166      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
 8002070:	40021000 	.word	0x40021000
 8002074:	fffeffff 	.word	0xfffeffff
 8002078:	fffbffff 	.word	0xfffbffff
 800207c:	ffff80ff 	.word	0xffff80ff
 8002080:	ffffc7ff 	.word	0xffffc7ff
 8002084:	00f42400 	.word	0x00f42400
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004
 8002090:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002094:	4bac      	ldr	r3, [pc, #688]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002096:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002098:	2380      	movs	r3, #128	@ 0x80
 800209a:	055b      	lsls	r3, r3, #21
 800209c:	4013      	ands	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_OscConfig+0x360>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x362>
 80020a4:	2300      	movs	r3, #0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d011      	beq.n	80020ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4ba7      	ldr	r3, [pc, #668]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80020ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020ae:	4ba6      	ldr	r3, [pc, #664]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80020b0:	2180      	movs	r1, #128	@ 0x80
 80020b2:	0549      	lsls	r1, r1, #21
 80020b4:	430a      	orrs	r2, r1
 80020b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020b8:	4ba3      	ldr	r3, [pc, #652]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80020ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020bc:	2380      	movs	r3, #128	@ 0x80
 80020be:	055b      	lsls	r3, r3, #21
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020c6:	231f      	movs	r3, #31
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ce:	4b9f      	ldr	r3, [pc, #636]	@ (800234c <HAL_RCC_OscConfig+0x608>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	@ 0x80
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d11a      	bne.n	8002110 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020da:	4b9c      	ldr	r3, [pc, #624]	@ (800234c <HAL_RCC_OscConfig+0x608>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b9b      	ldr	r3, [pc, #620]	@ (800234c <HAL_RCC_OscConfig+0x608>)
 80020e0:	2180      	movs	r1, #128	@ 0x80
 80020e2:	0049      	lsls	r1, r1, #1
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fb4a 	bl	8001780 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7ff fb45 	bl	8001780 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e11c      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002104:	4b91      	ldr	r3, [pc, #580]	@ (800234c <HAL_RCC_OscConfig+0x608>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4013      	ands	r3, r2
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x3e2>
 8002118:	4b8b      	ldr	r3, [pc, #556]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800211a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800211c:	4b8a      	ldr	r3, [pc, #552]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800211e:	2101      	movs	r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x41c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b05      	cmp	r3, #5
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x404>
 800212e:	4b86      	ldr	r3, [pc, #536]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002130:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002132:	4b85      	ldr	r3, [pc, #532]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002134:	2104      	movs	r1, #4
 8002136:	430a      	orrs	r2, r1
 8002138:	65da      	str	r2, [r3, #92]	@ 0x5c
 800213a:	4b83      	ldr	r3, [pc, #524]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800213c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800213e:	4b82      	ldr	r3, [pc, #520]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002140:	2101      	movs	r1, #1
 8002142:	430a      	orrs	r2, r1
 8002144:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x41c>
 8002148:	4b7f      	ldr	r3, [pc, #508]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800214a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800214c:	4b7e      	ldr	r3, [pc, #504]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002154:	4b7c      	ldr	r3, [pc, #496]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002156:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002158:	4b7b      	ldr	r3, [pc, #492]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800215a:	2104      	movs	r1, #4
 800215c:	438a      	bics	r2, r1
 800215e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d014      	beq.n	8002192 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff fb0a 	bl	8001780 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002170:	e009      	b.n	8002186 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff fb05 	bl	8001780 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4a74      	ldr	r2, [pc, #464]	@ (8002350 <HAL_RCC_OscConfig+0x60c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0db      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002186:	4b70      	ldr	r3, [pc, #448]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x42e>
 8002190:	e013      	b.n	80021ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7ff faf5 	bl	8001780 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800219a:	e009      	b.n	80021b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff faf0 	bl	8001780 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	4a6a      	ldr	r2, [pc, #424]	@ (8002350 <HAL_RCC_OscConfig+0x60c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0c6      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b0:	4b65      	ldr	r3, [pc, #404]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80021b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021ba:	231f      	movs	r3, #31
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b60      	ldr	r3, [pc, #384]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80021c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80021ca:	4962      	ldr	r1, [pc, #392]	@ (8002354 <HAL_RCC_OscConfig+0x610>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d100      	bne.n	80021da <HAL_RCC_OscConfig+0x496>
 80021d8:	e0b0      	b.n	800233c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021da:	4b5b      	ldr	r3, [pc, #364]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2238      	movs	r2, #56	@ 0x38
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d100      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4a4>
 80021e6:	e078      	b.n	80022da <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d153      	bne.n	8002298 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f0:	4b55      	ldr	r3, [pc, #340]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b54      	ldr	r3, [pc, #336]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80021f6:	4958      	ldr	r1, [pc, #352]	@ (8002358 <HAL_RCC_OscConfig+0x614>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff fac0 	bl	8001780 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7ff fabb 	bl	8001780 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e092      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	4b4b      	ldr	r3, [pc, #300]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	049b      	lsls	r3, r3, #18
 8002220:	4013      	ands	r3, r2
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002224:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a4c      	ldr	r2, [pc, #304]	@ (800235c <HAL_RCC_OscConfig+0x618>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	431a      	orrs	r2, r3
 800224c:	4b3e      	ldr	r3, [pc, #248]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800224e:	430a      	orrs	r2, r1
 8002250:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002252:	4b3d      	ldr	r3, [pc, #244]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b3c      	ldr	r3, [pc, #240]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002258:	2180      	movs	r1, #128	@ 0x80
 800225a:	0449      	lsls	r1, r1, #17
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002260:	4b39      	ldr	r3, [pc, #228]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	4b38      	ldr	r3, [pc, #224]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 8002266:	2180      	movs	r1, #128	@ 0x80
 8002268:	0549      	lsls	r1, r1, #21
 800226a:	430a      	orrs	r2, r1
 800226c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7ff fa87 	bl	8001780 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff fa82 	bl	8001780 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e059      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228a:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	049b      	lsls	r3, r3, #18
 8002292:	4013      	ands	r3, r2
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x534>
 8002296:	e051      	b.n	800233c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 800229e:	492e      	ldr	r1, [pc, #184]	@ (8002358 <HAL_RCC_OscConfig+0x614>)
 80022a0:	400a      	ands	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7ff fa6c 	bl	8001780 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ae:	f7ff fa67 	bl	8001780 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e03e      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c0:	4b21      	ldr	r3, [pc, #132]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2380      	movs	r3, #128	@ 0x80
 80022c6:	049b      	lsls	r3, r3, #18
 80022c8:	4013      	ands	r3, r2
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80022cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80022d2:	4923      	ldr	r1, [pc, #140]	@ (8002360 <HAL_RCC_OscConfig+0x61c>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	e030      	b.n	800233c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e02b      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80022e6:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <HAL_RCC_OscConfig+0x604>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2203      	movs	r2, #3
 80022f0:	401a      	ands	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d11e      	bne.n	8002338 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2270      	movs	r2, #112	@ 0x70
 80022fe:	401a      	ands	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d117      	bne.n	8002338 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	23fe      	movs	r3, #254	@ 0xfe
 800230c:	01db      	lsls	r3, r3, #7
 800230e:	401a      	ands	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d10e      	bne.n	8002338 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	23f8      	movs	r3, #248	@ 0xf8
 800231e:	039b      	lsls	r3, r3, #14
 8002320:	401a      	ands	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d106      	bne.n	8002338 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	0f5b      	lsrs	r3, r3, #29
 800232e:	075a      	lsls	r2, r3, #29
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b008      	add	sp, #32
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
 8002350:	00001388 	.word	0x00001388
 8002354:	efffffff 	.word	0xefffffff
 8002358:	feffffff 	.word	0xfeffffff
 800235c:	1fc1808c 	.word	0x1fc1808c
 8002360:	effefffc 	.word	0xeffefffc

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0e9      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b76      	ldr	r3, [pc, #472]	@ (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2207      	movs	r2, #7
 800237e:	4013      	ands	r3, r2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d91e      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b73      	ldr	r3, [pc, #460]	@ (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2207      	movs	r2, #7
 800238c:	4393      	bics	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	4b70      	ldr	r3, [pc, #448]	@ (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002398:	f7ff f9f2 	bl	8001780 <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023a0:	e009      	b.n	80023b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a2:	f7ff f9ed 	bl	8001780 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002558 <HAL_RCC_ClockConfig+0x1f4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0ca      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023b6:	4b67      	ldr	r3, [pc, #412]	@ (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2207      	movs	r2, #7
 80023bc:	4013      	ands	r3, r2
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1ee      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2202      	movs	r2, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d015      	beq.n	80023fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2204      	movs	r2, #4
 80023d4:	4013      	ands	r3, r2
 80023d6:	d006      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023d8:	4b60      	ldr	r3, [pc, #384]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	4b5f      	ldr	r3, [pc, #380]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	21e0      	movs	r1, #224	@ 0xe0
 80023e0:	01c9      	lsls	r1, r1, #7
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e6:	4b5d      	ldr	r3, [pc, #372]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4a5d      	ldr	r2, [pc, #372]	@ (8002560 <HAL_RCC_ClockConfig+0x1fc>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	4b59      	ldr	r3, [pc, #356]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	4013      	ands	r3, r2
 8002402:	d057      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240c:	4b53      	ldr	r3, [pc, #332]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	4013      	ands	r3, r2
 8002416:	d12b      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e097      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d107      	bne.n	8002434 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002424:	4b4d      	ldr	r3, [pc, #308]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	049b      	lsls	r3, r3, #18
 800242c:	4013      	ands	r3, r2
 800242e:	d11f      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e08b      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243c:	4b47      	ldr	r3, [pc, #284]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4013      	ands	r3, r2
 8002446:	d113      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e07f      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d106      	bne.n	8002462 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002454:	4b41      	ldr	r3, [pc, #260]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d108      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e074      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002462:	4b3e      	ldr	r3, [pc, #248]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e06d      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4b3a      	ldr	r3, [pc, #232]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2207      	movs	r2, #7
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4b37      	ldr	r3, [pc, #220]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002484:	f7ff f97c 	bl	8001780 <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248c:	e009      	b.n	80024a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f7ff f977 	bl	8001780 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	4a2f      	ldr	r2, [pc, #188]	@ (8002558 <HAL_RCC_ClockConfig+0x1f4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e054      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b2e      	ldr	r3, [pc, #184]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2238      	movs	r2, #56	@ 0x38
 80024a8:	401a      	ands	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1ec      	bne.n	800248e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2207      	movs	r2, #7
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d21e      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2207      	movs	r2, #7
 80024c8:	4393      	bics	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024d4:	f7ff f954 	bl	8001780 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024dc:	e009      	b.n	80024f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7ff f94f 	bl	8001780 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002558 <HAL_RCC_ClockConfig+0x1f4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e02c      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024f2:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2207      	movs	r2, #7
 80024f8:	4013      	ands	r3, r2
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2204      	movs	r2, #4
 8002506:	4013      	ands	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800250a:	4b14      	ldr	r3, [pc, #80]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4a15      	ldr	r2, [pc, #84]	@ (8002564 <HAL_RCC_ClockConfig+0x200>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	4b10      	ldr	r3, [pc, #64]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800251e:	f000 f829 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002522:	0001      	movs	r1, r0
 8002524:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	220f      	movs	r2, #15
 800252c:	401a      	ands	r2, r3
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_RCC_ClockConfig+0x204>)
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	58d3      	ldr	r3, [r2, r3]
 8002534:	221f      	movs	r2, #31
 8002536:	4013      	ands	r3, r2
 8002538:	000a      	movs	r2, r1
 800253a:	40da      	lsrs	r2, r3
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_RCC_ClockConfig+0x208>)
 800253e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002540:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_RCC_ClockConfig+0x20c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff f8bf 	bl	80016c8 <HAL_InitTick>
 800254a:	0003      	movs	r3, r0
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40022000 	.word	0x40022000
 8002558:	00001388 	.word	0x00001388
 800255c:	40021000 	.word	0x40021000
 8002560:	fffff0ff 	.word	0xfffff0ff
 8002564:	ffff8fff 	.word	0xffff8fff
 8002568:	08004290 	.word	0x08004290
 800256c:	20000000 	.word	0x20000000
 8002570:	20000004 	.word	0x20000004

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	4b3c      	ldr	r3, [pc, #240]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2238      	movs	r2, #56	@ 0x38
 8002580:	4013      	ands	r3, r2
 8002582:	d10f      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002584:	4b39      	ldr	r3, [pc, #228]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0adb      	lsrs	r3, r3, #11
 800258a:	2207      	movs	r2, #7
 800258c:	4013      	ands	r3, r2
 800258e:	2201      	movs	r2, #1
 8002590:	409a      	lsls	r2, r3
 8002592:	0013      	movs	r3, r2
 8002594:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	4835      	ldr	r0, [pc, #212]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xfc>)
 800259a:	f7fd fdc3 	bl	8000124 <__udivsi3>
 800259e:	0003      	movs	r3, r0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e05d      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a4:	4b31      	ldr	r3, [pc, #196]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2238      	movs	r2, #56	@ 0x38
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b0:	4b30      	ldr	r3, [pc, #192]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x100>)
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	e054      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b6:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2238      	movs	r2, #56	@ 0x38
 80025bc:	4013      	ands	r3, r2
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d138      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025c2:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2203      	movs	r2, #3
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025cc:	4b27      	ldr	r3, [pc, #156]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	2207      	movs	r2, #7
 80025d4:	4013      	ands	r3, r2
 80025d6:	3301      	adds	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d10d      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	4824      	ldr	r0, [pc, #144]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x100>)
 80025e4:	f7fd fd9e 	bl	8000124 <__udivsi3>
 80025e8:	0003      	movs	r3, r0
 80025ea:	0019      	movs	r1, r3
 80025ec:	4b1f      	ldr	r3, [pc, #124]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	227f      	movs	r2, #127	@ 0x7f
 80025f4:	4013      	ands	r3, r2
 80025f6:	434b      	muls	r3, r1
 80025f8:	617b      	str	r3, [r7, #20]
        break;
 80025fa:	e00d      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	481c      	ldr	r0, [pc, #112]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002600:	f7fd fd90 	bl	8000124 <__udivsi3>
 8002604:	0003      	movs	r3, r0
 8002606:	0019      	movs	r1, r3
 8002608:	4b18      	ldr	r3, [pc, #96]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	227f      	movs	r2, #127	@ 0x7f
 8002610:	4013      	ands	r3, r2
 8002612:	434b      	muls	r3, r1
 8002614:	617b      	str	r3, [r7, #20]
        break;
 8002616:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002618:	4b14      	ldr	r3, [pc, #80]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0f5b      	lsrs	r3, r3, #29
 800261e:	2207      	movs	r2, #7
 8002620:	4013      	ands	r3, r2
 8002622:	3301      	adds	r3, #1
 8002624:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	6978      	ldr	r0, [r7, #20]
 800262a:	f7fd fd7b 	bl	8000124 <__udivsi3>
 800262e:	0003      	movs	r3, r0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e015      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002634:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2238      	movs	r2, #56	@ 0x38
 800263a:	4013      	ands	r3, r2
 800263c:	2b20      	cmp	r3, #32
 800263e:	d103      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002640:	2380      	movs	r3, #128	@ 0x80
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2238      	movs	r2, #56	@ 0x38
 800264e:	4013      	ands	r3, r2
 8002650:	2b18      	cmp	r3, #24
 8002652:	d103      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002654:	23fa      	movs	r3, #250	@ 0xfa
 8002656:	01db      	lsls	r3, r3, #7
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e001      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002660:	693b      	ldr	r3, [r7, #16]
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b006      	add	sp, #24
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	40021000 	.word	0x40021000
 8002670:	00f42400 	.word	0x00f42400
 8002674:	007a1200 	.word	0x007a1200

08002678 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800267c:	4b02      	ldr	r3, [pc, #8]	@ (8002688 <HAL_RCC_GetHCLKFreq+0x10>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	20000000 	.word	0x20000000

0800268c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002690:	f7ff fff2 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 8002694:	0004      	movs	r4, r0
 8002696:	f7ff fb49 	bl	8001d2c <LL_RCC_GetAPB1Prescaler>
 800269a:	0003      	movs	r3, r0
 800269c:	0b1a      	lsrs	r2, r3, #12
 800269e:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	58d3      	ldr	r3, [r2, r3]
 80026a4:	221f      	movs	r2, #31
 80026a6:	4013      	ands	r3, r2
 80026a8:	40dc      	lsrs	r4, r3
 80026aa:	0023      	movs	r3, r4
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bdb0      	pop	{r4, r5, r7, pc}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	080042d0 	.word	0x080042d0

080026b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e04a      	b.n	8002760 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	223d      	movs	r2, #61	@ 0x3d
 80026ce:	5c9b      	ldrb	r3, [r3, r2]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223c      	movs	r2, #60	@ 0x3c
 80026da:	2100      	movs	r1, #0
 80026dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fe fee7 	bl	80014b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	223d      	movs	r2, #61	@ 0x3d
 80026ea:	2102      	movs	r1, #2
 80026ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	0019      	movs	r1, r3
 80026f8:	0010      	movs	r0, r2
 80026fa:	f000 f959 	bl	80029b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2248      	movs	r2, #72	@ 0x48
 8002702:	2101      	movs	r1, #1
 8002704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	223e      	movs	r2, #62	@ 0x3e
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	223f      	movs	r2, #63	@ 0x3f
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2240      	movs	r2, #64	@ 0x40
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2241      	movs	r2, #65	@ 0x41
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2242      	movs	r2, #66	@ 0x42
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2243      	movs	r2, #67	@ 0x43
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2244      	movs	r2, #68	@ 0x44
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2245      	movs	r2, #69	@ 0x45
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2246      	movs	r2, #70	@ 0x46
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2247      	movs	r2, #71	@ 0x47
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	223d      	movs	r2, #61	@ 0x3d
 800275a:	2101      	movs	r1, #1
 800275c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b002      	add	sp, #8
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	223d      	movs	r2, #61	@ 0x3d
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e034      	b.n	80027ea <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	223d      	movs	r2, #61	@ 0x3d
 8002784:	2102      	movs	r1, #2
 8002786:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	@ (80027f4 <HAL_TIM_Base_Start+0x8c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d009      	beq.n	80027a6 <HAL_TIM_Base_Start+0x3e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a18      	ldr	r2, [pc, #96]	@ (80027f8 <HAL_TIM_Base_Start+0x90>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d004      	beq.n	80027a6 <HAL_TIM_Base_Start+0x3e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a16      	ldr	r2, [pc, #88]	@ (80027fc <HAL_TIM_Base_Start+0x94>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d116      	bne.n	80027d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a14      	ldr	r2, [pc, #80]	@ (8002800 <HAL_TIM_Base_Start+0x98>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d016      	beq.n	80027e6 <HAL_TIM_Base_Start+0x7e>
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	025b      	lsls	r3, r3, #9
 80027be:	429a      	cmp	r2, r3
 80027c0:	d011      	beq.n	80027e6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	430a      	orrs	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d2:	e008      	b.n	80027e6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	430a      	orrs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e000      	b.n	80027e8 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b004      	add	sp, #16
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40000400 	.word	0x40000400
 80027fc:	40014000 	.word	0x40014000
 8002800:	00010007 	.word	0x00010007

08002804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800280e:	230f      	movs	r3, #15
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	223c      	movs	r2, #60	@ 0x3c
 800281a:	5c9b      	ldrb	r3, [r3, r2]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIM_ConfigClockSource+0x20>
 8002820:	2302      	movs	r3, #2
 8002822:	e0bc      	b.n	800299e <HAL_TIM_ConfigClockSource+0x19a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	223c      	movs	r2, #60	@ 0x3c
 8002828:	2101      	movs	r1, #1
 800282a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	223d      	movs	r2, #61	@ 0x3d
 8002830:	2102      	movs	r1, #2
 8002832:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4a5a      	ldr	r2, [pc, #360]	@ (80029a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4a59      	ldr	r2, [pc, #356]	@ (80029ac <HAL_TIM_ConfigClockSource+0x1a8>)
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2280      	movs	r2, #128	@ 0x80
 800285a:	0192      	lsls	r2, r2, #6
 800285c:	4293      	cmp	r3, r2
 800285e:	d040      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0xde>
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	0192      	lsls	r2, r2, #6
 8002864:	4293      	cmp	r3, r2
 8002866:	d900      	bls.n	800286a <HAL_TIM_ConfigClockSource+0x66>
 8002868:	e088      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 800286a:	2280      	movs	r2, #128	@ 0x80
 800286c:	0152      	lsls	r2, r2, #5
 800286e:	4293      	cmp	r3, r2
 8002870:	d100      	bne.n	8002874 <HAL_TIM_ConfigClockSource+0x70>
 8002872:	e088      	b.n	8002986 <HAL_TIM_ConfigClockSource+0x182>
 8002874:	2280      	movs	r2, #128	@ 0x80
 8002876:	0152      	lsls	r2, r2, #5
 8002878:	4293      	cmp	r3, r2
 800287a:	d900      	bls.n	800287e <HAL_TIM_ConfigClockSource+0x7a>
 800287c:	e07e      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 800287e:	2b70      	cmp	r3, #112	@ 0x70
 8002880:	d018      	beq.n	80028b4 <HAL_TIM_ConfigClockSource+0xb0>
 8002882:	d900      	bls.n	8002886 <HAL_TIM_ConfigClockSource+0x82>
 8002884:	e07a      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 8002886:	2b60      	cmp	r3, #96	@ 0x60
 8002888:	d04f      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x126>
 800288a:	d900      	bls.n	800288e <HAL_TIM_ConfigClockSource+0x8a>
 800288c:	e076      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 800288e:	2b50      	cmp	r3, #80	@ 0x50
 8002890:	d03b      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x106>
 8002892:	d900      	bls.n	8002896 <HAL_TIM_ConfigClockSource+0x92>
 8002894:	e072      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 8002896:	2b40      	cmp	r3, #64	@ 0x40
 8002898:	d057      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x146>
 800289a:	d900      	bls.n	800289e <HAL_TIM_ConfigClockSource+0x9a>
 800289c:	e06e      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 800289e:	2b30      	cmp	r3, #48	@ 0x30
 80028a0:	d063      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x166>
 80028a2:	d86b      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d060      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x166>
 80028a8:	d868      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d05d      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x166>
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d05b      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x166>
 80028b2:	e063      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028c4:	f000 f974 	bl	8002bb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2277      	movs	r2, #119	@ 0x77
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]
      break;
 80028e0:	e052      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028f2:	f000 f95d 	bl	8002bb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2180      	movs	r1, #128	@ 0x80
 8002902:	01c9      	lsls	r1, r1, #7
 8002904:	430a      	orrs	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
      break;
 8002908:	e03e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	001a      	movs	r2, r3
 8002918:	f000 f8ce 	bl	8002ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2150      	movs	r1, #80	@ 0x50
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f928 	bl	8002b78 <TIM_ITRx_SetConfig>
      break;
 8002928:	e02e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002936:	001a      	movs	r2, r3
 8002938:	f000 f8ec 	bl	8002b14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2160      	movs	r1, #96	@ 0x60
 8002942:	0018      	movs	r0, r3
 8002944:	f000 f918 	bl	8002b78 <TIM_ITRx_SetConfig>
      break;
 8002948:	e01e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	001a      	movs	r2, r3
 8002958:	f000 f8ae 	bl	8002ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2140      	movs	r1, #64	@ 0x40
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f908 	bl	8002b78 <TIM_ITRx_SetConfig>
      break;
 8002968:	e00e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0019      	movs	r1, r3
 8002974:	0010      	movs	r0, r2
 8002976:	f000 f8ff 	bl	8002b78 <TIM_ITRx_SetConfig>
      break;
 800297a:	e005      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800297c:	230f      	movs	r3, #15
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
      break;
 8002984:	e000      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002986:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	223d      	movs	r2, #61	@ 0x3d
 800298c:	2101      	movs	r1, #1
 800298e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	223c      	movs	r2, #60	@ 0x3c
 8002994:	2100      	movs	r1, #0
 8002996:	5499      	strb	r1, [r3, r2]

  return status;
 8002998:	230f      	movs	r3, #15
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	781b      	ldrb	r3, [r3, #0]
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b004      	add	sp, #16
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	ffceff88 	.word	0xffceff88
 80029ac:	ffff00ff 	.word	0xffff00ff

080029b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a36      	ldr	r2, [pc, #216]	@ (8002a9c <TIM_Base_SetConfig+0xec>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d003      	beq.n	80029d0 <TIM_Base_SetConfig+0x20>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a35      	ldr	r2, [pc, #212]	@ (8002aa0 <TIM_Base_SetConfig+0xf0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d108      	bne.n	80029e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2270      	movs	r2, #112	@ 0x70
 80029d4:	4393      	bics	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a9c <TIM_Base_SetConfig+0xec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <TIM_Base_SetConfig+0x62>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa0 <TIM_Base_SetConfig+0xf0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00f      	beq.n	8002a12 <TIM_Base_SetConfig+0x62>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a2b      	ldr	r2, [pc, #172]	@ (8002aa4 <TIM_Base_SetConfig+0xf4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <TIM_Base_SetConfig+0x62>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa8 <TIM_Base_SetConfig+0xf8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <TIM_Base_SetConfig+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a29      	ldr	r2, [pc, #164]	@ (8002aac <TIM_Base_SetConfig+0xfc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_Base_SetConfig+0x62>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a28      	ldr	r2, [pc, #160]	@ (8002ab0 <TIM_Base_SetConfig+0x100>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d108      	bne.n	8002a24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a27      	ldr	r2, [pc, #156]	@ (8002ab4 <TIM_Base_SetConfig+0x104>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2280      	movs	r2, #128	@ 0x80
 8002a28:	4393      	bics	r3, r2
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a13      	ldr	r2, [pc, #76]	@ (8002a9c <TIM_Base_SetConfig+0xec>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00b      	beq.n	8002a6a <TIM_Base_SetConfig+0xba>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a14      	ldr	r2, [pc, #80]	@ (8002aa8 <TIM_Base_SetConfig+0xf8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <TIM_Base_SetConfig+0xba>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a13      	ldr	r2, [pc, #76]	@ (8002aac <TIM_Base_SetConfig+0xfc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <TIM_Base_SetConfig+0xba>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <TIM_Base_SetConfig+0x100>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d103      	bne.n	8002a72 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4393      	bics	r3, r2
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	611a      	str	r2, [r3, #16]
  }
}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b004      	add	sp, #16
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40002000 	.word	0x40002000
 8002aa8:	40014000 	.word	0x40014000
 8002aac:	40014400 	.word	0x40014400
 8002ab0:	40014800 	.word	0x40014800
 8002ab4:	fffffcff 	.word	0xfffffcff

08002ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	22f0      	movs	r2, #240	@ 0xf0
 8002ae2:	4393      	bics	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	220a      	movs	r2, #10
 8002af4:	4393      	bics	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	621a      	str	r2, [r3, #32]
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b006      	add	sp, #24
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	001a      	movs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <TIM_TI2_ConfigInputStage+0x60>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	031b      	lsls	r3, r3, #12
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	22a0      	movs	r2, #160	@ 0xa0
 8002b50:	4393      	bics	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	621a      	str	r2, [r3, #32]
}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b006      	add	sp, #24
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	ffff0fff 	.word	0xffff0fff

08002b78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <TIM_ITRx_SetConfig+0x34>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	2207      	movs	r2, #7
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	609a      	str	r2, [r3, #8]
}
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b004      	add	sp, #16
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	ffcfff8f 	.word	0xffcfff8f

08002bb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	4a09      	ldr	r2, [pc, #36]	@ (8002bec <TIM_ETR_SetConfig+0x3c>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	021a      	lsls	r2, r3, #8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	609a      	str	r2, [r3, #8]
}
 8002be4:	46c0      	nop			@ (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b006      	add	sp, #24
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	ffff00ff 	.word	0xffff00ff

08002bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223c      	movs	r2, #60	@ 0x3c
 8002bfe:	5c9b      	ldrb	r3, [r3, r2]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e04f      	b.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	223c      	movs	r2, #60	@ 0x3c
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	223d      	movs	r2, #61	@ 0x3d
 8002c14:	2102      	movs	r1, #2
 8002c16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a20      	ldr	r2, [pc, #128]	@ (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d108      	bne.n	8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2270      	movs	r2, #112	@ 0x70
 8002c48:	4393      	bics	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d009      	beq.n	8002c7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a11      	ldr	r2, [pc, #68]	@ (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10c      	bne.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2280      	movs	r2, #128	@ 0x80
 8002c80:	4393      	bics	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	223d      	movs	r2, #61	@ 0x3d
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	223c      	movs	r2, #60	@ 0x3c
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b004      	add	sp, #16
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	ff0fffff 	.word	0xff0fffff
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40014000 	.word	0x40014000

08002cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e046      	b.n	8002d60 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2288      	movs	r2, #136	@ 0x88
 8002cd6:	589b      	ldr	r3, [r3, r2]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d107      	bne.n	8002cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2284      	movs	r2, #132	@ 0x84
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f7fe fc04 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2288      	movs	r2, #136	@ 0x88
 8002cf0:	2124      	movs	r1, #36	@ 0x24
 8002cf2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2101      	movs	r1, #1
 8002d00:	438a      	bics	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 fa74 	bl	80031fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 f8cc 	bl	8002eb4 <UART_SetConfig>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e01c      	b.n	8002d60 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	490d      	ldr	r1, [pc, #52]	@ (8002d68 <HAL_UART_Init+0xa8>)
 8002d32:	400a      	ands	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	212a      	movs	r1, #42	@ 0x2a
 8002d42:	438a      	bics	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 fb03 	bl	8003364 <UART_CheckIdleState>
 8002d5e:	0003      	movs	r3, r0
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	ffffb7ff 	.word	0xffffb7ff

08002d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	@ 0x28
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	1dbb      	adds	r3, r7, #6
 8002d7a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2288      	movs	r2, #136	@ 0x88
 8002d80:	589b      	ldr	r3, [r3, r2]
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d000      	beq.n	8002d88 <HAL_UART_Transmit+0x1c>
 8002d86:	e090      	b.n	8002eaa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_UART_Transmit+0x2a>
 8002d8e:	1dbb      	adds	r3, r7, #6
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e088      	b.n	8002eac <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	015b      	lsls	r3, r3, #5
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d109      	bne.n	8002dba <HAL_UART_Transmit+0x4e>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2201      	movs	r2, #1
 8002db2:	4013      	ands	r3, r2
 8002db4:	d001      	beq.n	8002dba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e078      	b.n	8002eac <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2290      	movs	r2, #144	@ 0x90
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2288      	movs	r2, #136	@ 0x88
 8002dc6:	2121      	movs	r1, #33	@ 0x21
 8002dc8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dca:	f7fe fcd9 	bl	8001780 <HAL_GetTick>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1dba      	adds	r2, r7, #6
 8002dd6:	2154      	movs	r1, #84	@ 0x54
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1dba      	adds	r2, r7, #6
 8002de0:	2156      	movs	r1, #86	@ 0x56
 8002de2:	8812      	ldrh	r2, [r2, #0]
 8002de4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	015b      	lsls	r3, r3, #5
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d108      	bne.n	8002e04 <HAL_UART_Transmit+0x98>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	e003      	b.n	8002e0c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e0c:	e030      	b.n	8002e70 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	0013      	movs	r3, r2
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2180      	movs	r1, #128	@ 0x80
 8002e1c:	f000 fb4c 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 8002e20:	1e03      	subs	r3, r0, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2288      	movs	r2, #136	@ 0x88
 8002e28:	2120      	movs	r1, #32
 8002e2a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e03d      	b.n	8002eac <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10b      	bne.n	8002e4e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	05d2      	lsls	r2, r2, #23
 8002e42:	0dd2      	lsrs	r2, r2, #23
 8002e44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	3302      	adds	r3, #2
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	e007      	b.n	8002e5e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2256      	movs	r2, #86	@ 0x56
 8002e62:	5a9b      	ldrh	r3, [r3, r2]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b299      	uxth	r1, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2256      	movs	r2, #86	@ 0x56
 8002e6e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2256      	movs	r2, #86	@ 0x56
 8002e74:	5a9b      	ldrh	r3, [r3, r2]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1c8      	bne.n	8002e0e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	0013      	movs	r3, r2
 8002e86:	2200      	movs	r2, #0
 8002e88:	2140      	movs	r1, #64	@ 0x40
 8002e8a:	f000 fb15 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2288      	movs	r2, #136	@ 0x88
 8002e96:	2120      	movs	r1, #32
 8002e98:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e006      	b.n	8002eac <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2288      	movs	r2, #136	@ 0x88
 8002ea2:	2120      	movs	r1, #32
 8002ea4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
  }
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b008      	add	sp, #32
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ebc:	231a      	movs	r3, #26
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4abc      	ldr	r2, [pc, #752]	@ (80031d4 <UART_SetConfig+0x320>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4ab7      	ldr	r2, [pc, #732]	@ (80031d8 <UART_SetConfig+0x324>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4aae      	ldr	r2, [pc, #696]	@ (80031dc <UART_SetConfig+0x328>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	220f      	movs	r2, #15
 8002f38:	4393      	bics	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4aa4      	ldr	r2, [pc, #656]	@ (80031e0 <UART_SetConfig+0x32c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d127      	bne.n	8002fa2 <UART_SetConfig+0xee>
 8002f52:	4ba4      	ldr	r3, [pc, #656]	@ (80031e4 <UART_SetConfig+0x330>)
 8002f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f56:	2203      	movs	r2, #3
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d017      	beq.n	8002f8e <UART_SetConfig+0xda>
 8002f5e:	d81b      	bhi.n	8002f98 <UART_SetConfig+0xe4>
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d00a      	beq.n	8002f7a <UART_SetConfig+0xc6>
 8002f64:	d818      	bhi.n	8002f98 <UART_SetConfig+0xe4>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <UART_SetConfig+0xbc>
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d00a      	beq.n	8002f84 <UART_SetConfig+0xd0>
 8002f6e:	e013      	b.n	8002f98 <UART_SetConfig+0xe4>
 8002f70:	231b      	movs	r3, #27
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e058      	b.n	800302c <UART_SetConfig+0x178>
 8002f7a:	231b      	movs	r3, #27
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	2202      	movs	r2, #2
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e053      	b.n	800302c <UART_SetConfig+0x178>
 8002f84:	231b      	movs	r3, #27
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	2204      	movs	r2, #4
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	e04e      	b.n	800302c <UART_SetConfig+0x178>
 8002f8e:	231b      	movs	r3, #27
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	2208      	movs	r2, #8
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e049      	b.n	800302c <UART_SetConfig+0x178>
 8002f98:	231b      	movs	r3, #27
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e044      	b.n	800302c <UART_SetConfig+0x178>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a90      	ldr	r2, [pc, #576]	@ (80031e8 <UART_SetConfig+0x334>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d127      	bne.n	8002ffc <UART_SetConfig+0x148>
 8002fac:	4b8d      	ldr	r3, [pc, #564]	@ (80031e4 <UART_SetConfig+0x330>)
 8002fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d017      	beq.n	8002fe8 <UART_SetConfig+0x134>
 8002fb8:	d81b      	bhi.n	8002ff2 <UART_SetConfig+0x13e>
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d00a      	beq.n	8002fd4 <UART_SetConfig+0x120>
 8002fbe:	d818      	bhi.n	8002ff2 <UART_SetConfig+0x13e>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <UART_SetConfig+0x116>
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d00a      	beq.n	8002fde <UART_SetConfig+0x12a>
 8002fc8:	e013      	b.n	8002ff2 <UART_SetConfig+0x13e>
 8002fca:	231b      	movs	r3, #27
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e02b      	b.n	800302c <UART_SetConfig+0x178>
 8002fd4:	231b      	movs	r3, #27
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	2202      	movs	r2, #2
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	e026      	b.n	800302c <UART_SetConfig+0x178>
 8002fde:	231b      	movs	r3, #27
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e021      	b.n	800302c <UART_SetConfig+0x178>
 8002fe8:	231b      	movs	r3, #27
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2208      	movs	r2, #8
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e01c      	b.n	800302c <UART_SetConfig+0x178>
 8002ff2:	231b      	movs	r3, #27
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	e017      	b.n	800302c <UART_SetConfig+0x178>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a7a      	ldr	r2, [pc, #488]	@ (80031ec <UART_SetConfig+0x338>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d104      	bne.n	8003010 <UART_SetConfig+0x15c>
 8003006:	231b      	movs	r3, #27
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e00d      	b.n	800302c <UART_SetConfig+0x178>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a76      	ldr	r2, [pc, #472]	@ (80031f0 <UART_SetConfig+0x33c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d104      	bne.n	8003024 <UART_SetConfig+0x170>
 800301a:	231b      	movs	r3, #27
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e003      	b.n	800302c <UART_SetConfig+0x178>
 8003024:	231b      	movs	r3, #27
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2210      	movs	r2, #16
 800302a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	429a      	cmp	r2, r3
 8003036:	d000      	beq.n	800303a <UART_SetConfig+0x186>
 8003038:	e065      	b.n	8003106 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800303a:	231b      	movs	r3, #27
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d015      	beq.n	8003070 <UART_SetConfig+0x1bc>
 8003044:	dc18      	bgt.n	8003078 <UART_SetConfig+0x1c4>
 8003046:	2b04      	cmp	r3, #4
 8003048:	d00d      	beq.n	8003066 <UART_SetConfig+0x1b2>
 800304a:	dc15      	bgt.n	8003078 <UART_SetConfig+0x1c4>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <UART_SetConfig+0x1a2>
 8003050:	2b02      	cmp	r3, #2
 8003052:	d005      	beq.n	8003060 <UART_SetConfig+0x1ac>
 8003054:	e010      	b.n	8003078 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003056:	f7ff fb19 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 800305a:	0003      	movs	r3, r0
 800305c:	617b      	str	r3, [r7, #20]
        break;
 800305e:	e012      	b.n	8003086 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003060:	4b64      	ldr	r3, [pc, #400]	@ (80031f4 <UART_SetConfig+0x340>)
 8003062:	617b      	str	r3, [r7, #20]
        break;
 8003064:	e00f      	b.n	8003086 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003066:	f7ff fa85 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 800306a:	0003      	movs	r3, r0
 800306c:	617b      	str	r3, [r7, #20]
        break;
 800306e:	e00a      	b.n	8003086 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	617b      	str	r3, [r7, #20]
        break;
 8003076:	e006      	b.n	8003086 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800307c:	231a      	movs	r3, #26
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
        break;
 8003084:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d100      	bne.n	800308e <UART_SetConfig+0x1da>
 800308c:	e08d      	b.n	80031aa <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003092:	4b59      	ldr	r3, [pc, #356]	@ (80031f8 <UART_SetConfig+0x344>)
 8003094:	0052      	lsls	r2, r2, #1
 8003096:	5ad3      	ldrh	r3, [r2, r3]
 8003098:	0019      	movs	r1, r3
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f7fd f842 	bl	8000124 <__udivsi3>
 80030a0:	0003      	movs	r3, r0
 80030a2:	005a      	lsls	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	18d2      	adds	r2, r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	0019      	movs	r1, r3
 80030b2:	0010      	movs	r0, r2
 80030b4:	f7fd f836 	bl	8000124 <__udivsi3>
 80030b8:	0003      	movs	r3, r0
 80030ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b0f      	cmp	r3, #15
 80030c0:	d91c      	bls.n	80030fc <UART_SetConfig+0x248>
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	025b      	lsls	r3, r3, #9
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d217      	bcs.n	80030fc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	200e      	movs	r0, #14
 80030d2:	183b      	adds	r3, r7, r0
 80030d4:	210f      	movs	r1, #15
 80030d6:	438a      	bics	r2, r1
 80030d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2207      	movs	r2, #7
 80030e2:	4013      	ands	r3, r2
 80030e4:	b299      	uxth	r1, r3
 80030e6:	183b      	adds	r3, r7, r0
 80030e8:	183a      	adds	r2, r7, r0
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	183a      	adds	r2, r7, r0
 80030f6:	8812      	ldrh	r2, [r2, #0]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	e056      	b.n	80031aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80030fc:	231a      	movs	r3, #26
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e051      	b.n	80031aa <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003106:	231b      	movs	r3, #27
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d015      	beq.n	800313c <UART_SetConfig+0x288>
 8003110:	dc18      	bgt.n	8003144 <UART_SetConfig+0x290>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d00d      	beq.n	8003132 <UART_SetConfig+0x27e>
 8003116:	dc15      	bgt.n	8003144 <UART_SetConfig+0x290>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <UART_SetConfig+0x26e>
 800311c:	2b02      	cmp	r3, #2
 800311e:	d005      	beq.n	800312c <UART_SetConfig+0x278>
 8003120:	e010      	b.n	8003144 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003122:	f7ff fab3 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 8003126:	0003      	movs	r3, r0
 8003128:	617b      	str	r3, [r7, #20]
        break;
 800312a:	e012      	b.n	8003152 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800312c:	4b31      	ldr	r3, [pc, #196]	@ (80031f4 <UART_SetConfig+0x340>)
 800312e:	617b      	str	r3, [r7, #20]
        break;
 8003130:	e00f      	b.n	8003152 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003132:	f7ff fa1f 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8003136:	0003      	movs	r3, r0
 8003138:	617b      	str	r3, [r7, #20]
        break;
 800313a:	e00a      	b.n	8003152 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	617b      	str	r3, [r7, #20]
        break;
 8003142:	e006      	b.n	8003152 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003148:	231a      	movs	r3, #26
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
        break;
 8003150:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d028      	beq.n	80031aa <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800315c:	4b26      	ldr	r3, [pc, #152]	@ (80031f8 <UART_SetConfig+0x344>)
 800315e:	0052      	lsls	r2, r2, #1
 8003160:	5ad3      	ldrh	r3, [r2, r3]
 8003162:	0019      	movs	r1, r3
 8003164:	6978      	ldr	r0, [r7, #20]
 8003166:	f7fc ffdd 	bl	8000124 <__udivsi3>
 800316a:	0003      	movs	r3, r0
 800316c:	001a      	movs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	18d2      	adds	r2, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0019      	movs	r1, r3
 800317c:	0010      	movs	r0, r2
 800317e:	f7fc ffd1 	bl	8000124 <__udivsi3>
 8003182:	0003      	movs	r3, r0
 8003184:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b0f      	cmp	r3, #15
 800318a:	d90a      	bls.n	80031a2 <UART_SetConfig+0x2ee>
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	025b      	lsls	r3, r3, #9
 8003192:	429a      	cmp	r2, r3
 8003194:	d205      	bcs.n	80031a2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	b29a      	uxth	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	e003      	b.n	80031aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80031a2:	231a      	movs	r3, #26
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	226a      	movs	r2, #106	@ 0x6a
 80031ae:	2101      	movs	r1, #1
 80031b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2268      	movs	r2, #104	@ 0x68
 80031b6:	2101      	movs	r1, #1
 80031b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80031c6:	231a      	movs	r3, #26
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	781b      	ldrb	r3, [r3, #0]
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b008      	add	sp, #32
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	cfff69f3 	.word	0xcfff69f3
 80031d8:	ffffcfff 	.word	0xffffcfff
 80031dc:	11fff4ff 	.word	0x11fff4ff
 80031e0:	40013800 	.word	0x40013800
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40004400 	.word	0x40004400
 80031ec:	40004800 	.word	0x40004800
 80031f0:	40004c00 	.word	0x40004c00
 80031f4:	00f42400 	.word	0x00f42400
 80031f8:	080042f0 	.word	0x080042f0

080031fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	2208      	movs	r2, #8
 800320a:	4013      	ands	r3, r2
 800320c:	d00b      	beq.n	8003226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a4a      	ldr	r2, [pc, #296]	@ (8003340 <UART_AdvFeatureConfig+0x144>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322a:	2201      	movs	r2, #1
 800322c:	4013      	ands	r3, r2
 800322e:	d00b      	beq.n	8003248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a43      	ldr	r2, [pc, #268]	@ (8003344 <UART_AdvFeatureConfig+0x148>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	2202      	movs	r2, #2
 800324e:	4013      	ands	r3, r2
 8003250:	d00b      	beq.n	800326a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a3b      	ldr	r2, [pc, #236]	@ (8003348 <UART_AdvFeatureConfig+0x14c>)
 800325a:	4013      	ands	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	2204      	movs	r2, #4
 8003270:	4013      	ands	r3, r2
 8003272:	d00b      	beq.n	800328c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4a34      	ldr	r2, [pc, #208]	@ (800334c <UART_AdvFeatureConfig+0x150>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	2210      	movs	r2, #16
 8003292:	4013      	ands	r3, r2
 8003294:	d00b      	beq.n	80032ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a2c      	ldr	r2, [pc, #176]	@ (8003350 <UART_AdvFeatureConfig+0x154>)
 800329e:	4013      	ands	r3, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b2:	2220      	movs	r2, #32
 80032b4:	4013      	ands	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	4a25      	ldr	r2, [pc, #148]	@ (8003354 <UART_AdvFeatureConfig+0x158>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	2240      	movs	r2, #64	@ 0x40
 80032d6:	4013      	ands	r3, r2
 80032d8:	d01d      	beq.n	8003316 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003358 <UART_AdvFeatureConfig+0x15c>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032f6:	2380      	movs	r3, #128	@ 0x80
 80032f8:	035b      	lsls	r3, r3, #13
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d10b      	bne.n	8003316 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a15      	ldr	r2, [pc, #84]	@ (800335c <UART_AdvFeatureConfig+0x160>)
 8003306:	4013      	ands	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	2280      	movs	r2, #128	@ 0x80
 800331c:	4013      	ands	r3, r2
 800331e:	d00b      	beq.n	8003338 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4a0e      	ldr	r2, [pc, #56]	@ (8003360 <UART_AdvFeatureConfig+0x164>)
 8003328:	4013      	ands	r3, r2
 800332a:	0019      	movs	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }
}
 8003338:	46c0      	nop			@ (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}
 8003340:	ffff7fff 	.word	0xffff7fff
 8003344:	fffdffff 	.word	0xfffdffff
 8003348:	fffeffff 	.word	0xfffeffff
 800334c:	fffbffff 	.word	0xfffbffff
 8003350:	ffffefff 	.word	0xffffefff
 8003354:	ffffdfff 	.word	0xffffdfff
 8003358:	ffefffff 	.word	0xffefffff
 800335c:	ff9fffff 	.word	0xff9fffff
 8003360:	fff7ffff 	.word	0xfff7ffff

08003364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b092      	sub	sp, #72	@ 0x48
 8003368:	af02      	add	r7, sp, #8
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2290      	movs	r2, #144	@ 0x90
 8003370:	2100      	movs	r1, #0
 8003372:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003374:	f7fe fa04 	bl	8001780 <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2208      	movs	r2, #8
 8003384:	4013      	ands	r3, r2
 8003386:	2b08      	cmp	r3, #8
 8003388:	d12d      	bne.n	80033e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800338a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338c:	2280      	movs	r2, #128	@ 0x80
 800338e:	0391      	lsls	r1, r2, #14
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4a47      	ldr	r2, [pc, #284]	@ (80034b0 <UART_CheckIdleState+0x14c>)
 8003394:	9200      	str	r2, [sp, #0]
 8003396:	2200      	movs	r2, #0
 8003398:	f000 f88e 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d022      	beq.n	80033e6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a0:	f3ef 8310 	mrs	r3, PRIMASK
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80033a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033aa:	2301      	movs	r3, #1
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b0:	f383 8810 	msr	PRIMASK, r3
}
 80033b4:	46c0      	nop			@ (mov r8, r8)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2180      	movs	r1, #128	@ 0x80
 80033c2:	438a      	bics	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033cc:	f383 8810 	msr	PRIMASK, r3
}
 80033d0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2288      	movs	r2, #136	@ 0x88
 80033d6:	2120      	movs	r1, #32
 80033d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2284      	movs	r2, #132	@ 0x84
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e060      	b.n	80034a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2204      	movs	r2, #4
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d146      	bne.n	8003482 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f6:	2280      	movs	r2, #128	@ 0x80
 80033f8:	03d1      	lsls	r1, r2, #15
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4a2c      	ldr	r2, [pc, #176]	@ (80034b0 <UART_CheckIdleState+0x14c>)
 80033fe:	9200      	str	r2, [sp, #0]
 8003400:	2200      	movs	r2, #0
 8003402:	f000 f859 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d03b      	beq.n	8003482 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340a:	f3ef 8310 	mrs	r3, PRIMASK
 800340e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003410:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003412:	637b      	str	r3, [r7, #52]	@ 0x34
 8003414:	2301      	movs	r3, #1
 8003416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4922      	ldr	r1, [pc, #136]	@ (80034b4 <UART_CheckIdleState+0x150>)
 800342c:	400a      	ands	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f383 8810 	msr	PRIMASK, r3
}
 800343a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343c:	f3ef 8310 	mrs	r3, PRIMASK
 8003440:	61bb      	str	r3, [r7, #24]
  return(result);
 8003442:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	633b      	str	r3, [r7, #48]	@ 0x30
 8003446:	2301      	movs	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			@ (mov r8, r8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2101      	movs	r1, #1
 800345e:	438a      	bics	r2, r1
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f383 8810 	msr	PRIMASK, r3
}
 800346c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	228c      	movs	r2, #140	@ 0x8c
 8003472:	2120      	movs	r1, #32
 8003474:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2284      	movs	r2, #132	@ 0x84
 800347a:	2100      	movs	r1, #0
 800347c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e012      	b.n	80034a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2288      	movs	r2, #136	@ 0x88
 8003486:	2120      	movs	r1, #32
 8003488:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	228c      	movs	r2, #140	@ 0x8c
 800348e:	2120      	movs	r1, #32
 8003490:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2284      	movs	r2, #132	@ 0x84
 80034a2:	2100      	movs	r1, #0
 80034a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b010      	add	sp, #64	@ 0x40
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	01ffffff 	.word	0x01ffffff
 80034b4:	fffffedf 	.word	0xfffffedf

080034b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	1dfb      	adds	r3, r7, #7
 80034c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c8:	e051      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	3301      	adds	r3, #1
 80034ce:	d04e      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d0:	f7fe f956 	bl	8001780 <HAL_GetTick>
 80034d4:	0002      	movs	r2, r0
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d302      	bcc.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e051      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2204      	movs	r2, #4
 80034f2:	4013      	ands	r3, r2
 80034f4:	d03b      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xb6>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b80      	cmp	r3, #128	@ 0x80
 80034fa:	d038      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xb6>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b40      	cmp	r3, #64	@ 0x40
 8003500:	d035      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2208      	movs	r2, #8
 800350a:	4013      	ands	r3, r2
 800350c:	2b08      	cmp	r3, #8
 800350e:	d111      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2208      	movs	r2, #8
 8003516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 f83c 	bl	8003598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2290      	movs	r2, #144	@ 0x90
 8003524:	2108      	movs	r1, #8
 8003526:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2284      	movs	r2, #132	@ 0x84
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e02c      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	401a      	ands	r2, r3
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	429a      	cmp	r2, r3
 8003546:	d112      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2280      	movs	r2, #128	@ 0x80
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	0018      	movs	r0, r3
 8003556:	f000 f81f 	bl	8003598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2290      	movs	r2, #144	@ 0x90
 800355e:	2120      	movs	r1, #32
 8003560:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2284      	movs	r2, #132	@ 0x84
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e00f      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	425a      	negs	r2, r3
 800357e:	4153      	adcs	r3, r2
 8003580:	b2db      	uxtb	r3, r3
 8003582:	001a      	movs	r2, r3
 8003584:	1dfb      	adds	r3, r7, #7
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d09e      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b004      	add	sp, #16
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	@ 0x38
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a0:	f3ef 8310 	mrs	r3, PRIMASK
 80035a4:	617b      	str	r3, [r7, #20]
  return(result);
 80035a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80035aa:	2301      	movs	r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f383 8810 	msr	PRIMASK, r3
}
 80035b4:	46c0      	nop			@ (mov r8, r8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4926      	ldr	r1, [pc, #152]	@ (800365c <UART_EndRxTransfer+0xc4>)
 80035c2:	400a      	ands	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f383 8810 	msr	PRIMASK, r3
}
 80035d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d2:	f3ef 8310 	mrs	r3, PRIMASK
 80035d6:	623b      	str	r3, [r7, #32]
  return(result);
 80035d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035da:	633b      	str	r3, [r7, #48]	@ 0x30
 80035dc:	2301      	movs	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	f383 8810 	msr	PRIMASK, r3
}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	491b      	ldr	r1, [pc, #108]	@ (8003660 <UART_EndRxTransfer+0xc8>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d118      	bne.n	800363e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360c:	f3ef 8310 	mrs	r3, PRIMASK
 8003610:	60bb      	str	r3, [r7, #8]
  return(result);
 8003612:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003616:	2301      	movs	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f383 8810 	msr	PRIMASK, r3
}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2110      	movs	r1, #16
 800362e:	438a      	bics	r2, r1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f383 8810 	msr	PRIMASK, r3
}
 800363c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	228c      	movs	r2, #140	@ 0x8c
 8003642:	2120      	movs	r1, #32
 8003644:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b00e      	add	sp, #56	@ 0x38
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	fffffedf 	.word	0xfffffedf
 8003660:	effffffe 	.word	0xeffffffe

08003664 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2284      	movs	r2, #132	@ 0x84
 8003670:	5c9b      	ldrb	r3, [r3, r2]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_UARTEx_DisableFifoMode+0x16>
 8003676:	2302      	movs	r3, #2
 8003678:	e027      	b.n	80036ca <HAL_UARTEx_DisableFifoMode+0x66>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2284      	movs	r2, #132	@ 0x84
 800367e:	2101      	movs	r1, #1
 8003680:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2288      	movs	r2, #136	@ 0x88
 8003686:	2124      	movs	r1, #36	@ 0x24
 8003688:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	438a      	bics	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a0b      	ldr	r2, [pc, #44]	@ (80036d4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2288      	movs	r2, #136	@ 0x88
 80036bc:	2120      	movs	r1, #32
 80036be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2284      	movs	r2, #132	@ 0x84
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b004      	add	sp, #16
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	dfffffff 	.word	0xdfffffff

080036d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2284      	movs	r2, #132	@ 0x84
 80036e6:	5c9b      	ldrb	r3, [r3, r2]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e02e      	b.n	800374e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2284      	movs	r2, #132	@ 0x84
 80036f4:	2101      	movs	r1, #1
 80036f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2288      	movs	r2, #136	@ 0x88
 80036fc:	2124      	movs	r1, #36	@ 0x24
 80036fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2101      	movs	r1, #1
 8003714:	438a      	bics	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	08d9      	lsrs	r1, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 f854 	bl	80037dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2288      	movs	r2, #136	@ 0x88
 8003740:	2120      	movs	r1, #32
 8003742:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2284      	movs	r2, #132	@ 0x84
 8003748:	2100      	movs	r1, #0
 800374a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2284      	movs	r2, #132	@ 0x84
 8003766:	5c9b      	ldrb	r3, [r3, r2]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800376c:	2302      	movs	r3, #2
 800376e:	e02f      	b.n	80037d0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2284      	movs	r2, #132	@ 0x84
 8003774:	2101      	movs	r1, #1
 8003776:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2288      	movs	r2, #136	@ 0x88
 800377c:	2124      	movs	r1, #36	@ 0x24
 800377e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2101      	movs	r1, #1
 8003794:	438a      	bics	r2, r1
 8003796:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4a0e      	ldr	r2, [pc, #56]	@ (80037d8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	0019      	movs	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 f813 	bl	80037dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2288      	movs	r2, #136	@ 0x88
 80037c2:	2120      	movs	r1, #32
 80037c4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2284      	movs	r2, #132	@ 0x84
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	f1ffffff 	.word	0xf1ffffff

080037dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d108      	bne.n	80037fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	226a      	movs	r2, #106	@ 0x6a
 80037f0:	2101      	movs	r1, #1
 80037f2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2268      	movs	r2, #104	@ 0x68
 80037f8:	2101      	movs	r1, #1
 80037fa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037fc:	e043      	b.n	8003886 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037fe:	260f      	movs	r6, #15
 8003800:	19bb      	adds	r3, r7, r6
 8003802:	2208      	movs	r2, #8
 8003804:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003806:	200e      	movs	r0, #14
 8003808:	183b      	adds	r3, r7, r0
 800380a:	2208      	movs	r2, #8
 800380c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	0e5b      	lsrs	r3, r3, #25
 8003816:	b2da      	uxtb	r2, r3
 8003818:	240d      	movs	r4, #13
 800381a:	193b      	adds	r3, r7, r4
 800381c:	2107      	movs	r1, #7
 800381e:	400a      	ands	r2, r1
 8003820:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	0f5b      	lsrs	r3, r3, #29
 800382a:	b2da      	uxtb	r2, r3
 800382c:	250c      	movs	r5, #12
 800382e:	197b      	adds	r3, r7, r5
 8003830:	2107      	movs	r1, #7
 8003832:	400a      	ands	r2, r1
 8003834:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003836:	183b      	adds	r3, r7, r0
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	197a      	adds	r2, r7, r5
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	4914      	ldr	r1, [pc, #80]	@ (8003890 <UARTEx_SetNbDataToProcess+0xb4>)
 8003840:	5c8a      	ldrb	r2, [r1, r2]
 8003842:	435a      	muls	r2, r3
 8003844:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003846:	197b      	adds	r3, r7, r5
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	4a12      	ldr	r2, [pc, #72]	@ (8003894 <UARTEx_SetNbDataToProcess+0xb8>)
 800384c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800384e:	0019      	movs	r1, r3
 8003850:	f7fc fcf2 	bl	8000238 <__divsi3>
 8003854:	0003      	movs	r3, r0
 8003856:	b299      	uxth	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	226a      	movs	r2, #106	@ 0x6a
 800385c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800385e:	19bb      	adds	r3, r7, r6
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	193a      	adds	r2, r7, r4
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	490a      	ldr	r1, [pc, #40]	@ (8003890 <UARTEx_SetNbDataToProcess+0xb4>)
 8003868:	5c8a      	ldrb	r2, [r1, r2]
 800386a:	435a      	muls	r2, r3
 800386c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800386e:	193b      	adds	r3, r7, r4
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	4a08      	ldr	r2, [pc, #32]	@ (8003894 <UARTEx_SetNbDataToProcess+0xb8>)
 8003874:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003876:	0019      	movs	r1, r3
 8003878:	f7fc fcde 	bl	8000238 <__divsi3>
 800387c:	0003      	movs	r3, r0
 800387e:	b299      	uxth	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2268      	movs	r2, #104	@ 0x68
 8003884:	5299      	strh	r1, [r3, r2]
}
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	46bd      	mov	sp, r7
 800388a:	b005      	add	sp, #20
 800388c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	08004308 	.word	0x08004308
 8003894:	08004310 	.word	0x08004310

08003898 <siprintf>:
 8003898:	b40e      	push	{r1, r2, r3}
 800389a:	b500      	push	{lr}
 800389c:	490b      	ldr	r1, [pc, #44]	@ (80038cc <siprintf+0x34>)
 800389e:	b09c      	sub	sp, #112	@ 0x70
 80038a0:	ab1d      	add	r3, sp, #116	@ 0x74
 80038a2:	9002      	str	r0, [sp, #8]
 80038a4:	9006      	str	r0, [sp, #24]
 80038a6:	9107      	str	r1, [sp, #28]
 80038a8:	9104      	str	r1, [sp, #16]
 80038aa:	4809      	ldr	r0, [pc, #36]	@ (80038d0 <siprintf+0x38>)
 80038ac:	4909      	ldr	r1, [pc, #36]	@ (80038d4 <siprintf+0x3c>)
 80038ae:	cb04      	ldmia	r3!, {r2}
 80038b0:	9105      	str	r1, [sp, #20]
 80038b2:	6800      	ldr	r0, [r0, #0]
 80038b4:	a902      	add	r1, sp, #8
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	f000 f99e 	bl	8003bf8 <_svfiprintf_r>
 80038bc:	2200      	movs	r2, #0
 80038be:	9b02      	ldr	r3, [sp, #8]
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	b01c      	add	sp, #112	@ 0x70
 80038c4:	bc08      	pop	{r3}
 80038c6:	b003      	add	sp, #12
 80038c8:	4718      	bx	r3
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	7fffffff 	.word	0x7fffffff
 80038d0:	2000000c 	.word	0x2000000c
 80038d4:	ffff0208 	.word	0xffff0208

080038d8 <memset>:
 80038d8:	0003      	movs	r3, r0
 80038da:	1882      	adds	r2, r0, r2
 80038dc:	4293      	cmp	r3, r2
 80038de:	d100      	bne.n	80038e2 <memset+0xa>
 80038e0:	4770      	bx	lr
 80038e2:	7019      	strb	r1, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	e7f9      	b.n	80038dc <memset+0x4>

080038e8 <__errno>:
 80038e8:	4b01      	ldr	r3, [pc, #4]	@ (80038f0 <__errno+0x8>)
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	4770      	bx	lr
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	2000000c 	.word	0x2000000c

080038f4 <__libc_init_array>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	2600      	movs	r6, #0
 80038f8:	4c0c      	ldr	r4, [pc, #48]	@ (800392c <__libc_init_array+0x38>)
 80038fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003930 <__libc_init_array+0x3c>)
 80038fc:	1b64      	subs	r4, r4, r5
 80038fe:	10a4      	asrs	r4, r4, #2
 8003900:	42a6      	cmp	r6, r4
 8003902:	d109      	bne.n	8003918 <__libc_init_array+0x24>
 8003904:	2600      	movs	r6, #0
 8003906:	f000 fc65 	bl	80041d4 <_init>
 800390a:	4c0a      	ldr	r4, [pc, #40]	@ (8003934 <__libc_init_array+0x40>)
 800390c:	4d0a      	ldr	r5, [pc, #40]	@ (8003938 <__libc_init_array+0x44>)
 800390e:	1b64      	subs	r4, r4, r5
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	42a6      	cmp	r6, r4
 8003914:	d105      	bne.n	8003922 <__libc_init_array+0x2e>
 8003916:	bd70      	pop	{r4, r5, r6, pc}
 8003918:	00b3      	lsls	r3, r6, #2
 800391a:	58eb      	ldr	r3, [r5, r3]
 800391c:	4798      	blx	r3
 800391e:	3601      	adds	r6, #1
 8003920:	e7ee      	b.n	8003900 <__libc_init_array+0xc>
 8003922:	00b3      	lsls	r3, r6, #2
 8003924:	58eb      	ldr	r3, [r5, r3]
 8003926:	4798      	blx	r3
 8003928:	3601      	adds	r6, #1
 800392a:	e7f2      	b.n	8003912 <__libc_init_array+0x1e>
 800392c:	0800434c 	.word	0x0800434c
 8003930:	0800434c 	.word	0x0800434c
 8003934:	08004350 	.word	0x08004350
 8003938:	0800434c 	.word	0x0800434c

0800393c <__retarget_lock_acquire_recursive>:
 800393c:	4770      	bx	lr

0800393e <__retarget_lock_release_recursive>:
 800393e:	4770      	bx	lr

08003940 <_free_r>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	0005      	movs	r5, r0
 8003944:	1e0c      	subs	r4, r1, #0
 8003946:	d010      	beq.n	800396a <_free_r+0x2a>
 8003948:	3c04      	subs	r4, #4
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	da00      	bge.n	8003952 <_free_r+0x12>
 8003950:	18e4      	adds	r4, r4, r3
 8003952:	0028      	movs	r0, r5
 8003954:	f000 f8e0 	bl	8003b18 <__malloc_lock>
 8003958:	4a1d      	ldr	r2, [pc, #116]	@ (80039d0 <_free_r+0x90>)
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <_free_r+0x2c>
 8003960:	6063      	str	r3, [r4, #4]
 8003962:	6014      	str	r4, [r2, #0]
 8003964:	0028      	movs	r0, r5
 8003966:	f000 f8df 	bl	8003b28 <__malloc_unlock>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	42a3      	cmp	r3, r4
 800396e:	d908      	bls.n	8003982 <_free_r+0x42>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	1821      	adds	r1, r4, r0
 8003974:	428b      	cmp	r3, r1
 8003976:	d1f3      	bne.n	8003960 <_free_r+0x20>
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	1809      	adds	r1, r1, r0
 800397e:	6021      	str	r1, [r4, #0]
 8003980:	e7ee      	b.n	8003960 <_free_r+0x20>
 8003982:	001a      	movs	r2, r3
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <_free_r+0x4e>
 800398a:	42a3      	cmp	r3, r4
 800398c:	d9f9      	bls.n	8003982 <_free_r+0x42>
 800398e:	6811      	ldr	r1, [r2, #0]
 8003990:	1850      	adds	r0, r2, r1
 8003992:	42a0      	cmp	r0, r4
 8003994:	d10b      	bne.n	80039ae <_free_r+0x6e>
 8003996:	6820      	ldr	r0, [r4, #0]
 8003998:	1809      	adds	r1, r1, r0
 800399a:	1850      	adds	r0, r2, r1
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	4283      	cmp	r3, r0
 80039a0:	d1e0      	bne.n	8003964 <_free_r+0x24>
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	1841      	adds	r1, r0, r1
 80039a8:	6011      	str	r1, [r2, #0]
 80039aa:	6053      	str	r3, [r2, #4]
 80039ac:	e7da      	b.n	8003964 <_free_r+0x24>
 80039ae:	42a0      	cmp	r0, r4
 80039b0:	d902      	bls.n	80039b8 <_free_r+0x78>
 80039b2:	230c      	movs	r3, #12
 80039b4:	602b      	str	r3, [r5, #0]
 80039b6:	e7d5      	b.n	8003964 <_free_r+0x24>
 80039b8:	6820      	ldr	r0, [r4, #0]
 80039ba:	1821      	adds	r1, r4, r0
 80039bc:	428b      	cmp	r3, r1
 80039be:	d103      	bne.n	80039c8 <_free_r+0x88>
 80039c0:	6819      	ldr	r1, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	1809      	adds	r1, r1, r0
 80039c6:	6021      	str	r1, [r4, #0]
 80039c8:	6063      	str	r3, [r4, #4]
 80039ca:	6054      	str	r4, [r2, #4]
 80039cc:	e7ca      	b.n	8003964 <_free_r+0x24>
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	200002f0 	.word	0x200002f0

080039d4 <sbrk_aligned>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	4e0f      	ldr	r6, [pc, #60]	@ (8003a14 <sbrk_aligned+0x40>)
 80039d8:	000d      	movs	r5, r1
 80039da:	6831      	ldr	r1, [r6, #0]
 80039dc:	0004      	movs	r4, r0
 80039de:	2900      	cmp	r1, #0
 80039e0:	d102      	bne.n	80039e8 <sbrk_aligned+0x14>
 80039e2:	f000 fb99 	bl	8004118 <_sbrk_r>
 80039e6:	6030      	str	r0, [r6, #0]
 80039e8:	0029      	movs	r1, r5
 80039ea:	0020      	movs	r0, r4
 80039ec:	f000 fb94 	bl	8004118 <_sbrk_r>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	d103      	bne.n	80039fc <sbrk_aligned+0x28>
 80039f4:	2501      	movs	r5, #1
 80039f6:	426d      	negs	r5, r5
 80039f8:	0028      	movs	r0, r5
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	2303      	movs	r3, #3
 80039fe:	1cc5      	adds	r5, r0, #3
 8003a00:	439d      	bics	r5, r3
 8003a02:	42a8      	cmp	r0, r5
 8003a04:	d0f8      	beq.n	80039f8 <sbrk_aligned+0x24>
 8003a06:	1a29      	subs	r1, r5, r0
 8003a08:	0020      	movs	r0, r4
 8003a0a:	f000 fb85 	bl	8004118 <_sbrk_r>
 8003a0e:	3001      	adds	r0, #1
 8003a10:	d1f2      	bne.n	80039f8 <sbrk_aligned+0x24>
 8003a12:	e7ef      	b.n	80039f4 <sbrk_aligned+0x20>
 8003a14:	200002ec 	.word	0x200002ec

08003a18 <_malloc_r>:
 8003a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	1ccb      	adds	r3, r1, #3
 8003a1e:	4393      	bics	r3, r2
 8003a20:	3308      	adds	r3, #8
 8003a22:	0005      	movs	r5, r0
 8003a24:	001f      	movs	r7, r3
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d234      	bcs.n	8003a94 <_malloc_r+0x7c>
 8003a2a:	270c      	movs	r7, #12
 8003a2c:	42b9      	cmp	r1, r7
 8003a2e:	d833      	bhi.n	8003a98 <_malloc_r+0x80>
 8003a30:	0028      	movs	r0, r5
 8003a32:	f000 f871 	bl	8003b18 <__malloc_lock>
 8003a36:	4e37      	ldr	r6, [pc, #220]	@ (8003b14 <_malloc_r+0xfc>)
 8003a38:	6833      	ldr	r3, [r6, #0]
 8003a3a:	001c      	movs	r4, r3
 8003a3c:	2c00      	cmp	r4, #0
 8003a3e:	d12f      	bne.n	8003aa0 <_malloc_r+0x88>
 8003a40:	0039      	movs	r1, r7
 8003a42:	0028      	movs	r0, r5
 8003a44:	f7ff ffc6 	bl	80039d4 <sbrk_aligned>
 8003a48:	0004      	movs	r4, r0
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	d15f      	bne.n	8003b0e <_malloc_r+0xf6>
 8003a4e:	6834      	ldr	r4, [r6, #0]
 8003a50:	9400      	str	r4, [sp, #0]
 8003a52:	9b00      	ldr	r3, [sp, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d14a      	bne.n	8003aee <_malloc_r+0xd6>
 8003a58:	2c00      	cmp	r4, #0
 8003a5a:	d052      	beq.n	8003b02 <_malloc_r+0xea>
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	0028      	movs	r0, r5
 8003a60:	18e3      	adds	r3, r4, r3
 8003a62:	9900      	ldr	r1, [sp, #0]
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	f000 fb57 	bl	8004118 <_sbrk_r>
 8003a6a:	9b01      	ldr	r3, [sp, #4]
 8003a6c:	4283      	cmp	r3, r0
 8003a6e:	d148      	bne.n	8003b02 <_malloc_r+0xea>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	0028      	movs	r0, r5
 8003a74:	1aff      	subs	r7, r7, r3
 8003a76:	0039      	movs	r1, r7
 8003a78:	f7ff ffac 	bl	80039d4 <sbrk_aligned>
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d040      	beq.n	8003b02 <_malloc_r+0xea>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	19db      	adds	r3, r3, r7
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	6833      	ldr	r3, [r6, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	2a00      	cmp	r2, #0
 8003a8c:	d133      	bne.n	8003af6 <_malloc_r+0xde>
 8003a8e:	9b00      	ldr	r3, [sp, #0]
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	e019      	b.n	8003ac8 <_malloc_r+0xb0>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	dac9      	bge.n	8003a2c <_malloc_r+0x14>
 8003a98:	230c      	movs	r3, #12
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003aa0:	6821      	ldr	r1, [r4, #0]
 8003aa2:	1bc9      	subs	r1, r1, r7
 8003aa4:	d420      	bmi.n	8003ae8 <_malloc_r+0xd0>
 8003aa6:	290b      	cmp	r1, #11
 8003aa8:	d90a      	bls.n	8003ac0 <_malloc_r+0xa8>
 8003aaa:	19e2      	adds	r2, r4, r7
 8003aac:	6027      	str	r7, [r4, #0]
 8003aae:	42a3      	cmp	r3, r4
 8003ab0:	d104      	bne.n	8003abc <_malloc_r+0xa4>
 8003ab2:	6032      	str	r2, [r6, #0]
 8003ab4:	6863      	ldr	r3, [r4, #4]
 8003ab6:	6011      	str	r1, [r2, #0]
 8003ab8:	6053      	str	r3, [r2, #4]
 8003aba:	e005      	b.n	8003ac8 <_malloc_r+0xb0>
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	e7f9      	b.n	8003ab4 <_malloc_r+0x9c>
 8003ac0:	6862      	ldr	r2, [r4, #4]
 8003ac2:	42a3      	cmp	r3, r4
 8003ac4:	d10e      	bne.n	8003ae4 <_malloc_r+0xcc>
 8003ac6:	6032      	str	r2, [r6, #0]
 8003ac8:	0028      	movs	r0, r5
 8003aca:	f000 f82d 	bl	8003b28 <__malloc_unlock>
 8003ace:	0020      	movs	r0, r4
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	300b      	adds	r0, #11
 8003ad4:	1d23      	adds	r3, r4, #4
 8003ad6:	4390      	bics	r0, r2
 8003ad8:	1ac2      	subs	r2, r0, r3
 8003ada:	4298      	cmp	r0, r3
 8003adc:	d0df      	beq.n	8003a9e <_malloc_r+0x86>
 8003ade:	1a1b      	subs	r3, r3, r0
 8003ae0:	50a3      	str	r3, [r4, r2]
 8003ae2:	e7dc      	b.n	8003a9e <_malloc_r+0x86>
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	e7ef      	b.n	8003ac8 <_malloc_r+0xb0>
 8003ae8:	0023      	movs	r3, r4
 8003aea:	6864      	ldr	r4, [r4, #4]
 8003aec:	e7a6      	b.n	8003a3c <_malloc_r+0x24>
 8003aee:	9c00      	ldr	r4, [sp, #0]
 8003af0:	6863      	ldr	r3, [r4, #4]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	e7ad      	b.n	8003a52 <_malloc_r+0x3a>
 8003af6:	001a      	movs	r2, r3
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	42a3      	cmp	r3, r4
 8003afc:	d1fb      	bne.n	8003af6 <_malloc_r+0xde>
 8003afe:	2300      	movs	r3, #0
 8003b00:	e7da      	b.n	8003ab8 <_malloc_r+0xa0>
 8003b02:	230c      	movs	r3, #12
 8003b04:	0028      	movs	r0, r5
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	f000 f80e 	bl	8003b28 <__malloc_unlock>
 8003b0c:	e7c6      	b.n	8003a9c <_malloc_r+0x84>
 8003b0e:	6007      	str	r7, [r0, #0]
 8003b10:	e7da      	b.n	8003ac8 <_malloc_r+0xb0>
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	200002f0 	.word	0x200002f0

08003b18 <__malloc_lock>:
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	4802      	ldr	r0, [pc, #8]	@ (8003b24 <__malloc_lock+0xc>)
 8003b1c:	f7ff ff0e 	bl	800393c <__retarget_lock_acquire_recursive>
 8003b20:	bd10      	pop	{r4, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	200002e8 	.word	0x200002e8

08003b28 <__malloc_unlock>:
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	4802      	ldr	r0, [pc, #8]	@ (8003b34 <__malloc_unlock+0xc>)
 8003b2c:	f7ff ff07 	bl	800393e <__retarget_lock_release_recursive>
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	200002e8 	.word	0x200002e8

08003b38 <__ssputs_r>:
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3a:	688e      	ldr	r6, [r1, #8]
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	001f      	movs	r7, r3
 8003b40:	000c      	movs	r4, r1
 8003b42:	680b      	ldr	r3, [r1, #0]
 8003b44:	9002      	str	r0, [sp, #8]
 8003b46:	9203      	str	r2, [sp, #12]
 8003b48:	42be      	cmp	r6, r7
 8003b4a:	d830      	bhi.n	8003bae <__ssputs_r+0x76>
 8003b4c:	210c      	movs	r1, #12
 8003b4e:	5e62      	ldrsh	r2, [r4, r1]
 8003b50:	2190      	movs	r1, #144	@ 0x90
 8003b52:	00c9      	lsls	r1, r1, #3
 8003b54:	420a      	tst	r2, r1
 8003b56:	d028      	beq.n	8003baa <__ssputs_r+0x72>
 8003b58:	2003      	movs	r0, #3
 8003b5a:	6921      	ldr	r1, [r4, #16]
 8003b5c:	1a5b      	subs	r3, r3, r1
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	6963      	ldr	r3, [r4, #20]
 8003b62:	4343      	muls	r3, r0
 8003b64:	9801      	ldr	r0, [sp, #4]
 8003b66:	0fdd      	lsrs	r5, r3, #31
 8003b68:	18ed      	adds	r5, r5, r3
 8003b6a:	1c7b      	adds	r3, r7, #1
 8003b6c:	181b      	adds	r3, r3, r0
 8003b6e:	106d      	asrs	r5, r5, #1
 8003b70:	42ab      	cmp	r3, r5
 8003b72:	d900      	bls.n	8003b76 <__ssputs_r+0x3e>
 8003b74:	001d      	movs	r5, r3
 8003b76:	0552      	lsls	r2, r2, #21
 8003b78:	d528      	bpl.n	8003bcc <__ssputs_r+0x94>
 8003b7a:	0029      	movs	r1, r5
 8003b7c:	9802      	ldr	r0, [sp, #8]
 8003b7e:	f7ff ff4b 	bl	8003a18 <_malloc_r>
 8003b82:	1e06      	subs	r6, r0, #0
 8003b84:	d02c      	beq.n	8003be0 <__ssputs_r+0xa8>
 8003b86:	9a01      	ldr	r2, [sp, #4]
 8003b88:	6921      	ldr	r1, [r4, #16]
 8003b8a:	f000 fae2 	bl	8004152 <memcpy>
 8003b8e:	89a2      	ldrh	r2, [r4, #12]
 8003b90:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <__ssputs_r+0xbc>)
 8003b92:	401a      	ands	r2, r3
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	4313      	orrs	r3, r2
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	9b01      	ldr	r3, [sp, #4]
 8003b9c:	6126      	str	r6, [r4, #16]
 8003b9e:	18f6      	adds	r6, r6, r3
 8003ba0:	6026      	str	r6, [r4, #0]
 8003ba2:	003e      	movs	r6, r7
 8003ba4:	6165      	str	r5, [r4, #20]
 8003ba6:	1aed      	subs	r5, r5, r3
 8003ba8:	60a5      	str	r5, [r4, #8]
 8003baa:	42be      	cmp	r6, r7
 8003bac:	d900      	bls.n	8003bb0 <__ssputs_r+0x78>
 8003bae:	003e      	movs	r6, r7
 8003bb0:	0032      	movs	r2, r6
 8003bb2:	9903      	ldr	r1, [sp, #12]
 8003bb4:	6820      	ldr	r0, [r4, #0]
 8003bb6:	f000 fa9b 	bl	80040f0 <memmove>
 8003bba:	2000      	movs	r0, #0
 8003bbc:	68a3      	ldr	r3, [r4, #8]
 8003bbe:	1b9b      	subs	r3, r3, r6
 8003bc0:	60a3      	str	r3, [r4, #8]
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	199b      	adds	r3, r3, r6
 8003bc6:	6023      	str	r3, [r4, #0]
 8003bc8:	b005      	add	sp, #20
 8003bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bcc:	002a      	movs	r2, r5
 8003bce:	9802      	ldr	r0, [sp, #8]
 8003bd0:	f000 fac8 	bl	8004164 <_realloc_r>
 8003bd4:	1e06      	subs	r6, r0, #0
 8003bd6:	d1e0      	bne.n	8003b9a <__ssputs_r+0x62>
 8003bd8:	6921      	ldr	r1, [r4, #16]
 8003bda:	9802      	ldr	r0, [sp, #8]
 8003bdc:	f7ff feb0 	bl	8003940 <_free_r>
 8003be0:	230c      	movs	r3, #12
 8003be2:	2001      	movs	r0, #1
 8003be4:	9a02      	ldr	r2, [sp, #8]
 8003be6:	4240      	negs	r0, r0
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	89a2      	ldrh	r2, [r4, #12]
 8003bec:	3334      	adds	r3, #52	@ 0x34
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	e7e9      	b.n	8003bc8 <__ssputs_r+0x90>
 8003bf4:	fffffb7f 	.word	0xfffffb7f

08003bf8 <_svfiprintf_r>:
 8003bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfa:	b0a1      	sub	sp, #132	@ 0x84
 8003bfc:	9003      	str	r0, [sp, #12]
 8003bfe:	001d      	movs	r5, r3
 8003c00:	898b      	ldrh	r3, [r1, #12]
 8003c02:	000f      	movs	r7, r1
 8003c04:	0016      	movs	r6, r2
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	d511      	bpl.n	8003c2e <_svfiprintf_r+0x36>
 8003c0a:	690b      	ldr	r3, [r1, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10e      	bne.n	8003c2e <_svfiprintf_r+0x36>
 8003c10:	2140      	movs	r1, #64	@ 0x40
 8003c12:	f7ff ff01 	bl	8003a18 <_malloc_r>
 8003c16:	6038      	str	r0, [r7, #0]
 8003c18:	6138      	str	r0, [r7, #16]
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d105      	bne.n	8003c2a <_svfiprintf_r+0x32>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	9a03      	ldr	r2, [sp, #12]
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	2001      	movs	r0, #1
 8003c26:	4240      	negs	r0, r0
 8003c28:	e0cf      	b.n	8003dca <_svfiprintf_r+0x1d2>
 8003c2a:	2340      	movs	r3, #64	@ 0x40
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	ac08      	add	r4, sp, #32
 8003c32:	6163      	str	r3, [r4, #20]
 8003c34:	3320      	adds	r3, #32
 8003c36:	7663      	strb	r3, [r4, #25]
 8003c38:	3310      	adds	r3, #16
 8003c3a:	76a3      	strb	r3, [r4, #26]
 8003c3c:	9507      	str	r5, [sp, #28]
 8003c3e:	0035      	movs	r5, r6
 8003c40:	782b      	ldrb	r3, [r5, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <_svfiprintf_r+0x52>
 8003c46:	2b25      	cmp	r3, #37	@ 0x25
 8003c48:	d148      	bne.n	8003cdc <_svfiprintf_r+0xe4>
 8003c4a:	1bab      	subs	r3, r5, r6
 8003c4c:	9305      	str	r3, [sp, #20]
 8003c4e:	42b5      	cmp	r5, r6
 8003c50:	d00b      	beq.n	8003c6a <_svfiprintf_r+0x72>
 8003c52:	0032      	movs	r2, r6
 8003c54:	0039      	movs	r1, r7
 8003c56:	9803      	ldr	r0, [sp, #12]
 8003c58:	f7ff ff6e 	bl	8003b38 <__ssputs_r>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d100      	bne.n	8003c62 <_svfiprintf_r+0x6a>
 8003c60:	e0ae      	b.n	8003dc0 <_svfiprintf_r+0x1c8>
 8003c62:	6963      	ldr	r3, [r4, #20]
 8003c64:	9a05      	ldr	r2, [sp, #20]
 8003c66:	189b      	adds	r3, r3, r2
 8003c68:	6163      	str	r3, [r4, #20]
 8003c6a:	782b      	ldrb	r3, [r5, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d100      	bne.n	8003c72 <_svfiprintf_r+0x7a>
 8003c70:	e0a6      	b.n	8003dc0 <_svfiprintf_r+0x1c8>
 8003c72:	2201      	movs	r2, #1
 8003c74:	2300      	movs	r3, #0
 8003c76:	4252      	negs	r2, r2
 8003c78:	6062      	str	r2, [r4, #4]
 8003c7a:	a904      	add	r1, sp, #16
 8003c7c:	3254      	adds	r2, #84	@ 0x54
 8003c7e:	1852      	adds	r2, r2, r1
 8003c80:	1c6e      	adds	r6, r5, #1
 8003c82:	6023      	str	r3, [r4, #0]
 8003c84:	60e3      	str	r3, [r4, #12]
 8003c86:	60a3      	str	r3, [r4, #8]
 8003c88:	7013      	strb	r3, [r2, #0]
 8003c8a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003c8c:	4b54      	ldr	r3, [pc, #336]	@ (8003de0 <_svfiprintf_r+0x1e8>)
 8003c8e:	2205      	movs	r2, #5
 8003c90:	0018      	movs	r0, r3
 8003c92:	7831      	ldrb	r1, [r6, #0]
 8003c94:	9305      	str	r3, [sp, #20]
 8003c96:	f000 fa51 	bl	800413c <memchr>
 8003c9a:	1c75      	adds	r5, r6, #1
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d11f      	bne.n	8003ce0 <_svfiprintf_r+0xe8>
 8003ca0:	6822      	ldr	r2, [r4, #0]
 8003ca2:	06d3      	lsls	r3, r2, #27
 8003ca4:	d504      	bpl.n	8003cb0 <_svfiprintf_r+0xb8>
 8003ca6:	2353      	movs	r3, #83	@ 0x53
 8003ca8:	a904      	add	r1, sp, #16
 8003caa:	185b      	adds	r3, r3, r1
 8003cac:	2120      	movs	r1, #32
 8003cae:	7019      	strb	r1, [r3, #0]
 8003cb0:	0713      	lsls	r3, r2, #28
 8003cb2:	d504      	bpl.n	8003cbe <_svfiprintf_r+0xc6>
 8003cb4:	2353      	movs	r3, #83	@ 0x53
 8003cb6:	a904      	add	r1, sp, #16
 8003cb8:	185b      	adds	r3, r3, r1
 8003cba:	212b      	movs	r1, #43	@ 0x2b
 8003cbc:	7019      	strb	r1, [r3, #0]
 8003cbe:	7833      	ldrb	r3, [r6, #0]
 8003cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cc2:	d016      	beq.n	8003cf2 <_svfiprintf_r+0xfa>
 8003cc4:	0035      	movs	r5, r6
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	200a      	movs	r0, #10
 8003cca:	68e3      	ldr	r3, [r4, #12]
 8003ccc:	782a      	ldrb	r2, [r5, #0]
 8003cce:	1c6e      	adds	r6, r5, #1
 8003cd0:	3a30      	subs	r2, #48	@ 0x30
 8003cd2:	2a09      	cmp	r2, #9
 8003cd4:	d950      	bls.n	8003d78 <_svfiprintf_r+0x180>
 8003cd6:	2900      	cmp	r1, #0
 8003cd8:	d111      	bne.n	8003cfe <_svfiprintf_r+0x106>
 8003cda:	e017      	b.n	8003d0c <_svfiprintf_r+0x114>
 8003cdc:	3501      	adds	r5, #1
 8003cde:	e7af      	b.n	8003c40 <_svfiprintf_r+0x48>
 8003ce0:	9b05      	ldr	r3, [sp, #20]
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	1ac0      	subs	r0, r0, r3
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	4083      	lsls	r3, r0
 8003cea:	4313      	orrs	r3, r2
 8003cec:	002e      	movs	r6, r5
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	e7cc      	b.n	8003c8c <_svfiprintf_r+0x94>
 8003cf2:	9b07      	ldr	r3, [sp, #28]
 8003cf4:	1d19      	adds	r1, r3, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	9107      	str	r1, [sp, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db01      	blt.n	8003d02 <_svfiprintf_r+0x10a>
 8003cfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d00:	e004      	b.n	8003d0c <_svfiprintf_r+0x114>
 8003d02:	425b      	negs	r3, r3
 8003d04:	60e3      	str	r3, [r4, #12]
 8003d06:	2302      	movs	r3, #2
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	782b      	ldrb	r3, [r5, #0]
 8003d0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d10:	d10c      	bne.n	8003d2c <_svfiprintf_r+0x134>
 8003d12:	786b      	ldrb	r3, [r5, #1]
 8003d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d16:	d134      	bne.n	8003d82 <_svfiprintf_r+0x18a>
 8003d18:	9b07      	ldr	r3, [sp, #28]
 8003d1a:	3502      	adds	r5, #2
 8003d1c:	1d1a      	adds	r2, r3, #4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	9207      	str	r2, [sp, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	da01      	bge.n	8003d2a <_svfiprintf_r+0x132>
 8003d26:	2301      	movs	r3, #1
 8003d28:	425b      	negs	r3, r3
 8003d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d2c:	4e2d      	ldr	r6, [pc, #180]	@ (8003de4 <_svfiprintf_r+0x1ec>)
 8003d2e:	2203      	movs	r2, #3
 8003d30:	0030      	movs	r0, r6
 8003d32:	7829      	ldrb	r1, [r5, #0]
 8003d34:	f000 fa02 	bl	800413c <memchr>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d006      	beq.n	8003d4a <_svfiprintf_r+0x152>
 8003d3c:	2340      	movs	r3, #64	@ 0x40
 8003d3e:	1b80      	subs	r0, r0, r6
 8003d40:	4083      	lsls	r3, r0
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	3501      	adds	r5, #1
 8003d46:	4313      	orrs	r3, r2
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	7829      	ldrb	r1, [r5, #0]
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	4826      	ldr	r0, [pc, #152]	@ (8003de8 <_svfiprintf_r+0x1f0>)
 8003d50:	1c6e      	adds	r6, r5, #1
 8003d52:	7621      	strb	r1, [r4, #24]
 8003d54:	f000 f9f2 	bl	800413c <memchr>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d038      	beq.n	8003dce <_svfiprintf_r+0x1d6>
 8003d5c:	4b23      	ldr	r3, [pc, #140]	@ (8003dec <_svfiprintf_r+0x1f4>)
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d122      	bne.n	8003da8 <_svfiprintf_r+0x1b0>
 8003d62:	2207      	movs	r2, #7
 8003d64:	9b07      	ldr	r3, [sp, #28]
 8003d66:	3307      	adds	r3, #7
 8003d68:	4393      	bics	r3, r2
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	9307      	str	r3, [sp, #28]
 8003d6e:	6963      	ldr	r3, [r4, #20]
 8003d70:	9a04      	ldr	r2, [sp, #16]
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	6163      	str	r3, [r4, #20]
 8003d76:	e762      	b.n	8003c3e <_svfiprintf_r+0x46>
 8003d78:	4343      	muls	r3, r0
 8003d7a:	0035      	movs	r5, r6
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	e7a4      	b.n	8003ccc <_svfiprintf_r+0xd4>
 8003d82:	2300      	movs	r3, #0
 8003d84:	200a      	movs	r0, #10
 8003d86:	0019      	movs	r1, r3
 8003d88:	3501      	adds	r5, #1
 8003d8a:	6063      	str	r3, [r4, #4]
 8003d8c:	782a      	ldrb	r2, [r5, #0]
 8003d8e:	1c6e      	adds	r6, r5, #1
 8003d90:	3a30      	subs	r2, #48	@ 0x30
 8003d92:	2a09      	cmp	r2, #9
 8003d94:	d903      	bls.n	8003d9e <_svfiprintf_r+0x1a6>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0c8      	beq.n	8003d2c <_svfiprintf_r+0x134>
 8003d9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8003d9c:	e7c6      	b.n	8003d2c <_svfiprintf_r+0x134>
 8003d9e:	4341      	muls	r1, r0
 8003da0:	0035      	movs	r5, r6
 8003da2:	2301      	movs	r3, #1
 8003da4:	1889      	adds	r1, r1, r2
 8003da6:	e7f1      	b.n	8003d8c <_svfiprintf_r+0x194>
 8003da8:	aa07      	add	r2, sp, #28
 8003daa:	9200      	str	r2, [sp, #0]
 8003dac:	0021      	movs	r1, r4
 8003dae:	003a      	movs	r2, r7
 8003db0:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <_svfiprintf_r+0x1f8>)
 8003db2:	9803      	ldr	r0, [sp, #12]
 8003db4:	e000      	b.n	8003db8 <_svfiprintf_r+0x1c0>
 8003db6:	bf00      	nop
 8003db8:	9004      	str	r0, [sp, #16]
 8003dba:	9b04      	ldr	r3, [sp, #16]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	d1d6      	bne.n	8003d6e <_svfiprintf_r+0x176>
 8003dc0:	89bb      	ldrh	r3, [r7, #12]
 8003dc2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003dc4:	065b      	lsls	r3, r3, #25
 8003dc6:	d500      	bpl.n	8003dca <_svfiprintf_r+0x1d2>
 8003dc8:	e72c      	b.n	8003c24 <_svfiprintf_r+0x2c>
 8003dca:	b021      	add	sp, #132	@ 0x84
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	aa07      	add	r2, sp, #28
 8003dd0:	9200      	str	r2, [sp, #0]
 8003dd2:	0021      	movs	r1, r4
 8003dd4:	003a      	movs	r2, r7
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <_svfiprintf_r+0x1f8>)
 8003dd8:	9803      	ldr	r0, [sp, #12]
 8003dda:	f000 f87b 	bl	8003ed4 <_printf_i>
 8003dde:	e7eb      	b.n	8003db8 <_svfiprintf_r+0x1c0>
 8003de0:	08004318 	.word	0x08004318
 8003de4:	0800431e 	.word	0x0800431e
 8003de8:	08004322 	.word	0x08004322
 8003dec:	00000000 	.word	0x00000000
 8003df0:	08003b39 	.word	0x08003b39

08003df4 <_printf_common>:
 8003df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003df6:	0016      	movs	r6, r2
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	688a      	ldr	r2, [r1, #8]
 8003dfc:	690b      	ldr	r3, [r1, #16]
 8003dfe:	000c      	movs	r4, r1
 8003e00:	9000      	str	r0, [sp, #0]
 8003e02:	4293      	cmp	r3, r2
 8003e04:	da00      	bge.n	8003e08 <_printf_common+0x14>
 8003e06:	0013      	movs	r3, r2
 8003e08:	0022      	movs	r2, r4
 8003e0a:	6033      	str	r3, [r6, #0]
 8003e0c:	3243      	adds	r2, #67	@ 0x43
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	2a00      	cmp	r2, #0
 8003e12:	d001      	beq.n	8003e18 <_printf_common+0x24>
 8003e14:	3301      	adds	r3, #1
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	069b      	lsls	r3, r3, #26
 8003e1c:	d502      	bpl.n	8003e24 <_printf_common+0x30>
 8003e1e:	6833      	ldr	r3, [r6, #0]
 8003e20:	3302      	adds	r3, #2
 8003e22:	6033      	str	r3, [r6, #0]
 8003e24:	6822      	ldr	r2, [r4, #0]
 8003e26:	2306      	movs	r3, #6
 8003e28:	0015      	movs	r5, r2
 8003e2a:	401d      	ands	r5, r3
 8003e2c:	421a      	tst	r2, r3
 8003e2e:	d027      	beq.n	8003e80 <_printf_common+0x8c>
 8003e30:	0023      	movs	r3, r4
 8003e32:	3343      	adds	r3, #67	@ 0x43
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	1e5a      	subs	r2, r3, #1
 8003e38:	4193      	sbcs	r3, r2
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	0692      	lsls	r2, r2, #26
 8003e3e:	d430      	bmi.n	8003ea2 <_printf_common+0xae>
 8003e40:	0022      	movs	r2, r4
 8003e42:	9901      	ldr	r1, [sp, #4]
 8003e44:	9800      	ldr	r0, [sp, #0]
 8003e46:	9d08      	ldr	r5, [sp, #32]
 8003e48:	3243      	adds	r2, #67	@ 0x43
 8003e4a:	47a8      	blx	r5
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d025      	beq.n	8003e9c <_printf_common+0xa8>
 8003e50:	2206      	movs	r2, #6
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	2500      	movs	r5, #0
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d105      	bne.n	8003e68 <_printf_common+0x74>
 8003e5c:	6833      	ldr	r3, [r6, #0]
 8003e5e:	68e5      	ldr	r5, [r4, #12]
 8003e60:	1aed      	subs	r5, r5, r3
 8003e62:	43eb      	mvns	r3, r5
 8003e64:	17db      	asrs	r3, r3, #31
 8003e66:	401d      	ands	r5, r3
 8003e68:	68a3      	ldr	r3, [r4, #8]
 8003e6a:	6922      	ldr	r2, [r4, #16]
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	dd01      	ble.n	8003e74 <_printf_common+0x80>
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	18ed      	adds	r5, r5, r3
 8003e74:	2600      	movs	r6, #0
 8003e76:	42b5      	cmp	r5, r6
 8003e78:	d120      	bne.n	8003ebc <_printf_common+0xc8>
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e010      	b.n	8003ea0 <_printf_common+0xac>
 8003e7e:	3501      	adds	r5, #1
 8003e80:	68e3      	ldr	r3, [r4, #12]
 8003e82:	6832      	ldr	r2, [r6, #0]
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	42ab      	cmp	r3, r5
 8003e88:	ddd2      	ble.n	8003e30 <_printf_common+0x3c>
 8003e8a:	0022      	movs	r2, r4
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	9901      	ldr	r1, [sp, #4]
 8003e90:	9800      	ldr	r0, [sp, #0]
 8003e92:	9f08      	ldr	r7, [sp, #32]
 8003e94:	3219      	adds	r2, #25
 8003e96:	47b8      	blx	r7
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d1f0      	bne.n	8003e7e <_printf_common+0x8a>
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	4240      	negs	r0, r0
 8003ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ea2:	2030      	movs	r0, #48	@ 0x30
 8003ea4:	18e1      	adds	r1, r4, r3
 8003ea6:	3143      	adds	r1, #67	@ 0x43
 8003ea8:	7008      	strb	r0, [r1, #0]
 8003eaa:	0021      	movs	r1, r4
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	3145      	adds	r1, #69	@ 0x45
 8003eb0:	7809      	ldrb	r1, [r1, #0]
 8003eb2:	18a2      	adds	r2, r4, r2
 8003eb4:	3243      	adds	r2, #67	@ 0x43
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	7011      	strb	r1, [r2, #0]
 8003eba:	e7c1      	b.n	8003e40 <_printf_common+0x4c>
 8003ebc:	0022      	movs	r2, r4
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	9901      	ldr	r1, [sp, #4]
 8003ec2:	9800      	ldr	r0, [sp, #0]
 8003ec4:	9f08      	ldr	r7, [sp, #32]
 8003ec6:	321a      	adds	r2, #26
 8003ec8:	47b8      	blx	r7
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d0e6      	beq.n	8003e9c <_printf_common+0xa8>
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7d1      	b.n	8003e76 <_printf_common+0x82>
	...

08003ed4 <_printf_i>:
 8003ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed6:	b08b      	sub	sp, #44	@ 0x2c
 8003ed8:	9206      	str	r2, [sp, #24]
 8003eda:	000a      	movs	r2, r1
 8003edc:	3243      	adds	r2, #67	@ 0x43
 8003ede:	9307      	str	r3, [sp, #28]
 8003ee0:	9005      	str	r0, [sp, #20]
 8003ee2:	9203      	str	r2, [sp, #12]
 8003ee4:	7e0a      	ldrb	r2, [r1, #24]
 8003ee6:	000c      	movs	r4, r1
 8003ee8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003eea:	2a78      	cmp	r2, #120	@ 0x78
 8003eec:	d809      	bhi.n	8003f02 <_printf_i+0x2e>
 8003eee:	2a62      	cmp	r2, #98	@ 0x62
 8003ef0:	d80b      	bhi.n	8003f0a <_printf_i+0x36>
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	d100      	bne.n	8003ef8 <_printf_i+0x24>
 8003ef6:	e0bc      	b.n	8004072 <_printf_i+0x19e>
 8003ef8:	497b      	ldr	r1, [pc, #492]	@ (80040e8 <_printf_i+0x214>)
 8003efa:	9104      	str	r1, [sp, #16]
 8003efc:	2a58      	cmp	r2, #88	@ 0x58
 8003efe:	d100      	bne.n	8003f02 <_printf_i+0x2e>
 8003f00:	e090      	b.n	8004024 <_printf_i+0x150>
 8003f02:	0025      	movs	r5, r4
 8003f04:	3542      	adds	r5, #66	@ 0x42
 8003f06:	702a      	strb	r2, [r5, #0]
 8003f08:	e022      	b.n	8003f50 <_printf_i+0x7c>
 8003f0a:	0010      	movs	r0, r2
 8003f0c:	3863      	subs	r0, #99	@ 0x63
 8003f0e:	2815      	cmp	r0, #21
 8003f10:	d8f7      	bhi.n	8003f02 <_printf_i+0x2e>
 8003f12:	f7fc f8fd 	bl	8000110 <__gnu_thumb1_case_shi>
 8003f16:	0016      	.short	0x0016
 8003f18:	fff6001f 	.word	0xfff6001f
 8003f1c:	fff6fff6 	.word	0xfff6fff6
 8003f20:	001ffff6 	.word	0x001ffff6
 8003f24:	fff6fff6 	.word	0xfff6fff6
 8003f28:	fff6fff6 	.word	0xfff6fff6
 8003f2c:	003600a1 	.word	0x003600a1
 8003f30:	fff60080 	.word	0xfff60080
 8003f34:	00b2fff6 	.word	0x00b2fff6
 8003f38:	0036fff6 	.word	0x0036fff6
 8003f3c:	fff6fff6 	.word	0xfff6fff6
 8003f40:	0084      	.short	0x0084
 8003f42:	0025      	movs	r5, r4
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	3542      	adds	r5, #66	@ 0x42
 8003f48:	1d11      	adds	r1, r2, #4
 8003f4a:	6019      	str	r1, [r3, #0]
 8003f4c:	6813      	ldr	r3, [r2, #0]
 8003f4e:	702b      	strb	r3, [r5, #0]
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0a0      	b.n	8004096 <_printf_i+0x1c2>
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	6809      	ldr	r1, [r1, #0]
 8003f58:	1d02      	adds	r2, r0, #4
 8003f5a:	060d      	lsls	r5, r1, #24
 8003f5c:	d50b      	bpl.n	8003f76 <_printf_i+0xa2>
 8003f5e:	6806      	ldr	r6, [r0, #0]
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	2e00      	cmp	r6, #0
 8003f64:	da03      	bge.n	8003f6e <_printf_i+0x9a>
 8003f66:	232d      	movs	r3, #45	@ 0x2d
 8003f68:	9a03      	ldr	r2, [sp, #12]
 8003f6a:	4276      	negs	r6, r6
 8003f6c:	7013      	strb	r3, [r2, #0]
 8003f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80040e8 <_printf_i+0x214>)
 8003f70:	270a      	movs	r7, #10
 8003f72:	9304      	str	r3, [sp, #16]
 8003f74:	e018      	b.n	8003fa8 <_printf_i+0xd4>
 8003f76:	6806      	ldr	r6, [r0, #0]
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	0649      	lsls	r1, r1, #25
 8003f7c:	d5f1      	bpl.n	8003f62 <_printf_i+0x8e>
 8003f7e:	b236      	sxth	r6, r6
 8003f80:	e7ef      	b.n	8003f62 <_printf_i+0x8e>
 8003f82:	6808      	ldr	r0, [r1, #0]
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	c940      	ldmia	r1!, {r6}
 8003f88:	0605      	lsls	r5, r0, #24
 8003f8a:	d402      	bmi.n	8003f92 <_printf_i+0xbe>
 8003f8c:	0640      	lsls	r0, r0, #25
 8003f8e:	d500      	bpl.n	8003f92 <_printf_i+0xbe>
 8003f90:	b2b6      	uxth	r6, r6
 8003f92:	6019      	str	r1, [r3, #0]
 8003f94:	4b54      	ldr	r3, [pc, #336]	@ (80040e8 <_printf_i+0x214>)
 8003f96:	270a      	movs	r7, #10
 8003f98:	9304      	str	r3, [sp, #16]
 8003f9a:	2a6f      	cmp	r2, #111	@ 0x6f
 8003f9c:	d100      	bne.n	8003fa0 <_printf_i+0xcc>
 8003f9e:	3f02      	subs	r7, #2
 8003fa0:	0023      	movs	r3, r4
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	3343      	adds	r3, #67	@ 0x43
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	6863      	ldr	r3, [r4, #4]
 8003faa:	60a3      	str	r3, [r4, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	db03      	blt.n	8003fb8 <_printf_i+0xe4>
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	6022      	str	r2, [r4, #0]
 8003fb8:	2e00      	cmp	r6, #0
 8003fba:	d102      	bne.n	8003fc2 <_printf_i+0xee>
 8003fbc:	9d03      	ldr	r5, [sp, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <_printf_i+0x108>
 8003fc2:	9d03      	ldr	r5, [sp, #12]
 8003fc4:	0030      	movs	r0, r6
 8003fc6:	0039      	movs	r1, r7
 8003fc8:	f7fc f932 	bl	8000230 <__aeabi_uidivmod>
 8003fcc:	9b04      	ldr	r3, [sp, #16]
 8003fce:	3d01      	subs	r5, #1
 8003fd0:	5c5b      	ldrb	r3, [r3, r1]
 8003fd2:	702b      	strb	r3, [r5, #0]
 8003fd4:	0033      	movs	r3, r6
 8003fd6:	0006      	movs	r6, r0
 8003fd8:	429f      	cmp	r7, r3
 8003fda:	d9f3      	bls.n	8003fc4 <_printf_i+0xf0>
 8003fdc:	2f08      	cmp	r7, #8
 8003fde:	d109      	bne.n	8003ff4 <_printf_i+0x120>
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	07db      	lsls	r3, r3, #31
 8003fe4:	d506      	bpl.n	8003ff4 <_printf_i+0x120>
 8003fe6:	6862      	ldr	r2, [r4, #4]
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	dc02      	bgt.n	8003ff4 <_printf_i+0x120>
 8003fee:	2330      	movs	r3, #48	@ 0x30
 8003ff0:	3d01      	subs	r5, #1
 8003ff2:	702b      	strb	r3, [r5, #0]
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	1b5b      	subs	r3, r3, r5
 8003ff8:	6123      	str	r3, [r4, #16]
 8003ffa:	9b07      	ldr	r3, [sp, #28]
 8003ffc:	0021      	movs	r1, r4
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	9805      	ldr	r0, [sp, #20]
 8004002:	9b06      	ldr	r3, [sp, #24]
 8004004:	aa09      	add	r2, sp, #36	@ 0x24
 8004006:	f7ff fef5 	bl	8003df4 <_printf_common>
 800400a:	3001      	adds	r0, #1
 800400c:	d148      	bne.n	80040a0 <_printf_i+0x1cc>
 800400e:	2001      	movs	r0, #1
 8004010:	4240      	negs	r0, r0
 8004012:	b00b      	add	sp, #44	@ 0x2c
 8004014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004016:	2220      	movs	r2, #32
 8004018:	6809      	ldr	r1, [r1, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	6022      	str	r2, [r4, #0]
 800401e:	2278      	movs	r2, #120	@ 0x78
 8004020:	4932      	ldr	r1, [pc, #200]	@ (80040ec <_printf_i+0x218>)
 8004022:	9104      	str	r1, [sp, #16]
 8004024:	0021      	movs	r1, r4
 8004026:	3145      	adds	r1, #69	@ 0x45
 8004028:	700a      	strb	r2, [r1, #0]
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	6822      	ldr	r2, [r4, #0]
 800402e:	c940      	ldmia	r1!, {r6}
 8004030:	0610      	lsls	r0, r2, #24
 8004032:	d402      	bmi.n	800403a <_printf_i+0x166>
 8004034:	0650      	lsls	r0, r2, #25
 8004036:	d500      	bpl.n	800403a <_printf_i+0x166>
 8004038:	b2b6      	uxth	r6, r6
 800403a:	6019      	str	r1, [r3, #0]
 800403c:	07d3      	lsls	r3, r2, #31
 800403e:	d502      	bpl.n	8004046 <_printf_i+0x172>
 8004040:	2320      	movs	r3, #32
 8004042:	4313      	orrs	r3, r2
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	2e00      	cmp	r6, #0
 8004048:	d001      	beq.n	800404e <_printf_i+0x17a>
 800404a:	2710      	movs	r7, #16
 800404c:	e7a8      	b.n	8003fa0 <_printf_i+0xcc>
 800404e:	2220      	movs	r2, #32
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	4393      	bics	r3, r2
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	e7f8      	b.n	800404a <_printf_i+0x176>
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	680d      	ldr	r5, [r1, #0]
 800405c:	1d10      	adds	r0, r2, #4
 800405e:	6949      	ldr	r1, [r1, #20]
 8004060:	6018      	str	r0, [r3, #0]
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	062e      	lsls	r6, r5, #24
 8004066:	d501      	bpl.n	800406c <_printf_i+0x198>
 8004068:	6019      	str	r1, [r3, #0]
 800406a:	e002      	b.n	8004072 <_printf_i+0x19e>
 800406c:	066d      	lsls	r5, r5, #25
 800406e:	d5fb      	bpl.n	8004068 <_printf_i+0x194>
 8004070:	8019      	strh	r1, [r3, #0]
 8004072:	2300      	movs	r3, #0
 8004074:	9d03      	ldr	r5, [sp, #12]
 8004076:	6123      	str	r3, [r4, #16]
 8004078:	e7bf      	b.n	8003ffa <_printf_i+0x126>
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	1d11      	adds	r1, r2, #4
 800407e:	6019      	str	r1, [r3, #0]
 8004080:	6815      	ldr	r5, [r2, #0]
 8004082:	2100      	movs	r1, #0
 8004084:	0028      	movs	r0, r5
 8004086:	6862      	ldr	r2, [r4, #4]
 8004088:	f000 f858 	bl	800413c <memchr>
 800408c:	2800      	cmp	r0, #0
 800408e:	d001      	beq.n	8004094 <_printf_i+0x1c0>
 8004090:	1b40      	subs	r0, r0, r5
 8004092:	6060      	str	r0, [r4, #4]
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	2300      	movs	r3, #0
 800409a:	9a03      	ldr	r2, [sp, #12]
 800409c:	7013      	strb	r3, [r2, #0]
 800409e:	e7ac      	b.n	8003ffa <_printf_i+0x126>
 80040a0:	002a      	movs	r2, r5
 80040a2:	6923      	ldr	r3, [r4, #16]
 80040a4:	9906      	ldr	r1, [sp, #24]
 80040a6:	9805      	ldr	r0, [sp, #20]
 80040a8:	9d07      	ldr	r5, [sp, #28]
 80040aa:	47a8      	blx	r5
 80040ac:	3001      	adds	r0, #1
 80040ae:	d0ae      	beq.n	800400e <_printf_i+0x13a>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	079b      	lsls	r3, r3, #30
 80040b4:	d415      	bmi.n	80040e2 <_printf_i+0x20e>
 80040b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040b8:	68e0      	ldr	r0, [r4, #12]
 80040ba:	4298      	cmp	r0, r3
 80040bc:	daa9      	bge.n	8004012 <_printf_i+0x13e>
 80040be:	0018      	movs	r0, r3
 80040c0:	e7a7      	b.n	8004012 <_printf_i+0x13e>
 80040c2:	0022      	movs	r2, r4
 80040c4:	2301      	movs	r3, #1
 80040c6:	9906      	ldr	r1, [sp, #24]
 80040c8:	9805      	ldr	r0, [sp, #20]
 80040ca:	9e07      	ldr	r6, [sp, #28]
 80040cc:	3219      	adds	r2, #25
 80040ce:	47b0      	blx	r6
 80040d0:	3001      	adds	r0, #1
 80040d2:	d09c      	beq.n	800400e <_printf_i+0x13a>
 80040d4:	3501      	adds	r5, #1
 80040d6:	68e3      	ldr	r3, [r4, #12]
 80040d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	42ab      	cmp	r3, r5
 80040de:	dcf0      	bgt.n	80040c2 <_printf_i+0x1ee>
 80040e0:	e7e9      	b.n	80040b6 <_printf_i+0x1e2>
 80040e2:	2500      	movs	r5, #0
 80040e4:	e7f7      	b.n	80040d6 <_printf_i+0x202>
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	08004329 	.word	0x08004329
 80040ec:	0800433a 	.word	0x0800433a

080040f0 <memmove>:
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4288      	cmp	r0, r1
 80040f4:	d806      	bhi.n	8004104 <memmove+0x14>
 80040f6:	2300      	movs	r3, #0
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d008      	beq.n	800410e <memmove+0x1e>
 80040fc:	5ccc      	ldrb	r4, [r1, r3]
 80040fe:	54c4      	strb	r4, [r0, r3]
 8004100:	3301      	adds	r3, #1
 8004102:	e7f9      	b.n	80040f8 <memmove+0x8>
 8004104:	188b      	adds	r3, r1, r2
 8004106:	4298      	cmp	r0, r3
 8004108:	d2f5      	bcs.n	80040f6 <memmove+0x6>
 800410a:	3a01      	subs	r2, #1
 800410c:	d200      	bcs.n	8004110 <memmove+0x20>
 800410e:	bd10      	pop	{r4, pc}
 8004110:	5c8b      	ldrb	r3, [r1, r2]
 8004112:	5483      	strb	r3, [r0, r2]
 8004114:	e7f9      	b.n	800410a <memmove+0x1a>
	...

08004118 <_sbrk_r>:
 8004118:	2300      	movs	r3, #0
 800411a:	b570      	push	{r4, r5, r6, lr}
 800411c:	4d06      	ldr	r5, [pc, #24]	@ (8004138 <_sbrk_r+0x20>)
 800411e:	0004      	movs	r4, r0
 8004120:	0008      	movs	r0, r1
 8004122:	602b      	str	r3, [r5, #0]
 8004124:	f7fd fa4a 	bl	80015bc <_sbrk>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d103      	bne.n	8004134 <_sbrk_r+0x1c>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d000      	beq.n	8004134 <_sbrk_r+0x1c>
 8004132:	6023      	str	r3, [r4, #0]
 8004134:	bd70      	pop	{r4, r5, r6, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	200002e4 	.word	0x200002e4

0800413c <memchr>:
 800413c:	b2c9      	uxtb	r1, r1
 800413e:	1882      	adds	r2, r0, r2
 8004140:	4290      	cmp	r0, r2
 8004142:	d101      	bne.n	8004148 <memchr+0xc>
 8004144:	2000      	movs	r0, #0
 8004146:	4770      	bx	lr
 8004148:	7803      	ldrb	r3, [r0, #0]
 800414a:	428b      	cmp	r3, r1
 800414c:	d0fb      	beq.n	8004146 <memchr+0xa>
 800414e:	3001      	adds	r0, #1
 8004150:	e7f6      	b.n	8004140 <memchr+0x4>

08004152 <memcpy>:
 8004152:	2300      	movs	r3, #0
 8004154:	b510      	push	{r4, lr}
 8004156:	429a      	cmp	r2, r3
 8004158:	d100      	bne.n	800415c <memcpy+0xa>
 800415a:	bd10      	pop	{r4, pc}
 800415c:	5ccc      	ldrb	r4, [r1, r3]
 800415e:	54c4      	strb	r4, [r0, r3]
 8004160:	3301      	adds	r3, #1
 8004162:	e7f8      	b.n	8004156 <memcpy+0x4>

08004164 <_realloc_r>:
 8004164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004166:	0006      	movs	r6, r0
 8004168:	000c      	movs	r4, r1
 800416a:	0015      	movs	r5, r2
 800416c:	2900      	cmp	r1, #0
 800416e:	d105      	bne.n	800417c <_realloc_r+0x18>
 8004170:	0011      	movs	r1, r2
 8004172:	f7ff fc51 	bl	8003a18 <_malloc_r>
 8004176:	0004      	movs	r4, r0
 8004178:	0020      	movs	r0, r4
 800417a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800417c:	2a00      	cmp	r2, #0
 800417e:	d103      	bne.n	8004188 <_realloc_r+0x24>
 8004180:	f7ff fbde 	bl	8003940 <_free_r>
 8004184:	2400      	movs	r4, #0
 8004186:	e7f7      	b.n	8004178 <_realloc_r+0x14>
 8004188:	f000 f81b 	bl	80041c2 <_malloc_usable_size_r>
 800418c:	0007      	movs	r7, r0
 800418e:	4285      	cmp	r5, r0
 8004190:	d802      	bhi.n	8004198 <_realloc_r+0x34>
 8004192:	0843      	lsrs	r3, r0, #1
 8004194:	42ab      	cmp	r3, r5
 8004196:	d3ef      	bcc.n	8004178 <_realloc_r+0x14>
 8004198:	0029      	movs	r1, r5
 800419a:	0030      	movs	r0, r6
 800419c:	f7ff fc3c 	bl	8003a18 <_malloc_r>
 80041a0:	9001      	str	r0, [sp, #4]
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d0ee      	beq.n	8004184 <_realloc_r+0x20>
 80041a6:	002a      	movs	r2, r5
 80041a8:	42bd      	cmp	r5, r7
 80041aa:	d900      	bls.n	80041ae <_realloc_r+0x4a>
 80041ac:	003a      	movs	r2, r7
 80041ae:	0021      	movs	r1, r4
 80041b0:	9801      	ldr	r0, [sp, #4]
 80041b2:	f7ff ffce 	bl	8004152 <memcpy>
 80041b6:	0021      	movs	r1, r4
 80041b8:	0030      	movs	r0, r6
 80041ba:	f7ff fbc1 	bl	8003940 <_free_r>
 80041be:	9c01      	ldr	r4, [sp, #4]
 80041c0:	e7da      	b.n	8004178 <_realloc_r+0x14>

080041c2 <_malloc_usable_size_r>:
 80041c2:	1f0b      	subs	r3, r1, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	1f18      	subs	r0, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	da01      	bge.n	80041d0 <_malloc_usable_size_r+0xe>
 80041cc:	580b      	ldr	r3, [r1, r0]
 80041ce:	18c0      	adds	r0, r0, r3
 80041d0:	4770      	bx	lr
	...

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr
