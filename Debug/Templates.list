
Templates.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065cc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08006684  08006684  00007684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f8  080067f8  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  080067f8  080067f8  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067f8  080067f8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f8  080067f8  000077f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067fc  080067fc  000077fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006800  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000060  08006860  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08006860  00008398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a05  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c6  00000000  00000000  00018a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001ab58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfd  00000000  00000000  0001ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172cb  00000000  00000000  0001c68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012003  00000000  00000000  00033958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009836d  00000000  00000000  0004595b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddcc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed4  00000000  00000000  000ddd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e1be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000060 	.word	0x20000060
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800666c 	.word	0x0800666c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000064 	.word	0x20000064
 80000fc:	0800666c 	.word	0x0800666c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_fadd>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	46ce      	mov	lr, r9
 8000414:	4647      	mov	r7, r8
 8000416:	0243      	lsls	r3, r0, #9
 8000418:	0a5a      	lsrs	r2, r3, #9
 800041a:	024e      	lsls	r6, r1, #9
 800041c:	0045      	lsls	r5, r0, #1
 800041e:	0fc4      	lsrs	r4, r0, #31
 8000420:	0048      	lsls	r0, r1, #1
 8000422:	4691      	mov	r9, r2
 8000424:	0e2d      	lsrs	r5, r5, #24
 8000426:	0a72      	lsrs	r2, r6, #9
 8000428:	0e00      	lsrs	r0, r0, #24
 800042a:	4694      	mov	ip, r2
 800042c:	b580      	push	{r7, lr}
 800042e:	099b      	lsrs	r3, r3, #6
 8000430:	0fc9      	lsrs	r1, r1, #31
 8000432:	09b6      	lsrs	r6, r6, #6
 8000434:	1a2a      	subs	r2, r5, r0
 8000436:	428c      	cmp	r4, r1
 8000438:	d021      	beq.n	800047e <__aeabi_fadd+0x6e>
 800043a:	2a00      	cmp	r2, #0
 800043c:	dd0d      	ble.n	800045a <__aeabi_fadd+0x4a>
 800043e:	2800      	cmp	r0, #0
 8000440:	d12d      	bne.n	800049e <__aeabi_fadd+0x8e>
 8000442:	2e00      	cmp	r6, #0
 8000444:	d100      	bne.n	8000448 <__aeabi_fadd+0x38>
 8000446:	e08d      	b.n	8000564 <__aeabi_fadd+0x154>
 8000448:	1e51      	subs	r1, r2, #1
 800044a:	2a01      	cmp	r2, #1
 800044c:	d100      	bne.n	8000450 <__aeabi_fadd+0x40>
 800044e:	e11d      	b.n	800068c <__aeabi_fadd+0x27c>
 8000450:	2aff      	cmp	r2, #255	@ 0xff
 8000452:	d100      	bne.n	8000456 <__aeabi_fadd+0x46>
 8000454:	e0ab      	b.n	80005ae <__aeabi_fadd+0x19e>
 8000456:	000a      	movs	r2, r1
 8000458:	e027      	b.n	80004aa <__aeabi_fadd+0x9a>
 800045a:	2a00      	cmp	r2, #0
 800045c:	d04d      	beq.n	80004fa <__aeabi_fadd+0xea>
 800045e:	1b42      	subs	r2, r0, r5
 8000460:	2d00      	cmp	r5, #0
 8000462:	d000      	beq.n	8000466 <__aeabi_fadd+0x56>
 8000464:	e0cc      	b.n	8000600 <__aeabi_fadd+0x1f0>
 8000466:	2b00      	cmp	r3, #0
 8000468:	d100      	bne.n	800046c <__aeabi_fadd+0x5c>
 800046a:	e079      	b.n	8000560 <__aeabi_fadd+0x150>
 800046c:	1e54      	subs	r4, r2, #1
 800046e:	2a01      	cmp	r2, #1
 8000470:	d100      	bne.n	8000474 <__aeabi_fadd+0x64>
 8000472:	e128      	b.n	80006c6 <__aeabi_fadd+0x2b6>
 8000474:	2aff      	cmp	r2, #255	@ 0xff
 8000476:	d100      	bne.n	800047a <__aeabi_fadd+0x6a>
 8000478:	e097      	b.n	80005aa <__aeabi_fadd+0x19a>
 800047a:	0022      	movs	r2, r4
 800047c:	e0c5      	b.n	800060a <__aeabi_fadd+0x1fa>
 800047e:	2a00      	cmp	r2, #0
 8000480:	dc00      	bgt.n	8000484 <__aeabi_fadd+0x74>
 8000482:	e096      	b.n	80005b2 <__aeabi_fadd+0x1a2>
 8000484:	2800      	cmp	r0, #0
 8000486:	d04f      	beq.n	8000528 <__aeabi_fadd+0x118>
 8000488:	2dff      	cmp	r5, #255	@ 0xff
 800048a:	d100      	bne.n	800048e <__aeabi_fadd+0x7e>
 800048c:	e08f      	b.n	80005ae <__aeabi_fadd+0x19e>
 800048e:	2180      	movs	r1, #128	@ 0x80
 8000490:	04c9      	lsls	r1, r1, #19
 8000492:	430e      	orrs	r6, r1
 8000494:	2a1b      	cmp	r2, #27
 8000496:	dd51      	ble.n	800053c <__aeabi_fadd+0x12c>
 8000498:	002a      	movs	r2, r5
 800049a:	3301      	adds	r3, #1
 800049c:	e018      	b.n	80004d0 <__aeabi_fadd+0xc0>
 800049e:	2dff      	cmp	r5, #255	@ 0xff
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x94>
 80004a2:	e084      	b.n	80005ae <__aeabi_fadd+0x19e>
 80004a4:	2180      	movs	r1, #128	@ 0x80
 80004a6:	04c9      	lsls	r1, r1, #19
 80004a8:	430e      	orrs	r6, r1
 80004aa:	2101      	movs	r1, #1
 80004ac:	2a1b      	cmp	r2, #27
 80004ae:	dc08      	bgt.n	80004c2 <__aeabi_fadd+0xb2>
 80004b0:	0031      	movs	r1, r6
 80004b2:	2020      	movs	r0, #32
 80004b4:	40d1      	lsrs	r1, r2
 80004b6:	1a82      	subs	r2, r0, r2
 80004b8:	4096      	lsls	r6, r2
 80004ba:	0032      	movs	r2, r6
 80004bc:	1e50      	subs	r0, r2, #1
 80004be:	4182      	sbcs	r2, r0
 80004c0:	4311      	orrs	r1, r2
 80004c2:	1a5b      	subs	r3, r3, r1
 80004c4:	015a      	lsls	r2, r3, #5
 80004c6:	d459      	bmi.n	800057c <__aeabi_fadd+0x16c>
 80004c8:	2107      	movs	r1, #7
 80004ca:	002a      	movs	r2, r5
 80004cc:	4019      	ands	r1, r3
 80004ce:	d049      	beq.n	8000564 <__aeabi_fadd+0x154>
 80004d0:	210f      	movs	r1, #15
 80004d2:	4019      	ands	r1, r3
 80004d4:	2904      	cmp	r1, #4
 80004d6:	d000      	beq.n	80004da <__aeabi_fadd+0xca>
 80004d8:	3304      	adds	r3, #4
 80004da:	0159      	lsls	r1, r3, #5
 80004dc:	d542      	bpl.n	8000564 <__aeabi_fadd+0x154>
 80004de:	1c50      	adds	r0, r2, #1
 80004e0:	2afe      	cmp	r2, #254	@ 0xfe
 80004e2:	d03a      	beq.n	800055a <__aeabi_fadd+0x14a>
 80004e4:	019b      	lsls	r3, r3, #6
 80004e6:	b2c0      	uxtb	r0, r0
 80004e8:	0a5b      	lsrs	r3, r3, #9
 80004ea:	05c0      	lsls	r0, r0, #23
 80004ec:	4318      	orrs	r0, r3
 80004ee:	07e4      	lsls	r4, r4, #31
 80004f0:	4320      	orrs	r0, r4
 80004f2:	bcc0      	pop	{r6, r7}
 80004f4:	46b9      	mov	r9, r7
 80004f6:	46b0      	mov	r8, r6
 80004f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004fa:	20fe      	movs	r0, #254	@ 0xfe
 80004fc:	4680      	mov	r8, r0
 80004fe:	1c6f      	adds	r7, r5, #1
 8000500:	0038      	movs	r0, r7
 8000502:	4647      	mov	r7, r8
 8000504:	4207      	tst	r7, r0
 8000506:	d000      	beq.n	800050a <__aeabi_fadd+0xfa>
 8000508:	e08e      	b.n	8000628 <__aeabi_fadd+0x218>
 800050a:	2d00      	cmp	r5, #0
 800050c:	d000      	beq.n	8000510 <__aeabi_fadd+0x100>
 800050e:	e0b4      	b.n	800067a <__aeabi_fadd+0x26a>
 8000510:	2b00      	cmp	r3, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x106>
 8000514:	e0db      	b.n	80006ce <__aeabi_fadd+0x2be>
 8000516:	2e00      	cmp	r6, #0
 8000518:	d06c      	beq.n	80005f4 <__aeabi_fadd+0x1e4>
 800051a:	1b98      	subs	r0, r3, r6
 800051c:	0145      	lsls	r5, r0, #5
 800051e:	d400      	bmi.n	8000522 <__aeabi_fadd+0x112>
 8000520:	e0f7      	b.n	8000712 <__aeabi_fadd+0x302>
 8000522:	000c      	movs	r4, r1
 8000524:	1af3      	subs	r3, r6, r3
 8000526:	e03d      	b.n	80005a4 <__aeabi_fadd+0x194>
 8000528:	2e00      	cmp	r6, #0
 800052a:	d01b      	beq.n	8000564 <__aeabi_fadd+0x154>
 800052c:	1e51      	subs	r1, r2, #1
 800052e:	2a01      	cmp	r2, #1
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x124>
 8000532:	e082      	b.n	800063a <__aeabi_fadd+0x22a>
 8000534:	2aff      	cmp	r2, #255	@ 0xff
 8000536:	d03a      	beq.n	80005ae <__aeabi_fadd+0x19e>
 8000538:	000a      	movs	r2, r1
 800053a:	e7ab      	b.n	8000494 <__aeabi_fadd+0x84>
 800053c:	0031      	movs	r1, r6
 800053e:	2020      	movs	r0, #32
 8000540:	40d1      	lsrs	r1, r2
 8000542:	1a82      	subs	r2, r0, r2
 8000544:	4096      	lsls	r6, r2
 8000546:	0032      	movs	r2, r6
 8000548:	1e50      	subs	r0, r2, #1
 800054a:	4182      	sbcs	r2, r0
 800054c:	430a      	orrs	r2, r1
 800054e:	189b      	adds	r3, r3, r2
 8000550:	015a      	lsls	r2, r3, #5
 8000552:	d5b9      	bpl.n	80004c8 <__aeabi_fadd+0xb8>
 8000554:	1c6a      	adds	r2, r5, #1
 8000556:	2dfe      	cmp	r5, #254	@ 0xfe
 8000558:	d175      	bne.n	8000646 <__aeabi_fadd+0x236>
 800055a:	20ff      	movs	r0, #255	@ 0xff
 800055c:	2300      	movs	r3, #0
 800055e:	e7c4      	b.n	80004ea <__aeabi_fadd+0xda>
 8000560:	000c      	movs	r4, r1
 8000562:	0033      	movs	r3, r6
 8000564:	08db      	lsrs	r3, r3, #3
 8000566:	2aff      	cmp	r2, #255	@ 0xff
 8000568:	d146      	bne.n	80005f8 <__aeabi_fadd+0x1e8>
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f5      	beq.n	800055a <__aeabi_fadd+0x14a>
 800056e:	2280      	movs	r2, #128	@ 0x80
 8000570:	03d2      	lsls	r2, r2, #15
 8000572:	4313      	orrs	r3, r2
 8000574:	025b      	lsls	r3, r3, #9
 8000576:	20ff      	movs	r0, #255	@ 0xff
 8000578:	0a5b      	lsrs	r3, r3, #9
 800057a:	e7b6      	b.n	80004ea <__aeabi_fadd+0xda>
 800057c:	019f      	lsls	r7, r3, #6
 800057e:	09bf      	lsrs	r7, r7, #6
 8000580:	0038      	movs	r0, r7
 8000582:	f001 fe6f 	bl	8002264 <__clzsi2>
 8000586:	3805      	subs	r0, #5
 8000588:	4087      	lsls	r7, r0
 800058a:	4285      	cmp	r5, r0
 800058c:	dc24      	bgt.n	80005d8 <__aeabi_fadd+0x1c8>
 800058e:	003b      	movs	r3, r7
 8000590:	2120      	movs	r1, #32
 8000592:	1b42      	subs	r2, r0, r5
 8000594:	3201      	adds	r2, #1
 8000596:	40d3      	lsrs	r3, r2
 8000598:	1a8a      	subs	r2, r1, r2
 800059a:	4097      	lsls	r7, r2
 800059c:	1e7a      	subs	r2, r7, #1
 800059e:	4197      	sbcs	r7, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	433b      	orrs	r3, r7
 80005a4:	0759      	lsls	r1, r3, #29
 80005a6:	d193      	bne.n	80004d0 <__aeabi_fadd+0xc0>
 80005a8:	e797      	b.n	80004da <__aeabi_fadd+0xca>
 80005aa:	000c      	movs	r4, r1
 80005ac:	0033      	movs	r3, r6
 80005ae:	08db      	lsrs	r3, r3, #3
 80005b0:	e7db      	b.n	800056a <__aeabi_fadd+0x15a>
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	d014      	beq.n	80005e0 <__aeabi_fadd+0x1d0>
 80005b6:	1b42      	subs	r2, r0, r5
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d14b      	bne.n	8000654 <__aeabi_fadd+0x244>
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0d0      	beq.n	8000562 <__aeabi_fadd+0x152>
 80005c0:	1e51      	subs	r1, r2, #1
 80005c2:	2a01      	cmp	r2, #1
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x1b8>
 80005c6:	e09e      	b.n	8000706 <__aeabi_fadd+0x2f6>
 80005c8:	2aff      	cmp	r2, #255	@ 0xff
 80005ca:	d0ef      	beq.n	80005ac <__aeabi_fadd+0x19c>
 80005cc:	000a      	movs	r2, r1
 80005ce:	2a1b      	cmp	r2, #27
 80005d0:	dd5f      	ble.n	8000692 <__aeabi_fadd+0x282>
 80005d2:	0002      	movs	r2, r0
 80005d4:	1c73      	adds	r3, r6, #1
 80005d6:	e77b      	b.n	80004d0 <__aeabi_fadd+0xc0>
 80005d8:	4b50      	ldr	r3, [pc, #320]	@ (800071c <__aeabi_fadd+0x30c>)
 80005da:	1a2a      	subs	r2, r5, r0
 80005dc:	403b      	ands	r3, r7
 80005de:	e7e1      	b.n	80005a4 <__aeabi_fadd+0x194>
 80005e0:	21fe      	movs	r1, #254	@ 0xfe
 80005e2:	1c6a      	adds	r2, r5, #1
 80005e4:	4211      	tst	r1, r2
 80005e6:	d13b      	bne.n	8000660 <__aeabi_fadd+0x250>
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d15d      	bne.n	80006a8 <__aeabi_fadd+0x298>
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d07f      	beq.n	80006f0 <__aeabi_fadd+0x2e0>
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d17f      	bne.n	80006f4 <__aeabi_fadd+0x2e4>
 80005f4:	2200      	movs	r2, #0
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	025b      	lsls	r3, r3, #9
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	b2d0      	uxtb	r0, r2
 80005fe:	e774      	b.n	80004ea <__aeabi_fadd+0xda>
 8000600:	28ff      	cmp	r0, #255	@ 0xff
 8000602:	d0d2      	beq.n	80005aa <__aeabi_fadd+0x19a>
 8000604:	2480      	movs	r4, #128	@ 0x80
 8000606:	04e4      	lsls	r4, r4, #19
 8000608:	4323      	orrs	r3, r4
 800060a:	2401      	movs	r4, #1
 800060c:	2a1b      	cmp	r2, #27
 800060e:	dc07      	bgt.n	8000620 <__aeabi_fadd+0x210>
 8000610:	001c      	movs	r4, r3
 8000612:	2520      	movs	r5, #32
 8000614:	40d4      	lsrs	r4, r2
 8000616:	1aaa      	subs	r2, r5, r2
 8000618:	4093      	lsls	r3, r2
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	4193      	sbcs	r3, r2
 800061e:	431c      	orrs	r4, r3
 8000620:	1b33      	subs	r3, r6, r4
 8000622:	0005      	movs	r5, r0
 8000624:	000c      	movs	r4, r1
 8000626:	e74d      	b.n	80004c4 <__aeabi_fadd+0xb4>
 8000628:	1b9f      	subs	r7, r3, r6
 800062a:	017a      	lsls	r2, r7, #5
 800062c:	d422      	bmi.n	8000674 <__aeabi_fadd+0x264>
 800062e:	2f00      	cmp	r7, #0
 8000630:	d1a6      	bne.n	8000580 <__aeabi_fadd+0x170>
 8000632:	2400      	movs	r4, #0
 8000634:	2000      	movs	r0, #0
 8000636:	2300      	movs	r3, #0
 8000638:	e757      	b.n	80004ea <__aeabi_fadd+0xda>
 800063a:	199b      	adds	r3, r3, r6
 800063c:	2501      	movs	r5, #1
 800063e:	3201      	adds	r2, #1
 8000640:	0159      	lsls	r1, r3, #5
 8000642:	d400      	bmi.n	8000646 <__aeabi_fadd+0x236>
 8000644:	e740      	b.n	80004c8 <__aeabi_fadd+0xb8>
 8000646:	2101      	movs	r1, #1
 8000648:	4835      	ldr	r0, [pc, #212]	@ (8000720 <__aeabi_fadd+0x310>)
 800064a:	4019      	ands	r1, r3
 800064c:	085b      	lsrs	r3, r3, #1
 800064e:	4003      	ands	r3, r0
 8000650:	430b      	orrs	r3, r1
 8000652:	e7a7      	b.n	80005a4 <__aeabi_fadd+0x194>
 8000654:	28ff      	cmp	r0, #255	@ 0xff
 8000656:	d0a9      	beq.n	80005ac <__aeabi_fadd+0x19c>
 8000658:	2180      	movs	r1, #128	@ 0x80
 800065a:	04c9      	lsls	r1, r1, #19
 800065c:	430b      	orrs	r3, r1
 800065e:	e7b6      	b.n	80005ce <__aeabi_fadd+0x1be>
 8000660:	2aff      	cmp	r2, #255	@ 0xff
 8000662:	d100      	bne.n	8000666 <__aeabi_fadd+0x256>
 8000664:	e779      	b.n	800055a <__aeabi_fadd+0x14a>
 8000666:	199b      	adds	r3, r3, r6
 8000668:	085b      	lsrs	r3, r3, #1
 800066a:	0759      	lsls	r1, r3, #29
 800066c:	d000      	beq.n	8000670 <__aeabi_fadd+0x260>
 800066e:	e72f      	b.n	80004d0 <__aeabi_fadd+0xc0>
 8000670:	08db      	lsrs	r3, r3, #3
 8000672:	e7c1      	b.n	80005f8 <__aeabi_fadd+0x1e8>
 8000674:	000c      	movs	r4, r1
 8000676:	1af7      	subs	r7, r6, r3
 8000678:	e782      	b.n	8000580 <__aeabi_fadd+0x170>
 800067a:	2b00      	cmp	r3, #0
 800067c:	d12c      	bne.n	80006d8 <__aeabi_fadd+0x2c8>
 800067e:	2e00      	cmp	r6, #0
 8000680:	d193      	bne.n	80005aa <__aeabi_fadd+0x19a>
 8000682:	2380      	movs	r3, #128	@ 0x80
 8000684:	2400      	movs	r4, #0
 8000686:	20ff      	movs	r0, #255	@ 0xff
 8000688:	03db      	lsls	r3, r3, #15
 800068a:	e72e      	b.n	80004ea <__aeabi_fadd+0xda>
 800068c:	2501      	movs	r5, #1
 800068e:	1b9b      	subs	r3, r3, r6
 8000690:	e718      	b.n	80004c4 <__aeabi_fadd+0xb4>
 8000692:	0019      	movs	r1, r3
 8000694:	2520      	movs	r5, #32
 8000696:	40d1      	lsrs	r1, r2
 8000698:	1aaa      	subs	r2, r5, r2
 800069a:	4093      	lsls	r3, r2
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	4193      	sbcs	r3, r2
 80006a0:	430b      	orrs	r3, r1
 80006a2:	0005      	movs	r5, r0
 80006a4:	199b      	adds	r3, r3, r6
 80006a6:	e753      	b.n	8000550 <__aeabi_fadd+0x140>
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0x29e>
 80006ac:	e77e      	b.n	80005ac <__aeabi_fadd+0x19c>
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x2a4>
 80006b2:	e77c      	b.n	80005ae <__aeabi_fadd+0x19e>
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	03d2      	lsls	r2, r2, #15
 80006b8:	4591      	cmp	r9, r2
 80006ba:	d302      	bcc.n	80006c2 <__aeabi_fadd+0x2b2>
 80006bc:	4594      	cmp	ip, r2
 80006be:	d200      	bcs.n	80006c2 <__aeabi_fadd+0x2b2>
 80006c0:	0033      	movs	r3, r6
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	e753      	b.n	800056e <__aeabi_fadd+0x15e>
 80006c6:	000c      	movs	r4, r1
 80006c8:	1af3      	subs	r3, r6, r3
 80006ca:	3501      	adds	r5, #1
 80006cc:	e6fa      	b.n	80004c4 <__aeabi_fadd+0xb4>
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d0af      	beq.n	8000632 <__aeabi_fadd+0x222>
 80006d2:	000c      	movs	r4, r1
 80006d4:	0033      	movs	r3, r6
 80006d6:	e78d      	b.n	80005f4 <__aeabi_fadd+0x1e4>
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d100      	bne.n	80006de <__aeabi_fadd+0x2ce>
 80006dc:	e767      	b.n	80005ae <__aeabi_fadd+0x19e>
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	03d2      	lsls	r2, r2, #15
 80006e2:	4591      	cmp	r9, r2
 80006e4:	d3ed      	bcc.n	80006c2 <__aeabi_fadd+0x2b2>
 80006e6:	4594      	cmp	ip, r2
 80006e8:	d2eb      	bcs.n	80006c2 <__aeabi_fadd+0x2b2>
 80006ea:	000c      	movs	r4, r1
 80006ec:	0033      	movs	r3, r6
 80006ee:	e7e8      	b.n	80006c2 <__aeabi_fadd+0x2b2>
 80006f0:	0033      	movs	r3, r6
 80006f2:	e77f      	b.n	80005f4 <__aeabi_fadd+0x1e4>
 80006f4:	199b      	adds	r3, r3, r6
 80006f6:	2200      	movs	r2, #0
 80006f8:	0159      	lsls	r1, r3, #5
 80006fa:	d5b9      	bpl.n	8000670 <__aeabi_fadd+0x260>
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <__aeabi_fadd+0x30c>)
 80006fe:	4013      	ands	r3, r2
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	2201      	movs	r2, #1
 8000704:	e778      	b.n	80005f8 <__aeabi_fadd+0x1e8>
 8000706:	199b      	adds	r3, r3, r6
 8000708:	3201      	adds	r2, #1
 800070a:	3501      	adds	r5, #1
 800070c:	0159      	lsls	r1, r3, #5
 800070e:	d49a      	bmi.n	8000646 <__aeabi_fadd+0x236>
 8000710:	e6da      	b.n	80004c8 <__aeabi_fadd+0xb8>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d08d      	beq.n	8000632 <__aeabi_fadd+0x222>
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	e76e      	b.n	80005f8 <__aeabi_fadd+0x1e8>
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	fbffffff 	.word	0xfbffffff
 8000720:	7dffffff 	.word	0x7dffffff

08000724 <__aeabi_fdiv>:
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	464f      	mov	r7, r9
 8000728:	4646      	mov	r6, r8
 800072a:	46d6      	mov	lr, sl
 800072c:	0244      	lsls	r4, r0, #9
 800072e:	b5c0      	push	{r6, r7, lr}
 8000730:	0047      	lsls	r7, r0, #1
 8000732:	1c0e      	adds	r6, r1, #0
 8000734:	0a64      	lsrs	r4, r4, #9
 8000736:	0e3f      	lsrs	r7, r7, #24
 8000738:	0fc5      	lsrs	r5, r0, #31
 800073a:	2f00      	cmp	r7, #0
 800073c:	d03c      	beq.n	80007b8 <__aeabi_fdiv+0x94>
 800073e:	2fff      	cmp	r7, #255	@ 0xff
 8000740:	d042      	beq.n	80007c8 <__aeabi_fdiv+0xa4>
 8000742:	2300      	movs	r3, #0
 8000744:	2280      	movs	r2, #128	@ 0x80
 8000746:	4699      	mov	r9, r3
 8000748:	469a      	mov	sl, r3
 800074a:	00e4      	lsls	r4, r4, #3
 800074c:	04d2      	lsls	r2, r2, #19
 800074e:	4314      	orrs	r4, r2
 8000750:	3f7f      	subs	r7, #127	@ 0x7f
 8000752:	0273      	lsls	r3, r6, #9
 8000754:	0a5b      	lsrs	r3, r3, #9
 8000756:	4698      	mov	r8, r3
 8000758:	0073      	lsls	r3, r6, #1
 800075a:	0e1b      	lsrs	r3, r3, #24
 800075c:	0ff6      	lsrs	r6, r6, #31
 800075e:	2b00      	cmp	r3, #0
 8000760:	d01b      	beq.n	800079a <__aeabi_fdiv+0x76>
 8000762:	2bff      	cmp	r3, #255	@ 0xff
 8000764:	d013      	beq.n	800078e <__aeabi_fdiv+0x6a>
 8000766:	4642      	mov	r2, r8
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	00d2      	lsls	r2, r2, #3
 800076c:	04c9      	lsls	r1, r1, #19
 800076e:	4311      	orrs	r1, r2
 8000770:	4688      	mov	r8, r1
 8000772:	2000      	movs	r0, #0
 8000774:	3b7f      	subs	r3, #127	@ 0x7f
 8000776:	0029      	movs	r1, r5
 8000778:	1aff      	subs	r7, r7, r3
 800077a:	464b      	mov	r3, r9
 800077c:	4071      	eors	r1, r6
 800077e:	b2c9      	uxtb	r1, r1
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d900      	bls.n	8000786 <__aeabi_fdiv+0x62>
 8000784:	e0b5      	b.n	80008f2 <__aeabi_fdiv+0x1ce>
 8000786:	4a74      	ldr	r2, [pc, #464]	@ (8000958 <__aeabi_fdiv+0x234>)
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	58d3      	ldr	r3, [r2, r3]
 800078c:	469f      	mov	pc, r3
 800078e:	4643      	mov	r3, r8
 8000790:	2b00      	cmp	r3, #0
 8000792:	d13f      	bne.n	8000814 <__aeabi_fdiv+0xf0>
 8000794:	3fff      	subs	r7, #255	@ 0xff
 8000796:	3302      	adds	r3, #2
 8000798:	e003      	b.n	80007a2 <__aeabi_fdiv+0x7e>
 800079a:	4643      	mov	r3, r8
 800079c:	2b00      	cmp	r3, #0
 800079e:	d12d      	bne.n	80007fc <__aeabi_fdiv+0xd8>
 80007a0:	2301      	movs	r3, #1
 80007a2:	0029      	movs	r1, r5
 80007a4:	464a      	mov	r2, r9
 80007a6:	4071      	eors	r1, r6
 80007a8:	b2c9      	uxtb	r1, r1
 80007aa:	431a      	orrs	r2, r3
 80007ac:	2a0e      	cmp	r2, #14
 80007ae:	d838      	bhi.n	8000822 <__aeabi_fdiv+0xfe>
 80007b0:	486a      	ldr	r0, [pc, #424]	@ (800095c <__aeabi_fdiv+0x238>)
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	5882      	ldr	r2, [r0, r2]
 80007b6:	4697      	mov	pc, r2
 80007b8:	2c00      	cmp	r4, #0
 80007ba:	d113      	bne.n	80007e4 <__aeabi_fdiv+0xc0>
 80007bc:	2304      	movs	r3, #4
 80007be:	4699      	mov	r9, r3
 80007c0:	3b03      	subs	r3, #3
 80007c2:	2700      	movs	r7, #0
 80007c4:	469a      	mov	sl, r3
 80007c6:	e7c4      	b.n	8000752 <__aeabi_fdiv+0x2e>
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d105      	bne.n	80007d8 <__aeabi_fdiv+0xb4>
 80007cc:	2308      	movs	r3, #8
 80007ce:	4699      	mov	r9, r3
 80007d0:	3b06      	subs	r3, #6
 80007d2:	27ff      	movs	r7, #255	@ 0xff
 80007d4:	469a      	mov	sl, r3
 80007d6:	e7bc      	b.n	8000752 <__aeabi_fdiv+0x2e>
 80007d8:	230c      	movs	r3, #12
 80007da:	4699      	mov	r9, r3
 80007dc:	3b09      	subs	r3, #9
 80007de:	27ff      	movs	r7, #255	@ 0xff
 80007e0:	469a      	mov	sl, r3
 80007e2:	e7b6      	b.n	8000752 <__aeabi_fdiv+0x2e>
 80007e4:	0020      	movs	r0, r4
 80007e6:	f001 fd3d 	bl	8002264 <__clzsi2>
 80007ea:	2776      	movs	r7, #118	@ 0x76
 80007ec:	1f43      	subs	r3, r0, #5
 80007ee:	409c      	lsls	r4, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	427f      	negs	r7, r7
 80007f4:	4699      	mov	r9, r3
 80007f6:	469a      	mov	sl, r3
 80007f8:	1a3f      	subs	r7, r7, r0
 80007fa:	e7aa      	b.n	8000752 <__aeabi_fdiv+0x2e>
 80007fc:	4640      	mov	r0, r8
 80007fe:	f001 fd31 	bl	8002264 <__clzsi2>
 8000802:	4642      	mov	r2, r8
 8000804:	1f43      	subs	r3, r0, #5
 8000806:	409a      	lsls	r2, r3
 8000808:	2376      	movs	r3, #118	@ 0x76
 800080a:	425b      	negs	r3, r3
 800080c:	1a1b      	subs	r3, r3, r0
 800080e:	4690      	mov	r8, r2
 8000810:	2000      	movs	r0, #0
 8000812:	e7b0      	b.n	8000776 <__aeabi_fdiv+0x52>
 8000814:	2303      	movs	r3, #3
 8000816:	464a      	mov	r2, r9
 8000818:	431a      	orrs	r2, r3
 800081a:	4691      	mov	r9, r2
 800081c:	2003      	movs	r0, #3
 800081e:	33fc      	adds	r3, #252	@ 0xfc
 8000820:	e7a9      	b.n	8000776 <__aeabi_fdiv+0x52>
 8000822:	000d      	movs	r5, r1
 8000824:	20ff      	movs	r0, #255	@ 0xff
 8000826:	2200      	movs	r2, #0
 8000828:	05c0      	lsls	r0, r0, #23
 800082a:	07ed      	lsls	r5, r5, #31
 800082c:	4310      	orrs	r0, r2
 800082e:	4328      	orrs	r0, r5
 8000830:	bce0      	pop	{r5, r6, r7}
 8000832:	46ba      	mov	sl, r7
 8000834:	46b1      	mov	r9, r6
 8000836:	46a8      	mov	r8, r5
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083a:	000d      	movs	r5, r1
 800083c:	2000      	movs	r0, #0
 800083e:	2200      	movs	r2, #0
 8000840:	e7f2      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000842:	4653      	mov	r3, sl
 8000844:	2b02      	cmp	r3, #2
 8000846:	d0ed      	beq.n	8000824 <__aeabi_fdiv+0x100>
 8000848:	2b03      	cmp	r3, #3
 800084a:	d033      	beq.n	80008b4 <__aeabi_fdiv+0x190>
 800084c:	46a0      	mov	r8, r4
 800084e:	2b01      	cmp	r3, #1
 8000850:	d105      	bne.n	800085e <__aeabi_fdiv+0x13a>
 8000852:	2000      	movs	r0, #0
 8000854:	2200      	movs	r2, #0
 8000856:	e7e7      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000858:	0035      	movs	r5, r6
 800085a:	2803      	cmp	r0, #3
 800085c:	d07a      	beq.n	8000954 <__aeabi_fdiv+0x230>
 800085e:	003b      	movs	r3, r7
 8000860:	337f      	adds	r3, #127	@ 0x7f
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd2d      	ble.n	80008c2 <__aeabi_fdiv+0x19e>
 8000866:	4642      	mov	r2, r8
 8000868:	0752      	lsls	r2, r2, #29
 800086a:	d007      	beq.n	800087c <__aeabi_fdiv+0x158>
 800086c:	220f      	movs	r2, #15
 800086e:	4641      	mov	r1, r8
 8000870:	400a      	ands	r2, r1
 8000872:	2a04      	cmp	r2, #4
 8000874:	d002      	beq.n	800087c <__aeabi_fdiv+0x158>
 8000876:	2204      	movs	r2, #4
 8000878:	4694      	mov	ip, r2
 800087a:	44e0      	add	r8, ip
 800087c:	4642      	mov	r2, r8
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	d505      	bpl.n	800088e <__aeabi_fdiv+0x16a>
 8000882:	4642      	mov	r2, r8
 8000884:	4b36      	ldr	r3, [pc, #216]	@ (8000960 <__aeabi_fdiv+0x23c>)
 8000886:	401a      	ands	r2, r3
 8000888:	003b      	movs	r3, r7
 800088a:	4690      	mov	r8, r2
 800088c:	3380      	adds	r3, #128	@ 0x80
 800088e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000890:	dcc8      	bgt.n	8000824 <__aeabi_fdiv+0x100>
 8000892:	4642      	mov	r2, r8
 8000894:	0192      	lsls	r2, r2, #6
 8000896:	0a52      	lsrs	r2, r2, #9
 8000898:	b2d8      	uxtb	r0, r3
 800089a:	e7c5      	b.n	8000828 <__aeabi_fdiv+0x104>
 800089c:	2280      	movs	r2, #128	@ 0x80
 800089e:	2500      	movs	r5, #0
 80008a0:	20ff      	movs	r0, #255	@ 0xff
 80008a2:	03d2      	lsls	r2, r2, #15
 80008a4:	e7c0      	b.n	8000828 <__aeabi_fdiv+0x104>
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	03d2      	lsls	r2, r2, #15
 80008aa:	4214      	tst	r4, r2
 80008ac:	d002      	beq.n	80008b4 <__aeabi_fdiv+0x190>
 80008ae:	4643      	mov	r3, r8
 80008b0:	4213      	tst	r3, r2
 80008b2:	d049      	beq.n	8000948 <__aeabi_fdiv+0x224>
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	03d2      	lsls	r2, r2, #15
 80008b8:	4322      	orrs	r2, r4
 80008ba:	0252      	lsls	r2, r2, #9
 80008bc:	20ff      	movs	r0, #255	@ 0xff
 80008be:	0a52      	lsrs	r2, r2, #9
 80008c0:	e7b2      	b.n	8000828 <__aeabi_fdiv+0x104>
 80008c2:	2201      	movs	r2, #1
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	2b1b      	cmp	r3, #27
 80008c8:	dcc3      	bgt.n	8000852 <__aeabi_fdiv+0x12e>
 80008ca:	4642      	mov	r2, r8
 80008cc:	40da      	lsrs	r2, r3
 80008ce:	4643      	mov	r3, r8
 80008d0:	379e      	adds	r7, #158	@ 0x9e
 80008d2:	40bb      	lsls	r3, r7
 80008d4:	1e59      	subs	r1, r3, #1
 80008d6:	418b      	sbcs	r3, r1
 80008d8:	431a      	orrs	r2, r3
 80008da:	0753      	lsls	r3, r2, #29
 80008dc:	d004      	beq.n	80008e8 <__aeabi_fdiv+0x1c4>
 80008de:	230f      	movs	r3, #15
 80008e0:	4013      	ands	r3, r2
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fdiv+0x1c4>
 80008e6:	3204      	adds	r2, #4
 80008e8:	0153      	lsls	r3, r2, #5
 80008ea:	d529      	bpl.n	8000940 <__aeabi_fdiv+0x21c>
 80008ec:	2001      	movs	r0, #1
 80008ee:	2200      	movs	r2, #0
 80008f0:	e79a      	b.n	8000828 <__aeabi_fdiv+0x104>
 80008f2:	4642      	mov	r2, r8
 80008f4:	0163      	lsls	r3, r4, #5
 80008f6:	0155      	lsls	r5, r2, #5
 80008f8:	42ab      	cmp	r3, r5
 80008fa:	d215      	bcs.n	8000928 <__aeabi_fdiv+0x204>
 80008fc:	201b      	movs	r0, #27
 80008fe:	2200      	movs	r2, #0
 8000900:	3f01      	subs	r7, #1
 8000902:	2601      	movs	r6, #1
 8000904:	001c      	movs	r4, r3
 8000906:	0052      	lsls	r2, r2, #1
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2c00      	cmp	r4, #0
 800090c:	db01      	blt.n	8000912 <__aeabi_fdiv+0x1ee>
 800090e:	429d      	cmp	r5, r3
 8000910:	d801      	bhi.n	8000916 <__aeabi_fdiv+0x1f2>
 8000912:	1b5b      	subs	r3, r3, r5
 8000914:	4332      	orrs	r2, r6
 8000916:	3801      	subs	r0, #1
 8000918:	2800      	cmp	r0, #0
 800091a:	d1f3      	bne.n	8000904 <__aeabi_fdiv+0x1e0>
 800091c:	1e58      	subs	r0, r3, #1
 800091e:	4183      	sbcs	r3, r0
 8000920:	4313      	orrs	r3, r2
 8000922:	4698      	mov	r8, r3
 8000924:	000d      	movs	r5, r1
 8000926:	e79a      	b.n	800085e <__aeabi_fdiv+0x13a>
 8000928:	201a      	movs	r0, #26
 800092a:	2201      	movs	r2, #1
 800092c:	1b5b      	subs	r3, r3, r5
 800092e:	e7e8      	b.n	8000902 <__aeabi_fdiv+0x1de>
 8000930:	3b02      	subs	r3, #2
 8000932:	425a      	negs	r2, r3
 8000934:	4153      	adcs	r3, r2
 8000936:	425b      	negs	r3, r3
 8000938:	0035      	movs	r5, r6
 800093a:	2200      	movs	r2, #0
 800093c:	b2d8      	uxtb	r0, r3
 800093e:	e773      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000940:	0192      	lsls	r2, r2, #6
 8000942:	2000      	movs	r0, #0
 8000944:	0a52      	lsrs	r2, r2, #9
 8000946:	e76f      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000948:	431a      	orrs	r2, r3
 800094a:	0252      	lsls	r2, r2, #9
 800094c:	0035      	movs	r5, r6
 800094e:	20ff      	movs	r0, #255	@ 0xff
 8000950:	0a52      	lsrs	r2, r2, #9
 8000952:	e769      	b.n	8000828 <__aeabi_fdiv+0x104>
 8000954:	4644      	mov	r4, r8
 8000956:	e7ad      	b.n	80008b4 <__aeabi_fdiv+0x190>
 8000958:	080066c0 	.word	0x080066c0
 800095c:	08006700 	.word	0x08006700
 8000960:	f7ffffff 	.word	0xf7ffffff

08000964 <__aeabi_fmul>:
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000966:	464f      	mov	r7, r9
 8000968:	4646      	mov	r6, r8
 800096a:	46d6      	mov	lr, sl
 800096c:	0243      	lsls	r3, r0, #9
 800096e:	0a5b      	lsrs	r3, r3, #9
 8000970:	0045      	lsls	r5, r0, #1
 8000972:	b5c0      	push	{r6, r7, lr}
 8000974:	4699      	mov	r9, r3
 8000976:	1c0f      	adds	r7, r1, #0
 8000978:	0e2d      	lsrs	r5, r5, #24
 800097a:	0fc6      	lsrs	r6, r0, #31
 800097c:	2d00      	cmp	r5, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_fmul+0x1e>
 8000980:	e088      	b.n	8000a94 <__aeabi_fmul+0x130>
 8000982:	2dff      	cmp	r5, #255	@ 0xff
 8000984:	d100      	bne.n	8000988 <__aeabi_fmul+0x24>
 8000986:	e08d      	b.n	8000aa4 <__aeabi_fmul+0x140>
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	04d2      	lsls	r2, r2, #19
 800098e:	431a      	orrs	r2, r3
 8000990:	2300      	movs	r3, #0
 8000992:	4691      	mov	r9, r2
 8000994:	4698      	mov	r8, r3
 8000996:	469a      	mov	sl, r3
 8000998:	3d7f      	subs	r5, #127	@ 0x7f
 800099a:	027c      	lsls	r4, r7, #9
 800099c:	007b      	lsls	r3, r7, #1
 800099e:	0a64      	lsrs	r4, r4, #9
 80009a0:	0e1b      	lsrs	r3, r3, #24
 80009a2:	0fff      	lsrs	r7, r7, #31
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d068      	beq.n	8000a7a <__aeabi_fmul+0x116>
 80009a8:	2bff      	cmp	r3, #255	@ 0xff
 80009aa:	d021      	beq.n	80009f0 <__aeabi_fmul+0x8c>
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	00e4      	lsls	r4, r4, #3
 80009b0:	04d2      	lsls	r2, r2, #19
 80009b2:	4314      	orrs	r4, r2
 80009b4:	4642      	mov	r2, r8
 80009b6:	3b7f      	subs	r3, #127	@ 0x7f
 80009b8:	195b      	adds	r3, r3, r5
 80009ba:	2100      	movs	r1, #0
 80009bc:	1c5d      	adds	r5, r3, #1
 80009be:	2a0a      	cmp	r2, #10
 80009c0:	dc2e      	bgt.n	8000a20 <__aeabi_fmul+0xbc>
 80009c2:	407e      	eors	r6, r7
 80009c4:	4642      	mov	r2, r8
 80009c6:	2a02      	cmp	r2, #2
 80009c8:	dc23      	bgt.n	8000a12 <__aeabi_fmul+0xae>
 80009ca:	3a01      	subs	r2, #1
 80009cc:	2a01      	cmp	r2, #1
 80009ce:	d900      	bls.n	80009d2 <__aeabi_fmul+0x6e>
 80009d0:	e0bd      	b.n	8000b4e <__aeabi_fmul+0x1ea>
 80009d2:	2902      	cmp	r1, #2
 80009d4:	d06e      	beq.n	8000ab4 <__aeabi_fmul+0x150>
 80009d6:	2901      	cmp	r1, #1
 80009d8:	d12c      	bne.n	8000a34 <__aeabi_fmul+0xd0>
 80009da:	2000      	movs	r0, #0
 80009dc:	2200      	movs	r2, #0
 80009de:	05c0      	lsls	r0, r0, #23
 80009e0:	07f6      	lsls	r6, r6, #31
 80009e2:	4310      	orrs	r0, r2
 80009e4:	4330      	orrs	r0, r6
 80009e6:	bce0      	pop	{r5, r6, r7}
 80009e8:	46ba      	mov	sl, r7
 80009ea:	46b1      	mov	r9, r6
 80009ec:	46a8      	mov	r8, r5
 80009ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f0:	002b      	movs	r3, r5
 80009f2:	33ff      	adds	r3, #255	@ 0xff
 80009f4:	2c00      	cmp	r4, #0
 80009f6:	d065      	beq.n	8000ac4 <__aeabi_fmul+0x160>
 80009f8:	2203      	movs	r2, #3
 80009fa:	4641      	mov	r1, r8
 80009fc:	4311      	orrs	r1, r2
 80009fe:	0032      	movs	r2, r6
 8000a00:	3501      	adds	r5, #1
 8000a02:	4688      	mov	r8, r1
 8000a04:	407a      	eors	r2, r7
 8000a06:	35ff      	adds	r5, #255	@ 0xff
 8000a08:	290a      	cmp	r1, #10
 8000a0a:	dd00      	ble.n	8000a0e <__aeabi_fmul+0xaa>
 8000a0c:	e0d8      	b.n	8000bc0 <__aeabi_fmul+0x25c>
 8000a0e:	0016      	movs	r6, r2
 8000a10:	2103      	movs	r1, #3
 8000a12:	4640      	mov	r0, r8
 8000a14:	2201      	movs	r2, #1
 8000a16:	4082      	lsls	r2, r0
 8000a18:	20a6      	movs	r0, #166	@ 0xa6
 8000a1a:	00c0      	lsls	r0, r0, #3
 8000a1c:	4202      	tst	r2, r0
 8000a1e:	d020      	beq.n	8000a62 <__aeabi_fmul+0xfe>
 8000a20:	4653      	mov	r3, sl
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d046      	beq.n	8000ab4 <__aeabi_fmul+0x150>
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fmul+0xc8>
 8000a2a:	e0bb      	b.n	8000ba4 <__aeabi_fmul+0x240>
 8000a2c:	4651      	mov	r1, sl
 8000a2e:	464c      	mov	r4, r9
 8000a30:	2901      	cmp	r1, #1
 8000a32:	d0d2      	beq.n	80009da <__aeabi_fmul+0x76>
 8000a34:	002b      	movs	r3, r5
 8000a36:	337f      	adds	r3, #127	@ 0x7f
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dd70      	ble.n	8000b1e <__aeabi_fmul+0x1ba>
 8000a3c:	0762      	lsls	r2, r4, #29
 8000a3e:	d004      	beq.n	8000a4a <__aeabi_fmul+0xe6>
 8000a40:	220f      	movs	r2, #15
 8000a42:	4022      	ands	r2, r4
 8000a44:	2a04      	cmp	r2, #4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fmul+0xe6>
 8000a48:	3404      	adds	r4, #4
 8000a4a:	0122      	lsls	r2, r4, #4
 8000a4c:	d503      	bpl.n	8000a56 <__aeabi_fmul+0xf2>
 8000a4e:	4b63      	ldr	r3, [pc, #396]	@ (8000bdc <__aeabi_fmul+0x278>)
 8000a50:	401c      	ands	r4, r3
 8000a52:	002b      	movs	r3, r5
 8000a54:	3380      	adds	r3, #128	@ 0x80
 8000a56:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a58:	dc2c      	bgt.n	8000ab4 <__aeabi_fmul+0x150>
 8000a5a:	01a2      	lsls	r2, r4, #6
 8000a5c:	0a52      	lsrs	r2, r2, #9
 8000a5e:	b2d8      	uxtb	r0, r3
 8000a60:	e7bd      	b.n	80009de <__aeabi_fmul+0x7a>
 8000a62:	2090      	movs	r0, #144	@ 0x90
 8000a64:	0080      	lsls	r0, r0, #2
 8000a66:	4202      	tst	r2, r0
 8000a68:	d127      	bne.n	8000aba <__aeabi_fmul+0x156>
 8000a6a:	38b9      	subs	r0, #185	@ 0xb9
 8000a6c:	38ff      	subs	r0, #255	@ 0xff
 8000a6e:	4210      	tst	r0, r2
 8000a70:	d06d      	beq.n	8000b4e <__aeabi_fmul+0x1ea>
 8000a72:	003e      	movs	r6, r7
 8000a74:	46a1      	mov	r9, r4
 8000a76:	468a      	mov	sl, r1
 8000a78:	e7d2      	b.n	8000a20 <__aeabi_fmul+0xbc>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d141      	bne.n	8000b02 <__aeabi_fmul+0x19e>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	4642      	mov	r2, r8
 8000a82:	431a      	orrs	r2, r3
 8000a84:	4690      	mov	r8, r2
 8000a86:	002b      	movs	r3, r5
 8000a88:	4642      	mov	r2, r8
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	1c5d      	adds	r5, r3, #1
 8000a8e:	2a0a      	cmp	r2, #10
 8000a90:	dd97      	ble.n	80009c2 <__aeabi_fmul+0x5e>
 8000a92:	e7c5      	b.n	8000a20 <__aeabi_fmul+0xbc>
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d126      	bne.n	8000ae6 <__aeabi_fmul+0x182>
 8000a98:	2304      	movs	r3, #4
 8000a9a:	4698      	mov	r8, r3
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	e77a      	b.n	800099a <__aeabi_fmul+0x36>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d118      	bne.n	8000ada <__aeabi_fmul+0x176>
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	4698      	mov	r8, r3
 8000aac:	3b06      	subs	r3, #6
 8000aae:	25ff      	movs	r5, #255	@ 0xff
 8000ab0:	469a      	mov	sl, r3
 8000ab2:	e772      	b.n	800099a <__aeabi_fmul+0x36>
 8000ab4:	20ff      	movs	r0, #255	@ 0xff
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	e791      	b.n	80009de <__aeabi_fmul+0x7a>
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	2600      	movs	r6, #0
 8000abe:	20ff      	movs	r0, #255	@ 0xff
 8000ac0:	03d2      	lsls	r2, r2, #15
 8000ac2:	e78c      	b.n	80009de <__aeabi_fmul+0x7a>
 8000ac4:	4641      	mov	r1, r8
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	3501      	adds	r5, #1
 8000aca:	4311      	orrs	r1, r2
 8000acc:	4688      	mov	r8, r1
 8000ace:	35ff      	adds	r5, #255	@ 0xff
 8000ad0:	290a      	cmp	r1, #10
 8000ad2:	dca5      	bgt.n	8000a20 <__aeabi_fmul+0xbc>
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	407e      	eors	r6, r7
 8000ad8:	e774      	b.n	80009c4 <__aeabi_fmul+0x60>
 8000ada:	230c      	movs	r3, #12
 8000adc:	4698      	mov	r8, r3
 8000ade:	3b09      	subs	r3, #9
 8000ae0:	25ff      	movs	r5, #255	@ 0xff
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	e759      	b.n	800099a <__aeabi_fmul+0x36>
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 fbbc 	bl	8002264 <__clzsi2>
 8000aec:	464a      	mov	r2, r9
 8000aee:	1f43      	subs	r3, r0, #5
 8000af0:	2576      	movs	r5, #118	@ 0x76
 8000af2:	409a      	lsls	r2, r3
 8000af4:	2300      	movs	r3, #0
 8000af6:	426d      	negs	r5, r5
 8000af8:	4691      	mov	r9, r2
 8000afa:	4698      	mov	r8, r3
 8000afc:	469a      	mov	sl, r3
 8000afe:	1a2d      	subs	r5, r5, r0
 8000b00:	e74b      	b.n	800099a <__aeabi_fmul+0x36>
 8000b02:	0020      	movs	r0, r4
 8000b04:	f001 fbae 	bl	8002264 <__clzsi2>
 8000b08:	4642      	mov	r2, r8
 8000b0a:	1f43      	subs	r3, r0, #5
 8000b0c:	409c      	lsls	r4, r3
 8000b0e:	1a2b      	subs	r3, r5, r0
 8000b10:	3b76      	subs	r3, #118	@ 0x76
 8000b12:	2100      	movs	r1, #0
 8000b14:	1c5d      	adds	r5, r3, #1
 8000b16:	2a0a      	cmp	r2, #10
 8000b18:	dc00      	bgt.n	8000b1c <__aeabi_fmul+0x1b8>
 8000b1a:	e752      	b.n	80009c2 <__aeabi_fmul+0x5e>
 8000b1c:	e780      	b.n	8000a20 <__aeabi_fmul+0xbc>
 8000b1e:	2201      	movs	r2, #1
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b1b      	cmp	r3, #27
 8000b24:	dd00      	ble.n	8000b28 <__aeabi_fmul+0x1c4>
 8000b26:	e758      	b.n	80009da <__aeabi_fmul+0x76>
 8000b28:	359e      	adds	r5, #158	@ 0x9e
 8000b2a:	0022      	movs	r2, r4
 8000b2c:	40ac      	lsls	r4, r5
 8000b2e:	40da      	lsrs	r2, r3
 8000b30:	1e63      	subs	r3, r4, #1
 8000b32:	419c      	sbcs	r4, r3
 8000b34:	4322      	orrs	r2, r4
 8000b36:	0753      	lsls	r3, r2, #29
 8000b38:	d004      	beq.n	8000b44 <__aeabi_fmul+0x1e0>
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fmul+0x1e0>
 8000b42:	3204      	adds	r2, #4
 8000b44:	0153      	lsls	r3, r2, #5
 8000b46:	d537      	bpl.n	8000bb8 <__aeabi_fmul+0x254>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	e747      	b.n	80009de <__aeabi_fmul+0x7a>
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	464a      	mov	r2, r9
 8000b52:	0424      	lsls	r4, r4, #16
 8000b54:	0c24      	lsrs	r4, r4, #16
 8000b56:	0027      	movs	r7, r4
 8000b58:	0c10      	lsrs	r0, r2, #16
 8000b5a:	0412      	lsls	r2, r2, #16
 8000b5c:	0c12      	lsrs	r2, r2, #16
 8000b5e:	4344      	muls	r4, r0
 8000b60:	4357      	muls	r7, r2
 8000b62:	4348      	muls	r0, r1
 8000b64:	4351      	muls	r1, r2
 8000b66:	0c3a      	lsrs	r2, r7, #16
 8000b68:	1909      	adds	r1, r1, r4
 8000b6a:	1852      	adds	r2, r2, r1
 8000b6c:	4294      	cmp	r4, r2
 8000b6e:	d903      	bls.n	8000b78 <__aeabi_fmul+0x214>
 8000b70:	2180      	movs	r1, #128	@ 0x80
 8000b72:	0249      	lsls	r1, r1, #9
 8000b74:	468c      	mov	ip, r1
 8000b76:	4460      	add	r0, ip
 8000b78:	043f      	lsls	r7, r7, #16
 8000b7a:	0411      	lsls	r1, r2, #16
 8000b7c:	0c3f      	lsrs	r7, r7, #16
 8000b7e:	19c9      	adds	r1, r1, r7
 8000b80:	018c      	lsls	r4, r1, #6
 8000b82:	1e67      	subs	r7, r4, #1
 8000b84:	41bc      	sbcs	r4, r7
 8000b86:	0c12      	lsrs	r2, r2, #16
 8000b88:	0e89      	lsrs	r1, r1, #26
 8000b8a:	1812      	adds	r2, r2, r0
 8000b8c:	430c      	orrs	r4, r1
 8000b8e:	0192      	lsls	r2, r2, #6
 8000b90:	4314      	orrs	r4, r2
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	d50e      	bpl.n	8000bb4 <__aeabi_fmul+0x250>
 8000b96:	2301      	movs	r3, #1
 8000b98:	0862      	lsrs	r2, r4, #1
 8000b9a:	401c      	ands	r4, r3
 8000b9c:	4314      	orrs	r4, r2
 8000b9e:	e749      	b.n	8000a34 <__aeabi_fmul+0xd0>
 8000ba0:	003e      	movs	r6, r7
 8000ba2:	46a1      	mov	r9, r4
 8000ba4:	2280      	movs	r2, #128	@ 0x80
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	03d2      	lsls	r2, r2, #15
 8000baa:	431a      	orrs	r2, r3
 8000bac:	0252      	lsls	r2, r2, #9
 8000bae:	20ff      	movs	r0, #255	@ 0xff
 8000bb0:	0a52      	lsrs	r2, r2, #9
 8000bb2:	e714      	b.n	80009de <__aeabi_fmul+0x7a>
 8000bb4:	001d      	movs	r5, r3
 8000bb6:	e73d      	b.n	8000a34 <__aeabi_fmul+0xd0>
 8000bb8:	0192      	lsls	r2, r2, #6
 8000bba:	2000      	movs	r0, #0
 8000bbc:	0a52      	lsrs	r2, r2, #9
 8000bbe:	e70e      	b.n	80009de <__aeabi_fmul+0x7a>
 8000bc0:	290f      	cmp	r1, #15
 8000bc2:	d1ed      	bne.n	8000ba0 <__aeabi_fmul+0x23c>
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	464b      	mov	r3, r9
 8000bc8:	03d2      	lsls	r2, r2, #15
 8000bca:	4213      	tst	r3, r2
 8000bcc:	d0ea      	beq.n	8000ba4 <__aeabi_fmul+0x240>
 8000bce:	4214      	tst	r4, r2
 8000bd0:	d1e8      	bne.n	8000ba4 <__aeabi_fmul+0x240>
 8000bd2:	003e      	movs	r6, r7
 8000bd4:	20ff      	movs	r0, #255	@ 0xff
 8000bd6:	4322      	orrs	r2, r4
 8000bd8:	e701      	b.n	80009de <__aeabi_fmul+0x7a>
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	f7ffffff 	.word	0xf7ffffff

08000be0 <__aeabi_f2iz>:
 8000be0:	0241      	lsls	r1, r0, #9
 8000be2:	0042      	lsls	r2, r0, #1
 8000be4:	0fc3      	lsrs	r3, r0, #31
 8000be6:	0a49      	lsrs	r1, r1, #9
 8000be8:	2000      	movs	r0, #0
 8000bea:	0e12      	lsrs	r2, r2, #24
 8000bec:	2a7e      	cmp	r2, #126	@ 0x7e
 8000bee:	dd03      	ble.n	8000bf8 <__aeabi_f2iz+0x18>
 8000bf0:	2a9d      	cmp	r2, #157	@ 0x9d
 8000bf2:	dd02      	ble.n	8000bfa <__aeabi_f2iz+0x1a>
 8000bf4:	4a09      	ldr	r2, [pc, #36]	@ (8000c1c <__aeabi_f2iz+0x3c>)
 8000bf6:	1898      	adds	r0, r3, r2
 8000bf8:	4770      	bx	lr
 8000bfa:	2080      	movs	r0, #128	@ 0x80
 8000bfc:	0400      	lsls	r0, r0, #16
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	2a95      	cmp	r2, #149	@ 0x95
 8000c02:	dc07      	bgt.n	8000c14 <__aeabi_f2iz+0x34>
 8000c04:	2096      	movs	r0, #150	@ 0x96
 8000c06:	1a82      	subs	r2, r0, r2
 8000c08:	40d1      	lsrs	r1, r2
 8000c0a:	4248      	negs	r0, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f3      	bne.n	8000bf8 <__aeabi_f2iz+0x18>
 8000c10:	0008      	movs	r0, r1
 8000c12:	e7f1      	b.n	8000bf8 <__aeabi_f2iz+0x18>
 8000c14:	3a96      	subs	r2, #150	@ 0x96
 8000c16:	4091      	lsls	r1, r2
 8000c18:	e7f7      	b.n	8000c0a <__aeabi_f2iz+0x2a>
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	7fffffff 	.word	0x7fffffff

08000c20 <__aeabi_i2f>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	2800      	cmp	r0, #0
 8000c24:	d013      	beq.n	8000c4e <__aeabi_i2f+0x2e>
 8000c26:	17c3      	asrs	r3, r0, #31
 8000c28:	18c5      	adds	r5, r0, r3
 8000c2a:	405d      	eors	r5, r3
 8000c2c:	0fc4      	lsrs	r4, r0, #31
 8000c2e:	0028      	movs	r0, r5
 8000c30:	f001 fb18 	bl	8002264 <__clzsi2>
 8000c34:	239e      	movs	r3, #158	@ 0x9e
 8000c36:	0001      	movs	r1, r0
 8000c38:	1a1b      	subs	r3, r3, r0
 8000c3a:	2b96      	cmp	r3, #150	@ 0x96
 8000c3c:	dc0f      	bgt.n	8000c5e <__aeabi_i2f+0x3e>
 8000c3e:	2808      	cmp	r0, #8
 8000c40:	d034      	beq.n	8000cac <__aeabi_i2f+0x8c>
 8000c42:	3908      	subs	r1, #8
 8000c44:	408d      	lsls	r5, r1
 8000c46:	026d      	lsls	r5, r5, #9
 8000c48:	0a6d      	lsrs	r5, r5, #9
 8000c4a:	b2d8      	uxtb	r0, r3
 8000c4c:	e002      	b.n	8000c54 <__aeabi_i2f+0x34>
 8000c4e:	2400      	movs	r4, #0
 8000c50:	2000      	movs	r0, #0
 8000c52:	2500      	movs	r5, #0
 8000c54:	05c0      	lsls	r0, r0, #23
 8000c56:	4328      	orrs	r0, r5
 8000c58:	07e4      	lsls	r4, r4, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
 8000c5e:	2b99      	cmp	r3, #153	@ 0x99
 8000c60:	dc16      	bgt.n	8000c90 <__aeabi_i2f+0x70>
 8000c62:	1f42      	subs	r2, r0, #5
 8000c64:	2805      	cmp	r0, #5
 8000c66:	d000      	beq.n	8000c6a <__aeabi_i2f+0x4a>
 8000c68:	4095      	lsls	r5, r2
 8000c6a:	002a      	movs	r2, r5
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <__aeabi_i2f+0x94>)
 8000c6e:	4002      	ands	r2, r0
 8000c70:	076e      	lsls	r6, r5, #29
 8000c72:	d009      	beq.n	8000c88 <__aeabi_i2f+0x68>
 8000c74:	260f      	movs	r6, #15
 8000c76:	4035      	ands	r5, r6
 8000c78:	2d04      	cmp	r5, #4
 8000c7a:	d005      	beq.n	8000c88 <__aeabi_i2f+0x68>
 8000c7c:	3204      	adds	r2, #4
 8000c7e:	0155      	lsls	r5, r2, #5
 8000c80:	d502      	bpl.n	8000c88 <__aeabi_i2f+0x68>
 8000c82:	239f      	movs	r3, #159	@ 0x9f
 8000c84:	4002      	ands	r2, r0
 8000c86:	1a5b      	subs	r3, r3, r1
 8000c88:	0192      	lsls	r2, r2, #6
 8000c8a:	0a55      	lsrs	r5, r2, #9
 8000c8c:	b2d8      	uxtb	r0, r3
 8000c8e:	e7e1      	b.n	8000c54 <__aeabi_i2f+0x34>
 8000c90:	2205      	movs	r2, #5
 8000c92:	1a12      	subs	r2, r2, r0
 8000c94:	0028      	movs	r0, r5
 8000c96:	40d0      	lsrs	r0, r2
 8000c98:	0002      	movs	r2, r0
 8000c9a:	0008      	movs	r0, r1
 8000c9c:	301b      	adds	r0, #27
 8000c9e:	4085      	lsls	r5, r0
 8000ca0:	0028      	movs	r0, r5
 8000ca2:	1e45      	subs	r5, r0, #1
 8000ca4:	41a8      	sbcs	r0, r5
 8000ca6:	4302      	orrs	r2, r0
 8000ca8:	0015      	movs	r5, r2
 8000caa:	e7de      	b.n	8000c6a <__aeabi_i2f+0x4a>
 8000cac:	026d      	lsls	r5, r5, #9
 8000cae:	2096      	movs	r0, #150	@ 0x96
 8000cb0:	0a6d      	lsrs	r5, r5, #9
 8000cb2:	e7cf      	b.n	8000c54 <__aeabi_i2f+0x34>
 8000cb4:	fbffffff 	.word	0xfbffffff

08000cb8 <__aeabi_ui2f>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	1e04      	subs	r4, r0, #0
 8000cbc:	d00e      	beq.n	8000cdc <__aeabi_ui2f+0x24>
 8000cbe:	f001 fad1 	bl	8002264 <__clzsi2>
 8000cc2:	239e      	movs	r3, #158	@ 0x9e
 8000cc4:	0001      	movs	r1, r0
 8000cc6:	1a1b      	subs	r3, r3, r0
 8000cc8:	2b96      	cmp	r3, #150	@ 0x96
 8000cca:	dc0c      	bgt.n	8000ce6 <__aeabi_ui2f+0x2e>
 8000ccc:	2808      	cmp	r0, #8
 8000cce:	d02f      	beq.n	8000d30 <__aeabi_ui2f+0x78>
 8000cd0:	3908      	subs	r1, #8
 8000cd2:	408c      	lsls	r4, r1
 8000cd4:	0264      	lsls	r4, r4, #9
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	b2d8      	uxtb	r0, r3
 8000cda:	e001      	b.n	8000ce0 <__aeabi_ui2f+0x28>
 8000cdc:	2000      	movs	r0, #0
 8000cde:	2400      	movs	r4, #0
 8000ce0:	05c0      	lsls	r0, r0, #23
 8000ce2:	4320      	orrs	r0, r4
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
 8000ce6:	2b99      	cmp	r3, #153	@ 0x99
 8000ce8:	dc16      	bgt.n	8000d18 <__aeabi_ui2f+0x60>
 8000cea:	1f42      	subs	r2, r0, #5
 8000cec:	2805      	cmp	r0, #5
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_ui2f+0x3a>
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	0022      	movs	r2, r4
 8000cf4:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <__aeabi_ui2f+0x80>)
 8000cf6:	4002      	ands	r2, r0
 8000cf8:	0765      	lsls	r5, r4, #29
 8000cfa:	d009      	beq.n	8000d10 <__aeabi_ui2f+0x58>
 8000cfc:	250f      	movs	r5, #15
 8000cfe:	402c      	ands	r4, r5
 8000d00:	2c04      	cmp	r4, #4
 8000d02:	d005      	beq.n	8000d10 <__aeabi_ui2f+0x58>
 8000d04:	3204      	adds	r2, #4
 8000d06:	0154      	lsls	r4, r2, #5
 8000d08:	d502      	bpl.n	8000d10 <__aeabi_ui2f+0x58>
 8000d0a:	239f      	movs	r3, #159	@ 0x9f
 8000d0c:	4002      	ands	r2, r0
 8000d0e:	1a5b      	subs	r3, r3, r1
 8000d10:	0192      	lsls	r2, r2, #6
 8000d12:	0a54      	lsrs	r4, r2, #9
 8000d14:	b2d8      	uxtb	r0, r3
 8000d16:	e7e3      	b.n	8000ce0 <__aeabi_ui2f+0x28>
 8000d18:	0002      	movs	r2, r0
 8000d1a:	0020      	movs	r0, r4
 8000d1c:	321b      	adds	r2, #27
 8000d1e:	4090      	lsls	r0, r2
 8000d20:	0002      	movs	r2, r0
 8000d22:	1e50      	subs	r0, r2, #1
 8000d24:	4182      	sbcs	r2, r0
 8000d26:	2005      	movs	r0, #5
 8000d28:	1a40      	subs	r0, r0, r1
 8000d2a:	40c4      	lsrs	r4, r0
 8000d2c:	4314      	orrs	r4, r2
 8000d2e:	e7e0      	b.n	8000cf2 <__aeabi_ui2f+0x3a>
 8000d30:	0264      	lsls	r4, r4, #9
 8000d32:	2096      	movs	r0, #150	@ 0x96
 8000d34:	0a64      	lsrs	r4, r4, #9
 8000d36:	e7d3      	b.n	8000ce0 <__aeabi_ui2f+0x28>
 8000d38:	fbffffff 	.word	0xfbffffff

08000d3c <__aeabi_dadd>:
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	4657      	mov	r7, sl
 8000d40:	464e      	mov	r6, r9
 8000d42:	4645      	mov	r5, r8
 8000d44:	46de      	mov	lr, fp
 8000d46:	b5e0      	push	{r5, r6, r7, lr}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	9000      	str	r0, [sp, #0]
 8000d4c:	9101      	str	r1, [sp, #4]
 8000d4e:	030c      	lsls	r4, r1, #12
 8000d50:	004f      	lsls	r7, r1, #1
 8000d52:	0fce      	lsrs	r6, r1, #31
 8000d54:	0a61      	lsrs	r1, r4, #9
 8000d56:	9c00      	ldr	r4, [sp, #0]
 8000d58:	031d      	lsls	r5, r3, #12
 8000d5a:	0f64      	lsrs	r4, r4, #29
 8000d5c:	430c      	orrs	r4, r1
 8000d5e:	9900      	ldr	r1, [sp, #0]
 8000d60:	9200      	str	r2, [sp, #0]
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	00c8      	lsls	r0, r1, #3
 8000d66:	0059      	lsls	r1, r3, #1
 8000d68:	0d4b      	lsrs	r3, r1, #21
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	9a00      	ldr	r2, [sp, #0]
 8000d6e:	9b01      	ldr	r3, [sp, #4]
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0fd9      	lsrs	r1, r3, #31
 8000d74:	0f53      	lsrs	r3, r2, #29
 8000d76:	432b      	orrs	r3, r5
 8000d78:	469a      	mov	sl, r3
 8000d7a:	9b00      	ldr	r3, [sp, #0]
 8000d7c:	0d7f      	lsrs	r7, r7, #21
 8000d7e:	00da      	lsls	r2, r3, #3
 8000d80:	4694      	mov	ip, r2
 8000d82:	464a      	mov	r2, r9
 8000d84:	46b0      	mov	r8, r6
 8000d86:	1aba      	subs	r2, r7, r2
 8000d88:	428e      	cmp	r6, r1
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dadd+0x52>
 8000d8c:	e0b0      	b.n	8000ef0 <__aeabi_dadd+0x1b4>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	dc00      	bgt.n	8000d94 <__aeabi_dadd+0x58>
 8000d92:	e078      	b.n	8000e86 <__aeabi_dadd+0x14a>
 8000d94:	4649      	mov	r1, r9
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x60>
 8000d9a:	e0e9      	b.n	8000f70 <__aeabi_dadd+0x234>
 8000d9c:	49c9      	ldr	r1, [pc, #804]	@ (80010c4 <__aeabi_dadd+0x388>)
 8000d9e:	428f      	cmp	r7, r1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_dadd+0x68>
 8000da2:	e195      	b.n	80010d0 <__aeabi_dadd+0x394>
 8000da4:	2501      	movs	r5, #1
 8000da6:	2a38      	cmp	r2, #56	@ 0x38
 8000da8:	dc16      	bgt.n	8000dd8 <__aeabi_dadd+0x9c>
 8000daa:	2180      	movs	r1, #128	@ 0x80
 8000dac:	4653      	mov	r3, sl
 8000dae:	0409      	lsls	r1, r1, #16
 8000db0:	430b      	orrs	r3, r1
 8000db2:	469a      	mov	sl, r3
 8000db4:	2a1f      	cmp	r2, #31
 8000db6:	dd00      	ble.n	8000dba <__aeabi_dadd+0x7e>
 8000db8:	e1e7      	b.n	800118a <__aeabi_dadd+0x44e>
 8000dba:	2120      	movs	r1, #32
 8000dbc:	4655      	mov	r5, sl
 8000dbe:	1a8b      	subs	r3, r1, r2
 8000dc0:	4661      	mov	r1, ip
 8000dc2:	409d      	lsls	r5, r3
 8000dc4:	40d1      	lsrs	r1, r2
 8000dc6:	430d      	orrs	r5, r1
 8000dc8:	4661      	mov	r1, ip
 8000dca:	4099      	lsls	r1, r3
 8000dcc:	1e4b      	subs	r3, r1, #1
 8000dce:	4199      	sbcs	r1, r3
 8000dd0:	4653      	mov	r3, sl
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	430d      	orrs	r5, r1
 8000dd6:	1ae4      	subs	r4, r4, r3
 8000dd8:	1b45      	subs	r5, r0, r5
 8000dda:	42a8      	cmp	r0, r5
 8000ddc:	4180      	sbcs	r0, r0
 8000dde:	4240      	negs	r0, r0
 8000de0:	1a24      	subs	r4, r4, r0
 8000de2:	0223      	lsls	r3, r4, #8
 8000de4:	d400      	bmi.n	8000de8 <__aeabi_dadd+0xac>
 8000de6:	e10f      	b.n	8001008 <__aeabi_dadd+0x2cc>
 8000de8:	0264      	lsls	r4, r4, #9
 8000dea:	0a64      	lsrs	r4, r4, #9
 8000dec:	2c00      	cmp	r4, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dadd+0xb6>
 8000df0:	e139      	b.n	8001066 <__aeabi_dadd+0x32a>
 8000df2:	0020      	movs	r0, r4
 8000df4:	f001 fa36 	bl	8002264 <__clzsi2>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	3b08      	subs	r3, #8
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	0028      	movs	r0, r5
 8000e00:	1aca      	subs	r2, r1, r3
 8000e02:	40d0      	lsrs	r0, r2
 8000e04:	409c      	lsls	r4, r3
 8000e06:	0002      	movs	r2, r0
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	4322      	orrs	r2, r4
 8000e0c:	429f      	cmp	r7, r3
 8000e0e:	dd00      	ble.n	8000e12 <__aeabi_dadd+0xd6>
 8000e10:	e173      	b.n	80010fa <__aeabi_dadd+0x3be>
 8000e12:	1bd8      	subs	r0, r3, r7
 8000e14:	3001      	adds	r0, #1
 8000e16:	1a09      	subs	r1, r1, r0
 8000e18:	002c      	movs	r4, r5
 8000e1a:	408d      	lsls	r5, r1
 8000e1c:	40c4      	lsrs	r4, r0
 8000e1e:	1e6b      	subs	r3, r5, #1
 8000e20:	419d      	sbcs	r5, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	40c2      	lsrs	r2, r0
 8000e26:	408b      	lsls	r3, r1
 8000e28:	4325      	orrs	r5, r4
 8000e2a:	2700      	movs	r7, #0
 8000e2c:	0014      	movs	r4, r2
 8000e2e:	431d      	orrs	r5, r3
 8000e30:	076b      	lsls	r3, r5, #29
 8000e32:	d009      	beq.n	8000e48 <__aeabi_dadd+0x10c>
 8000e34:	230f      	movs	r3, #15
 8000e36:	402b      	ands	r3, r5
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d005      	beq.n	8000e48 <__aeabi_dadd+0x10c>
 8000e3c:	1d2b      	adds	r3, r5, #4
 8000e3e:	42ab      	cmp	r3, r5
 8000e40:	41ad      	sbcs	r5, r5
 8000e42:	426d      	negs	r5, r5
 8000e44:	1964      	adds	r4, r4, r5
 8000e46:	001d      	movs	r5, r3
 8000e48:	0223      	lsls	r3, r4, #8
 8000e4a:	d400      	bmi.n	8000e4e <__aeabi_dadd+0x112>
 8000e4c:	e12d      	b.n	80010aa <__aeabi_dadd+0x36e>
 8000e4e:	4a9d      	ldr	r2, [pc, #628]	@ (80010c4 <__aeabi_dadd+0x388>)
 8000e50:	3701      	adds	r7, #1
 8000e52:	4297      	cmp	r7, r2
 8000e54:	d100      	bne.n	8000e58 <__aeabi_dadd+0x11c>
 8000e56:	e0d3      	b.n	8001000 <__aeabi_dadd+0x2c4>
 8000e58:	4646      	mov	r6, r8
 8000e5a:	499b      	ldr	r1, [pc, #620]	@ (80010c8 <__aeabi_dadd+0x38c>)
 8000e5c:	08ed      	lsrs	r5, r5, #3
 8000e5e:	4021      	ands	r1, r4
 8000e60:	074a      	lsls	r2, r1, #29
 8000e62:	432a      	orrs	r2, r5
 8000e64:	057c      	lsls	r4, r7, #21
 8000e66:	024d      	lsls	r5, r1, #9
 8000e68:	0b2d      	lsrs	r5, r5, #12
 8000e6a:	0d64      	lsrs	r4, r4, #21
 8000e6c:	0524      	lsls	r4, r4, #20
 8000e6e:	432c      	orrs	r4, r5
 8000e70:	07f6      	lsls	r6, r6, #31
 8000e72:	4334      	orrs	r4, r6
 8000e74:	0010      	movs	r0, r2
 8000e76:	0021      	movs	r1, r4
 8000e78:	b003      	add	sp, #12
 8000e7a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e7c:	46bb      	mov	fp, r7
 8000e7e:	46b2      	mov	sl, r6
 8000e80:	46a9      	mov	r9, r5
 8000e82:	46a0      	mov	r8, r4
 8000e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_dadd+0x150>
 8000e8a:	e084      	b.n	8000f96 <__aeabi_dadd+0x25a>
 8000e8c:	464a      	mov	r2, r9
 8000e8e:	1bd2      	subs	r2, r2, r7
 8000e90:	2f00      	cmp	r7, #0
 8000e92:	d000      	beq.n	8000e96 <__aeabi_dadd+0x15a>
 8000e94:	e16d      	b.n	8001172 <__aeabi_dadd+0x436>
 8000e96:	0025      	movs	r5, r4
 8000e98:	4305      	orrs	r5, r0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dadd+0x162>
 8000e9c:	e127      	b.n	80010ee <__aeabi_dadd+0x3b2>
 8000e9e:	1e56      	subs	r6, r2, #1
 8000ea0:	2a01      	cmp	r2, #1
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_dadd+0x16a>
 8000ea4:	e23b      	b.n	800131e <__aeabi_dadd+0x5e2>
 8000ea6:	4d87      	ldr	r5, [pc, #540]	@ (80010c4 <__aeabi_dadd+0x388>)
 8000ea8:	42aa      	cmp	r2, r5
 8000eaa:	d100      	bne.n	8000eae <__aeabi_dadd+0x172>
 8000eac:	e26a      	b.n	8001384 <__aeabi_dadd+0x648>
 8000eae:	2501      	movs	r5, #1
 8000eb0:	2e38      	cmp	r6, #56	@ 0x38
 8000eb2:	dc12      	bgt.n	8000eda <__aeabi_dadd+0x19e>
 8000eb4:	0032      	movs	r2, r6
 8000eb6:	2a1f      	cmp	r2, #31
 8000eb8:	dd00      	ble.n	8000ebc <__aeabi_dadd+0x180>
 8000eba:	e1f8      	b.n	80012ae <__aeabi_dadd+0x572>
 8000ebc:	2620      	movs	r6, #32
 8000ebe:	0025      	movs	r5, r4
 8000ec0:	1ab6      	subs	r6, r6, r2
 8000ec2:	0007      	movs	r7, r0
 8000ec4:	4653      	mov	r3, sl
 8000ec6:	40b0      	lsls	r0, r6
 8000ec8:	40d4      	lsrs	r4, r2
 8000eca:	40b5      	lsls	r5, r6
 8000ecc:	40d7      	lsrs	r7, r2
 8000ece:	1e46      	subs	r6, r0, #1
 8000ed0:	41b0      	sbcs	r0, r6
 8000ed2:	1b1b      	subs	r3, r3, r4
 8000ed4:	469a      	mov	sl, r3
 8000ed6:	433d      	orrs	r5, r7
 8000ed8:	4305      	orrs	r5, r0
 8000eda:	4662      	mov	r2, ip
 8000edc:	1b55      	subs	r5, r2, r5
 8000ede:	45ac      	cmp	ip, r5
 8000ee0:	4192      	sbcs	r2, r2
 8000ee2:	4653      	mov	r3, sl
 8000ee4:	4252      	negs	r2, r2
 8000ee6:	000e      	movs	r6, r1
 8000ee8:	464f      	mov	r7, r9
 8000eea:	4688      	mov	r8, r1
 8000eec:	1a9c      	subs	r4, r3, r2
 8000eee:	e778      	b.n	8000de2 <__aeabi_dadd+0xa6>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	dc00      	bgt.n	8000ef6 <__aeabi_dadd+0x1ba>
 8000ef4:	e08e      	b.n	8001014 <__aeabi_dadd+0x2d8>
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	d175      	bne.n	8000fe8 <__aeabi_dadd+0x2ac>
 8000efc:	4661      	mov	r1, ip
 8000efe:	4653      	mov	r3, sl
 8000f00:	4319      	orrs	r1, r3
 8000f02:	d100      	bne.n	8000f06 <__aeabi_dadd+0x1ca>
 8000f04:	e0f6      	b.n	80010f4 <__aeabi_dadd+0x3b8>
 8000f06:	1e51      	subs	r1, r2, #1
 8000f08:	2a01      	cmp	r2, #1
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_dadd+0x1d2>
 8000f0c:	e191      	b.n	8001232 <__aeabi_dadd+0x4f6>
 8000f0e:	4d6d      	ldr	r5, [pc, #436]	@ (80010c4 <__aeabi_dadd+0x388>)
 8000f10:	42aa      	cmp	r2, r5
 8000f12:	d100      	bne.n	8000f16 <__aeabi_dadd+0x1da>
 8000f14:	e0dc      	b.n	80010d0 <__aeabi_dadd+0x394>
 8000f16:	2501      	movs	r5, #1
 8000f18:	2938      	cmp	r1, #56	@ 0x38
 8000f1a:	dc14      	bgt.n	8000f46 <__aeabi_dadd+0x20a>
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	2a1f      	cmp	r2, #31
 8000f20:	dd00      	ble.n	8000f24 <__aeabi_dadd+0x1e8>
 8000f22:	e1a2      	b.n	800126a <__aeabi_dadd+0x52e>
 8000f24:	2120      	movs	r1, #32
 8000f26:	4653      	mov	r3, sl
 8000f28:	1a89      	subs	r1, r1, r2
 8000f2a:	408b      	lsls	r3, r1
 8000f2c:	001d      	movs	r5, r3
 8000f2e:	4663      	mov	r3, ip
 8000f30:	40d3      	lsrs	r3, r2
 8000f32:	431d      	orrs	r5, r3
 8000f34:	4663      	mov	r3, ip
 8000f36:	408b      	lsls	r3, r1
 8000f38:	0019      	movs	r1, r3
 8000f3a:	1e4b      	subs	r3, r1, #1
 8000f3c:	4199      	sbcs	r1, r3
 8000f3e:	4653      	mov	r3, sl
 8000f40:	40d3      	lsrs	r3, r2
 8000f42:	430d      	orrs	r5, r1
 8000f44:	18e4      	adds	r4, r4, r3
 8000f46:	182d      	adds	r5, r5, r0
 8000f48:	4285      	cmp	r5, r0
 8000f4a:	4180      	sbcs	r0, r0
 8000f4c:	4240      	negs	r0, r0
 8000f4e:	1824      	adds	r4, r4, r0
 8000f50:	0223      	lsls	r3, r4, #8
 8000f52:	d559      	bpl.n	8001008 <__aeabi_dadd+0x2cc>
 8000f54:	4b5b      	ldr	r3, [pc, #364]	@ (80010c4 <__aeabi_dadd+0x388>)
 8000f56:	3701      	adds	r7, #1
 8000f58:	429f      	cmp	r7, r3
 8000f5a:	d051      	beq.n	8001000 <__aeabi_dadd+0x2c4>
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80010c8 <__aeabi_dadd+0x38c>)
 8000f60:	086a      	lsrs	r2, r5, #1
 8000f62:	401c      	ands	r4, r3
 8000f64:	4029      	ands	r1, r5
 8000f66:	430a      	orrs	r2, r1
 8000f68:	07e5      	lsls	r5, r4, #31
 8000f6a:	4315      	orrs	r5, r2
 8000f6c:	0864      	lsrs	r4, r4, #1
 8000f6e:	e75f      	b.n	8000e30 <__aeabi_dadd+0xf4>
 8000f70:	4661      	mov	r1, ip
 8000f72:	4653      	mov	r3, sl
 8000f74:	4319      	orrs	r1, r3
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x23e>
 8000f78:	e0bc      	b.n	80010f4 <__aeabi_dadd+0x3b8>
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	2a01      	cmp	r2, #1
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x246>
 8000f80:	e164      	b.n	800124c <__aeabi_dadd+0x510>
 8000f82:	4d50      	ldr	r5, [pc, #320]	@ (80010c4 <__aeabi_dadd+0x388>)
 8000f84:	42aa      	cmp	r2, r5
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x24e>
 8000f88:	e16a      	b.n	8001260 <__aeabi_dadd+0x524>
 8000f8a:	2501      	movs	r5, #1
 8000f8c:	2938      	cmp	r1, #56	@ 0x38
 8000f8e:	dd00      	ble.n	8000f92 <__aeabi_dadd+0x256>
 8000f90:	e722      	b.n	8000dd8 <__aeabi_dadd+0x9c>
 8000f92:	000a      	movs	r2, r1
 8000f94:	e70e      	b.n	8000db4 <__aeabi_dadd+0x78>
 8000f96:	4a4d      	ldr	r2, [pc, #308]	@ (80010cc <__aeabi_dadd+0x390>)
 8000f98:	1c7d      	adds	r5, r7, #1
 8000f9a:	4215      	tst	r5, r2
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_dadd+0x264>
 8000f9e:	e0d0      	b.n	8001142 <__aeabi_dadd+0x406>
 8000fa0:	0025      	movs	r5, r4
 8000fa2:	4662      	mov	r2, ip
 8000fa4:	4653      	mov	r3, sl
 8000fa6:	4305      	orrs	r5, r0
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	2f00      	cmp	r7, #0
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_dadd+0x274>
 8000fae:	e137      	b.n	8001220 <__aeabi_dadd+0x4e4>
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_dadd+0x27a>
 8000fb4:	e1a8      	b.n	8001308 <__aeabi_dadd+0x5cc>
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dadd+0x280>
 8000fba:	e16a      	b.n	8001292 <__aeabi_dadd+0x556>
 8000fbc:	4663      	mov	r3, ip
 8000fbe:	1ac5      	subs	r5, r0, r3
 8000fc0:	4653      	mov	r3, sl
 8000fc2:	1ae2      	subs	r2, r4, r3
 8000fc4:	42a8      	cmp	r0, r5
 8000fc6:	419b      	sbcs	r3, r3
 8000fc8:	425b      	negs	r3, r3
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	021a      	lsls	r2, r3, #8
 8000fce:	d400      	bmi.n	8000fd2 <__aeabi_dadd+0x296>
 8000fd0:	e203      	b.n	80013da <__aeabi_dadd+0x69e>
 8000fd2:	4663      	mov	r3, ip
 8000fd4:	1a1d      	subs	r5, r3, r0
 8000fd6:	45ac      	cmp	ip, r5
 8000fd8:	4192      	sbcs	r2, r2
 8000fda:	4653      	mov	r3, sl
 8000fdc:	4252      	negs	r2, r2
 8000fde:	1b1c      	subs	r4, r3, r4
 8000fe0:	000e      	movs	r6, r1
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	1aa4      	subs	r4, r4, r2
 8000fe6:	e723      	b.n	8000e30 <__aeabi_dadd+0xf4>
 8000fe8:	4936      	ldr	r1, [pc, #216]	@ (80010c4 <__aeabi_dadd+0x388>)
 8000fea:	428f      	cmp	r7, r1
 8000fec:	d070      	beq.n	80010d0 <__aeabi_dadd+0x394>
 8000fee:	2501      	movs	r5, #1
 8000ff0:	2a38      	cmp	r2, #56	@ 0x38
 8000ff2:	dca8      	bgt.n	8000f46 <__aeabi_dadd+0x20a>
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	4653      	mov	r3, sl
 8000ff8:	0409      	lsls	r1, r1, #16
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	469a      	mov	sl, r3
 8000ffe:	e78e      	b.n	8000f1e <__aeabi_dadd+0x1e2>
 8001000:	003c      	movs	r4, r7
 8001002:	2500      	movs	r5, #0
 8001004:	2200      	movs	r2, #0
 8001006:	e731      	b.n	8000e6c <__aeabi_dadd+0x130>
 8001008:	2307      	movs	r3, #7
 800100a:	402b      	ands	r3, r5
 800100c:	2b00      	cmp	r3, #0
 800100e:	d000      	beq.n	8001012 <__aeabi_dadd+0x2d6>
 8001010:	e710      	b.n	8000e34 <__aeabi_dadd+0xf8>
 8001012:	e093      	b.n	800113c <__aeabi_dadd+0x400>
 8001014:	2a00      	cmp	r2, #0
 8001016:	d074      	beq.n	8001102 <__aeabi_dadd+0x3c6>
 8001018:	464a      	mov	r2, r9
 800101a:	1bd2      	subs	r2, r2, r7
 800101c:	2f00      	cmp	r7, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_dadd+0x2e6>
 8001020:	e0c7      	b.n	80011b2 <__aeabi_dadd+0x476>
 8001022:	4928      	ldr	r1, [pc, #160]	@ (80010c4 <__aeabi_dadd+0x388>)
 8001024:	4589      	cmp	r9, r1
 8001026:	d100      	bne.n	800102a <__aeabi_dadd+0x2ee>
 8001028:	e185      	b.n	8001336 <__aeabi_dadd+0x5fa>
 800102a:	2501      	movs	r5, #1
 800102c:	2a38      	cmp	r2, #56	@ 0x38
 800102e:	dc12      	bgt.n	8001056 <__aeabi_dadd+0x31a>
 8001030:	2180      	movs	r1, #128	@ 0x80
 8001032:	0409      	lsls	r1, r1, #16
 8001034:	430c      	orrs	r4, r1
 8001036:	2a1f      	cmp	r2, #31
 8001038:	dd00      	ble.n	800103c <__aeabi_dadd+0x300>
 800103a:	e1ab      	b.n	8001394 <__aeabi_dadd+0x658>
 800103c:	2120      	movs	r1, #32
 800103e:	0025      	movs	r5, r4
 8001040:	1a89      	subs	r1, r1, r2
 8001042:	0007      	movs	r7, r0
 8001044:	4088      	lsls	r0, r1
 8001046:	408d      	lsls	r5, r1
 8001048:	40d7      	lsrs	r7, r2
 800104a:	1e41      	subs	r1, r0, #1
 800104c:	4188      	sbcs	r0, r1
 800104e:	40d4      	lsrs	r4, r2
 8001050:	433d      	orrs	r5, r7
 8001052:	4305      	orrs	r5, r0
 8001054:	44a2      	add	sl, r4
 8001056:	4465      	add	r5, ip
 8001058:	4565      	cmp	r5, ip
 800105a:	4192      	sbcs	r2, r2
 800105c:	4252      	negs	r2, r2
 800105e:	4452      	add	r2, sl
 8001060:	0014      	movs	r4, r2
 8001062:	464f      	mov	r7, r9
 8001064:	e774      	b.n	8000f50 <__aeabi_dadd+0x214>
 8001066:	0028      	movs	r0, r5
 8001068:	f001 f8fc 	bl	8002264 <__clzsi2>
 800106c:	0003      	movs	r3, r0
 800106e:	3318      	adds	r3, #24
 8001070:	2b1f      	cmp	r3, #31
 8001072:	dc00      	bgt.n	8001076 <__aeabi_dadd+0x33a>
 8001074:	e6c2      	b.n	8000dfc <__aeabi_dadd+0xc0>
 8001076:	002a      	movs	r2, r5
 8001078:	3808      	subs	r0, #8
 800107a:	4082      	lsls	r2, r0
 800107c:	429f      	cmp	r7, r3
 800107e:	dd00      	ble.n	8001082 <__aeabi_dadd+0x346>
 8001080:	e0a9      	b.n	80011d6 <__aeabi_dadd+0x49a>
 8001082:	1bdb      	subs	r3, r3, r7
 8001084:	1c58      	adds	r0, r3, #1
 8001086:	281f      	cmp	r0, #31
 8001088:	dc00      	bgt.n	800108c <__aeabi_dadd+0x350>
 800108a:	e1ac      	b.n	80013e6 <__aeabi_dadd+0x6aa>
 800108c:	0015      	movs	r5, r2
 800108e:	3b1f      	subs	r3, #31
 8001090:	40dd      	lsrs	r5, r3
 8001092:	2820      	cmp	r0, #32
 8001094:	d005      	beq.n	80010a2 <__aeabi_dadd+0x366>
 8001096:	2340      	movs	r3, #64	@ 0x40
 8001098:	1a1b      	subs	r3, r3, r0
 800109a:	409a      	lsls	r2, r3
 800109c:	1e53      	subs	r3, r2, #1
 800109e:	419a      	sbcs	r2, r3
 80010a0:	4315      	orrs	r5, r2
 80010a2:	2307      	movs	r3, #7
 80010a4:	2700      	movs	r7, #0
 80010a6:	402b      	ands	r3, r5
 80010a8:	e7b0      	b.n	800100c <__aeabi_dadd+0x2d0>
 80010aa:	08ed      	lsrs	r5, r5, #3
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <__aeabi_dadd+0x388>)
 80010ae:	0762      	lsls	r2, r4, #29
 80010b0:	432a      	orrs	r2, r5
 80010b2:	08e4      	lsrs	r4, r4, #3
 80010b4:	429f      	cmp	r7, r3
 80010b6:	d00f      	beq.n	80010d8 <__aeabi_dadd+0x39c>
 80010b8:	0324      	lsls	r4, r4, #12
 80010ba:	0b25      	lsrs	r5, r4, #12
 80010bc:	057c      	lsls	r4, r7, #21
 80010be:	0d64      	lsrs	r4, r4, #21
 80010c0:	e6d4      	b.n	8000e6c <__aeabi_dadd+0x130>
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	ff7fffff 	.word	0xff7fffff
 80010cc:	000007fe 	.word	0x000007fe
 80010d0:	08c0      	lsrs	r0, r0, #3
 80010d2:	0762      	lsls	r2, r4, #29
 80010d4:	4302      	orrs	r2, r0
 80010d6:	08e4      	lsrs	r4, r4, #3
 80010d8:	0013      	movs	r3, r2
 80010da:	4323      	orrs	r3, r4
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dadd+0x3a4>
 80010de:	e186      	b.n	80013ee <__aeabi_dadd+0x6b2>
 80010e0:	2580      	movs	r5, #128	@ 0x80
 80010e2:	032d      	lsls	r5, r5, #12
 80010e4:	4325      	orrs	r5, r4
 80010e6:	032d      	lsls	r5, r5, #12
 80010e8:	4cc3      	ldr	r4, [pc, #780]	@ (80013f8 <__aeabi_dadd+0x6bc>)
 80010ea:	0b2d      	lsrs	r5, r5, #12
 80010ec:	e6be      	b.n	8000e6c <__aeabi_dadd+0x130>
 80010ee:	4660      	mov	r0, ip
 80010f0:	4654      	mov	r4, sl
 80010f2:	000e      	movs	r6, r1
 80010f4:	0017      	movs	r7, r2
 80010f6:	08c5      	lsrs	r5, r0, #3
 80010f8:	e7d8      	b.n	80010ac <__aeabi_dadd+0x370>
 80010fa:	4cc0      	ldr	r4, [pc, #768]	@ (80013fc <__aeabi_dadd+0x6c0>)
 80010fc:	1aff      	subs	r7, r7, r3
 80010fe:	4014      	ands	r4, r2
 8001100:	e696      	b.n	8000e30 <__aeabi_dadd+0xf4>
 8001102:	4abf      	ldr	r2, [pc, #764]	@ (8001400 <__aeabi_dadd+0x6c4>)
 8001104:	1c79      	adds	r1, r7, #1
 8001106:	4211      	tst	r1, r2
 8001108:	d16b      	bne.n	80011e2 <__aeabi_dadd+0x4a6>
 800110a:	0022      	movs	r2, r4
 800110c:	4302      	orrs	r2, r0
 800110e:	2f00      	cmp	r7, #0
 8001110:	d000      	beq.n	8001114 <__aeabi_dadd+0x3d8>
 8001112:	e0db      	b.n	80012cc <__aeabi_dadd+0x590>
 8001114:	2a00      	cmp	r2, #0
 8001116:	d100      	bne.n	800111a <__aeabi_dadd+0x3de>
 8001118:	e12d      	b.n	8001376 <__aeabi_dadd+0x63a>
 800111a:	4662      	mov	r2, ip
 800111c:	4653      	mov	r3, sl
 800111e:	431a      	orrs	r2, r3
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x3e8>
 8001122:	e0b6      	b.n	8001292 <__aeabi_dadd+0x556>
 8001124:	4663      	mov	r3, ip
 8001126:	18c5      	adds	r5, r0, r3
 8001128:	4285      	cmp	r5, r0
 800112a:	4180      	sbcs	r0, r0
 800112c:	4454      	add	r4, sl
 800112e:	4240      	negs	r0, r0
 8001130:	1824      	adds	r4, r4, r0
 8001132:	0223      	lsls	r3, r4, #8
 8001134:	d502      	bpl.n	800113c <__aeabi_dadd+0x400>
 8001136:	000f      	movs	r7, r1
 8001138:	4bb0      	ldr	r3, [pc, #704]	@ (80013fc <__aeabi_dadd+0x6c0>)
 800113a:	401c      	ands	r4, r3
 800113c:	003a      	movs	r2, r7
 800113e:	0028      	movs	r0, r5
 8001140:	e7d8      	b.n	80010f4 <__aeabi_dadd+0x3b8>
 8001142:	4662      	mov	r2, ip
 8001144:	1a85      	subs	r5, r0, r2
 8001146:	42a8      	cmp	r0, r5
 8001148:	4192      	sbcs	r2, r2
 800114a:	4653      	mov	r3, sl
 800114c:	4252      	negs	r2, r2
 800114e:	4691      	mov	r9, r2
 8001150:	1ae3      	subs	r3, r4, r3
 8001152:	001a      	movs	r2, r3
 8001154:	464b      	mov	r3, r9
 8001156:	1ad2      	subs	r2, r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	4691      	mov	r9, r2
 800115c:	021a      	lsls	r2, r3, #8
 800115e:	d454      	bmi.n	800120a <__aeabi_dadd+0x4ce>
 8001160:	464a      	mov	r2, r9
 8001162:	464c      	mov	r4, r9
 8001164:	432a      	orrs	r2, r5
 8001166:	d000      	beq.n	800116a <__aeabi_dadd+0x42e>
 8001168:	e640      	b.n	8000dec <__aeabi_dadd+0xb0>
 800116a:	2600      	movs	r6, #0
 800116c:	2400      	movs	r4, #0
 800116e:	2500      	movs	r5, #0
 8001170:	e67c      	b.n	8000e6c <__aeabi_dadd+0x130>
 8001172:	4da1      	ldr	r5, [pc, #644]	@ (80013f8 <__aeabi_dadd+0x6bc>)
 8001174:	45a9      	cmp	r9, r5
 8001176:	d100      	bne.n	800117a <__aeabi_dadd+0x43e>
 8001178:	e090      	b.n	800129c <__aeabi_dadd+0x560>
 800117a:	2501      	movs	r5, #1
 800117c:	2a38      	cmp	r2, #56	@ 0x38
 800117e:	dd00      	ble.n	8001182 <__aeabi_dadd+0x446>
 8001180:	e6ab      	b.n	8000eda <__aeabi_dadd+0x19e>
 8001182:	2580      	movs	r5, #128	@ 0x80
 8001184:	042d      	lsls	r5, r5, #16
 8001186:	432c      	orrs	r4, r5
 8001188:	e695      	b.n	8000eb6 <__aeabi_dadd+0x17a>
 800118a:	0011      	movs	r1, r2
 800118c:	4655      	mov	r5, sl
 800118e:	3920      	subs	r1, #32
 8001190:	40cd      	lsrs	r5, r1
 8001192:	46a9      	mov	r9, r5
 8001194:	2a20      	cmp	r2, #32
 8001196:	d006      	beq.n	80011a6 <__aeabi_dadd+0x46a>
 8001198:	2140      	movs	r1, #64	@ 0x40
 800119a:	4653      	mov	r3, sl
 800119c:	1a8a      	subs	r2, r1, r2
 800119e:	4093      	lsls	r3, r2
 80011a0:	4662      	mov	r2, ip
 80011a2:	431a      	orrs	r2, r3
 80011a4:	4694      	mov	ip, r2
 80011a6:	4665      	mov	r5, ip
 80011a8:	1e6b      	subs	r3, r5, #1
 80011aa:	419d      	sbcs	r5, r3
 80011ac:	464b      	mov	r3, r9
 80011ae:	431d      	orrs	r5, r3
 80011b0:	e612      	b.n	8000dd8 <__aeabi_dadd+0x9c>
 80011b2:	0021      	movs	r1, r4
 80011b4:	4301      	orrs	r1, r0
 80011b6:	d100      	bne.n	80011ba <__aeabi_dadd+0x47e>
 80011b8:	e0c4      	b.n	8001344 <__aeabi_dadd+0x608>
 80011ba:	1e51      	subs	r1, r2, #1
 80011bc:	2a01      	cmp	r2, #1
 80011be:	d100      	bne.n	80011c2 <__aeabi_dadd+0x486>
 80011c0:	e0fb      	b.n	80013ba <__aeabi_dadd+0x67e>
 80011c2:	4d8d      	ldr	r5, [pc, #564]	@ (80013f8 <__aeabi_dadd+0x6bc>)
 80011c4:	42aa      	cmp	r2, r5
 80011c6:	d100      	bne.n	80011ca <__aeabi_dadd+0x48e>
 80011c8:	e0b5      	b.n	8001336 <__aeabi_dadd+0x5fa>
 80011ca:	2501      	movs	r5, #1
 80011cc:	2938      	cmp	r1, #56	@ 0x38
 80011ce:	dd00      	ble.n	80011d2 <__aeabi_dadd+0x496>
 80011d0:	e741      	b.n	8001056 <__aeabi_dadd+0x31a>
 80011d2:	000a      	movs	r2, r1
 80011d4:	e72f      	b.n	8001036 <__aeabi_dadd+0x2fa>
 80011d6:	4c89      	ldr	r4, [pc, #548]	@ (80013fc <__aeabi_dadd+0x6c0>)
 80011d8:	1aff      	subs	r7, r7, r3
 80011da:	4014      	ands	r4, r2
 80011dc:	0762      	lsls	r2, r4, #29
 80011de:	08e4      	lsrs	r4, r4, #3
 80011e0:	e76a      	b.n	80010b8 <__aeabi_dadd+0x37c>
 80011e2:	4a85      	ldr	r2, [pc, #532]	@ (80013f8 <__aeabi_dadd+0x6bc>)
 80011e4:	4291      	cmp	r1, r2
 80011e6:	d100      	bne.n	80011ea <__aeabi_dadd+0x4ae>
 80011e8:	e0e3      	b.n	80013b2 <__aeabi_dadd+0x676>
 80011ea:	4663      	mov	r3, ip
 80011ec:	18c2      	adds	r2, r0, r3
 80011ee:	4282      	cmp	r2, r0
 80011f0:	4180      	sbcs	r0, r0
 80011f2:	0023      	movs	r3, r4
 80011f4:	4240      	negs	r0, r0
 80011f6:	4453      	add	r3, sl
 80011f8:	181b      	adds	r3, r3, r0
 80011fa:	07dd      	lsls	r5, r3, #31
 80011fc:	085c      	lsrs	r4, r3, #1
 80011fe:	2307      	movs	r3, #7
 8001200:	0852      	lsrs	r2, r2, #1
 8001202:	4315      	orrs	r5, r2
 8001204:	000f      	movs	r7, r1
 8001206:	402b      	ands	r3, r5
 8001208:	e700      	b.n	800100c <__aeabi_dadd+0x2d0>
 800120a:	4663      	mov	r3, ip
 800120c:	1a1d      	subs	r5, r3, r0
 800120e:	45ac      	cmp	ip, r5
 8001210:	4192      	sbcs	r2, r2
 8001212:	4653      	mov	r3, sl
 8001214:	4252      	negs	r2, r2
 8001216:	1b1c      	subs	r4, r3, r4
 8001218:	000e      	movs	r6, r1
 800121a:	4688      	mov	r8, r1
 800121c:	1aa4      	subs	r4, r4, r2
 800121e:	e5e5      	b.n	8000dec <__aeabi_dadd+0xb0>
 8001220:	2d00      	cmp	r5, #0
 8001222:	d000      	beq.n	8001226 <__aeabi_dadd+0x4ea>
 8001224:	e091      	b.n	800134a <__aeabi_dadd+0x60e>
 8001226:	2a00      	cmp	r2, #0
 8001228:	d138      	bne.n	800129c <__aeabi_dadd+0x560>
 800122a:	2480      	movs	r4, #128	@ 0x80
 800122c:	2600      	movs	r6, #0
 800122e:	0324      	lsls	r4, r4, #12
 8001230:	e756      	b.n	80010e0 <__aeabi_dadd+0x3a4>
 8001232:	4663      	mov	r3, ip
 8001234:	18c5      	adds	r5, r0, r3
 8001236:	4285      	cmp	r5, r0
 8001238:	4180      	sbcs	r0, r0
 800123a:	4454      	add	r4, sl
 800123c:	4240      	negs	r0, r0
 800123e:	1824      	adds	r4, r4, r0
 8001240:	2701      	movs	r7, #1
 8001242:	0223      	lsls	r3, r4, #8
 8001244:	d400      	bmi.n	8001248 <__aeabi_dadd+0x50c>
 8001246:	e6df      	b.n	8001008 <__aeabi_dadd+0x2cc>
 8001248:	2702      	movs	r7, #2
 800124a:	e687      	b.n	8000f5c <__aeabi_dadd+0x220>
 800124c:	4663      	mov	r3, ip
 800124e:	1ac5      	subs	r5, r0, r3
 8001250:	42a8      	cmp	r0, r5
 8001252:	4180      	sbcs	r0, r0
 8001254:	4653      	mov	r3, sl
 8001256:	4240      	negs	r0, r0
 8001258:	1ae4      	subs	r4, r4, r3
 800125a:	2701      	movs	r7, #1
 800125c:	1a24      	subs	r4, r4, r0
 800125e:	e5c0      	b.n	8000de2 <__aeabi_dadd+0xa6>
 8001260:	0762      	lsls	r2, r4, #29
 8001262:	08c0      	lsrs	r0, r0, #3
 8001264:	4302      	orrs	r2, r0
 8001266:	08e4      	lsrs	r4, r4, #3
 8001268:	e736      	b.n	80010d8 <__aeabi_dadd+0x39c>
 800126a:	0011      	movs	r1, r2
 800126c:	4653      	mov	r3, sl
 800126e:	3920      	subs	r1, #32
 8001270:	40cb      	lsrs	r3, r1
 8001272:	4699      	mov	r9, r3
 8001274:	2a20      	cmp	r2, #32
 8001276:	d006      	beq.n	8001286 <__aeabi_dadd+0x54a>
 8001278:	2140      	movs	r1, #64	@ 0x40
 800127a:	4653      	mov	r3, sl
 800127c:	1a8a      	subs	r2, r1, r2
 800127e:	4093      	lsls	r3, r2
 8001280:	4662      	mov	r2, ip
 8001282:	431a      	orrs	r2, r3
 8001284:	4694      	mov	ip, r2
 8001286:	4665      	mov	r5, ip
 8001288:	1e6b      	subs	r3, r5, #1
 800128a:	419d      	sbcs	r5, r3
 800128c:	464b      	mov	r3, r9
 800128e:	431d      	orrs	r5, r3
 8001290:	e659      	b.n	8000f46 <__aeabi_dadd+0x20a>
 8001292:	0762      	lsls	r2, r4, #29
 8001294:	08c0      	lsrs	r0, r0, #3
 8001296:	4302      	orrs	r2, r0
 8001298:	08e4      	lsrs	r4, r4, #3
 800129a:	e70d      	b.n	80010b8 <__aeabi_dadd+0x37c>
 800129c:	4653      	mov	r3, sl
 800129e:	075a      	lsls	r2, r3, #29
 80012a0:	4663      	mov	r3, ip
 80012a2:	08d8      	lsrs	r0, r3, #3
 80012a4:	4653      	mov	r3, sl
 80012a6:	000e      	movs	r6, r1
 80012a8:	4302      	orrs	r2, r0
 80012aa:	08dc      	lsrs	r4, r3, #3
 80012ac:	e714      	b.n	80010d8 <__aeabi_dadd+0x39c>
 80012ae:	0015      	movs	r5, r2
 80012b0:	0026      	movs	r6, r4
 80012b2:	3d20      	subs	r5, #32
 80012b4:	40ee      	lsrs	r6, r5
 80012b6:	2a20      	cmp	r2, #32
 80012b8:	d003      	beq.n	80012c2 <__aeabi_dadd+0x586>
 80012ba:	2540      	movs	r5, #64	@ 0x40
 80012bc:	1aaa      	subs	r2, r5, r2
 80012be:	4094      	lsls	r4, r2
 80012c0:	4320      	orrs	r0, r4
 80012c2:	1e42      	subs	r2, r0, #1
 80012c4:	4190      	sbcs	r0, r2
 80012c6:	0005      	movs	r5, r0
 80012c8:	4335      	orrs	r5, r6
 80012ca:	e606      	b.n	8000eda <__aeabi_dadd+0x19e>
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	d07c      	beq.n	80013ca <__aeabi_dadd+0x68e>
 80012d0:	4662      	mov	r2, ip
 80012d2:	4653      	mov	r3, sl
 80012d4:	08c0      	lsrs	r0, r0, #3
 80012d6:	431a      	orrs	r2, r3
 80012d8:	d100      	bne.n	80012dc <__aeabi_dadd+0x5a0>
 80012da:	e6fa      	b.n	80010d2 <__aeabi_dadd+0x396>
 80012dc:	0762      	lsls	r2, r4, #29
 80012de:	4310      	orrs	r0, r2
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	08e4      	lsrs	r4, r4, #3
 80012e4:	0312      	lsls	r2, r2, #12
 80012e6:	4214      	tst	r4, r2
 80012e8:	d008      	beq.n	80012fc <__aeabi_dadd+0x5c0>
 80012ea:	08d9      	lsrs	r1, r3, #3
 80012ec:	4211      	tst	r1, r2
 80012ee:	d105      	bne.n	80012fc <__aeabi_dadd+0x5c0>
 80012f0:	4663      	mov	r3, ip
 80012f2:	08d8      	lsrs	r0, r3, #3
 80012f4:	4653      	mov	r3, sl
 80012f6:	000c      	movs	r4, r1
 80012f8:	075b      	lsls	r3, r3, #29
 80012fa:	4318      	orrs	r0, r3
 80012fc:	0f42      	lsrs	r2, r0, #29
 80012fe:	00c0      	lsls	r0, r0, #3
 8001300:	08c0      	lsrs	r0, r0, #3
 8001302:	0752      	lsls	r2, r2, #29
 8001304:	4302      	orrs	r2, r0
 8001306:	e6e7      	b.n	80010d8 <__aeabi_dadd+0x39c>
 8001308:	2a00      	cmp	r2, #0
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x5d2>
 800130c:	e72d      	b.n	800116a <__aeabi_dadd+0x42e>
 800130e:	4663      	mov	r3, ip
 8001310:	08d8      	lsrs	r0, r3, #3
 8001312:	4653      	mov	r3, sl
 8001314:	075a      	lsls	r2, r3, #29
 8001316:	000e      	movs	r6, r1
 8001318:	4302      	orrs	r2, r0
 800131a:	08dc      	lsrs	r4, r3, #3
 800131c:	e6cc      	b.n	80010b8 <__aeabi_dadd+0x37c>
 800131e:	4663      	mov	r3, ip
 8001320:	1a1d      	subs	r5, r3, r0
 8001322:	45ac      	cmp	ip, r5
 8001324:	4192      	sbcs	r2, r2
 8001326:	4653      	mov	r3, sl
 8001328:	4252      	negs	r2, r2
 800132a:	1b1c      	subs	r4, r3, r4
 800132c:	000e      	movs	r6, r1
 800132e:	4688      	mov	r8, r1
 8001330:	1aa4      	subs	r4, r4, r2
 8001332:	3701      	adds	r7, #1
 8001334:	e555      	b.n	8000de2 <__aeabi_dadd+0xa6>
 8001336:	4663      	mov	r3, ip
 8001338:	08d9      	lsrs	r1, r3, #3
 800133a:	4653      	mov	r3, sl
 800133c:	075a      	lsls	r2, r3, #29
 800133e:	430a      	orrs	r2, r1
 8001340:	08dc      	lsrs	r4, r3, #3
 8001342:	e6c9      	b.n	80010d8 <__aeabi_dadd+0x39c>
 8001344:	4660      	mov	r0, ip
 8001346:	4654      	mov	r4, sl
 8001348:	e6d4      	b.n	80010f4 <__aeabi_dadd+0x3b8>
 800134a:	08c0      	lsrs	r0, r0, #3
 800134c:	2a00      	cmp	r2, #0
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x616>
 8001350:	e6bf      	b.n	80010d2 <__aeabi_dadd+0x396>
 8001352:	0762      	lsls	r2, r4, #29
 8001354:	4310      	orrs	r0, r2
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	08e4      	lsrs	r4, r4, #3
 800135a:	0312      	lsls	r2, r2, #12
 800135c:	4214      	tst	r4, r2
 800135e:	d0cd      	beq.n	80012fc <__aeabi_dadd+0x5c0>
 8001360:	08dd      	lsrs	r5, r3, #3
 8001362:	4215      	tst	r5, r2
 8001364:	d1ca      	bne.n	80012fc <__aeabi_dadd+0x5c0>
 8001366:	4663      	mov	r3, ip
 8001368:	08d8      	lsrs	r0, r3, #3
 800136a:	4653      	mov	r3, sl
 800136c:	075b      	lsls	r3, r3, #29
 800136e:	000e      	movs	r6, r1
 8001370:	002c      	movs	r4, r5
 8001372:	4318      	orrs	r0, r3
 8001374:	e7c2      	b.n	80012fc <__aeabi_dadd+0x5c0>
 8001376:	4663      	mov	r3, ip
 8001378:	08d9      	lsrs	r1, r3, #3
 800137a:	4653      	mov	r3, sl
 800137c:	075a      	lsls	r2, r3, #29
 800137e:	430a      	orrs	r2, r1
 8001380:	08dc      	lsrs	r4, r3, #3
 8001382:	e699      	b.n	80010b8 <__aeabi_dadd+0x37c>
 8001384:	4663      	mov	r3, ip
 8001386:	08d8      	lsrs	r0, r3, #3
 8001388:	4653      	mov	r3, sl
 800138a:	075a      	lsls	r2, r3, #29
 800138c:	000e      	movs	r6, r1
 800138e:	4302      	orrs	r2, r0
 8001390:	08dc      	lsrs	r4, r3, #3
 8001392:	e6a1      	b.n	80010d8 <__aeabi_dadd+0x39c>
 8001394:	0011      	movs	r1, r2
 8001396:	0027      	movs	r7, r4
 8001398:	3920      	subs	r1, #32
 800139a:	40cf      	lsrs	r7, r1
 800139c:	2a20      	cmp	r2, #32
 800139e:	d003      	beq.n	80013a8 <__aeabi_dadd+0x66c>
 80013a0:	2140      	movs	r1, #64	@ 0x40
 80013a2:	1a8a      	subs	r2, r1, r2
 80013a4:	4094      	lsls	r4, r2
 80013a6:	4320      	orrs	r0, r4
 80013a8:	1e42      	subs	r2, r0, #1
 80013aa:	4190      	sbcs	r0, r2
 80013ac:	0005      	movs	r5, r0
 80013ae:	433d      	orrs	r5, r7
 80013b0:	e651      	b.n	8001056 <__aeabi_dadd+0x31a>
 80013b2:	000c      	movs	r4, r1
 80013b4:	2500      	movs	r5, #0
 80013b6:	2200      	movs	r2, #0
 80013b8:	e558      	b.n	8000e6c <__aeabi_dadd+0x130>
 80013ba:	4460      	add	r0, ip
 80013bc:	4560      	cmp	r0, ip
 80013be:	4192      	sbcs	r2, r2
 80013c0:	4454      	add	r4, sl
 80013c2:	4252      	negs	r2, r2
 80013c4:	0005      	movs	r5, r0
 80013c6:	18a4      	adds	r4, r4, r2
 80013c8:	e73a      	b.n	8001240 <__aeabi_dadd+0x504>
 80013ca:	4653      	mov	r3, sl
 80013cc:	075a      	lsls	r2, r3, #29
 80013ce:	4663      	mov	r3, ip
 80013d0:	08d9      	lsrs	r1, r3, #3
 80013d2:	4653      	mov	r3, sl
 80013d4:	430a      	orrs	r2, r1
 80013d6:	08dc      	lsrs	r4, r3, #3
 80013d8:	e67e      	b.n	80010d8 <__aeabi_dadd+0x39c>
 80013da:	001a      	movs	r2, r3
 80013dc:	001c      	movs	r4, r3
 80013de:	432a      	orrs	r2, r5
 80013e0:	d000      	beq.n	80013e4 <__aeabi_dadd+0x6a8>
 80013e2:	e6ab      	b.n	800113c <__aeabi_dadd+0x400>
 80013e4:	e6c1      	b.n	800116a <__aeabi_dadd+0x42e>
 80013e6:	2120      	movs	r1, #32
 80013e8:	2500      	movs	r5, #0
 80013ea:	1a09      	subs	r1, r1, r0
 80013ec:	e519      	b.n	8000e22 <__aeabi_dadd+0xe6>
 80013ee:	2200      	movs	r2, #0
 80013f0:	2500      	movs	r5, #0
 80013f2:	4c01      	ldr	r4, [pc, #4]	@ (80013f8 <__aeabi_dadd+0x6bc>)
 80013f4:	e53a      	b.n	8000e6c <__aeabi_dadd+0x130>
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	000007ff 	.word	0x000007ff
 80013fc:	ff7fffff 	.word	0xff7fffff
 8001400:	000007fe 	.word	0x000007fe

08001404 <__aeabi_dmul>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	46de      	mov	lr, fp
 800140a:	464e      	mov	r6, r9
 800140c:	4645      	mov	r5, r8
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	001f      	movs	r7, r3
 8001412:	030b      	lsls	r3, r1, #12
 8001414:	0b1b      	lsrs	r3, r3, #12
 8001416:	0016      	movs	r6, r2
 8001418:	469a      	mov	sl, r3
 800141a:	0fca      	lsrs	r2, r1, #31
 800141c:	004b      	lsls	r3, r1, #1
 800141e:	0004      	movs	r4, r0
 8001420:	4693      	mov	fp, r2
 8001422:	b087      	sub	sp, #28
 8001424:	0d5b      	lsrs	r3, r3, #21
 8001426:	d100      	bne.n	800142a <__aeabi_dmul+0x26>
 8001428:	e0d5      	b.n	80015d6 <__aeabi_dmul+0x1d2>
 800142a:	4abb      	ldr	r2, [pc, #748]	@ (8001718 <__aeabi_dmul+0x314>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x2e>
 8001430:	e0f8      	b.n	8001624 <__aeabi_dmul+0x220>
 8001432:	4651      	mov	r1, sl
 8001434:	0f42      	lsrs	r2, r0, #29
 8001436:	00c9      	lsls	r1, r1, #3
 8001438:	430a      	orrs	r2, r1
 800143a:	2180      	movs	r1, #128	@ 0x80
 800143c:	0409      	lsls	r1, r1, #16
 800143e:	4311      	orrs	r1, r2
 8001440:	00c2      	lsls	r2, r0, #3
 8001442:	4691      	mov	r9, r2
 8001444:	4ab5      	ldr	r2, [pc, #724]	@ (800171c <__aeabi_dmul+0x318>)
 8001446:	468a      	mov	sl, r1
 8001448:	189d      	adds	r5, r3, r2
 800144a:	2300      	movs	r3, #0
 800144c:	4698      	mov	r8, r3
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	033c      	lsls	r4, r7, #12
 8001452:	007b      	lsls	r3, r7, #1
 8001454:	0ffa      	lsrs	r2, r7, #31
 8001456:	0030      	movs	r0, r6
 8001458:	0b24      	lsrs	r4, r4, #12
 800145a:	0d5b      	lsrs	r3, r3, #21
 800145c:	9200      	str	r2, [sp, #0]
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x5e>
 8001460:	e096      	b.n	8001590 <__aeabi_dmul+0x18c>
 8001462:	4aad      	ldr	r2, [pc, #692]	@ (8001718 <__aeabi_dmul+0x314>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d031      	beq.n	80014cc <__aeabi_dmul+0xc8>
 8001468:	0f72      	lsrs	r2, r6, #29
 800146a:	00e4      	lsls	r4, r4, #3
 800146c:	4322      	orrs	r2, r4
 800146e:	2480      	movs	r4, #128	@ 0x80
 8001470:	0424      	lsls	r4, r4, #16
 8001472:	4314      	orrs	r4, r2
 8001474:	4aa9      	ldr	r2, [pc, #676]	@ (800171c <__aeabi_dmul+0x318>)
 8001476:	00f0      	lsls	r0, r6, #3
 8001478:	4694      	mov	ip, r2
 800147a:	4463      	add	r3, ip
 800147c:	195b      	adds	r3, r3, r5
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	4642      	mov	r2, r8
 8001484:	2600      	movs	r6, #0
 8001486:	2a0a      	cmp	r2, #10
 8001488:	dc42      	bgt.n	8001510 <__aeabi_dmul+0x10c>
 800148a:	465a      	mov	r2, fp
 800148c:	9900      	ldr	r1, [sp, #0]
 800148e:	404a      	eors	r2, r1
 8001490:	4693      	mov	fp, r2
 8001492:	4642      	mov	r2, r8
 8001494:	2a02      	cmp	r2, #2
 8001496:	dc32      	bgt.n	80014fe <__aeabi_dmul+0xfa>
 8001498:	3a01      	subs	r2, #1
 800149a:	2a01      	cmp	r2, #1
 800149c:	d900      	bls.n	80014a0 <__aeabi_dmul+0x9c>
 800149e:	e149      	b.n	8001734 <__aeabi_dmul+0x330>
 80014a0:	2e02      	cmp	r6, #2
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dmul+0xa2>
 80014a4:	e0ca      	b.n	800163c <__aeabi_dmul+0x238>
 80014a6:	2e01      	cmp	r6, #1
 80014a8:	d13d      	bne.n	8001526 <__aeabi_dmul+0x122>
 80014aa:	2300      	movs	r3, #0
 80014ac:	2400      	movs	r4, #0
 80014ae:	2200      	movs	r2, #0
 80014b0:	0010      	movs	r0, r2
 80014b2:	465a      	mov	r2, fp
 80014b4:	051b      	lsls	r3, r3, #20
 80014b6:	4323      	orrs	r3, r4
 80014b8:	07d2      	lsls	r2, r2, #31
 80014ba:	4313      	orrs	r3, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	b007      	add	sp, #28
 80014c0:	bcf0      	pop	{r4, r5, r6, r7}
 80014c2:	46bb      	mov	fp, r7
 80014c4:	46b2      	mov	sl, r6
 80014c6:	46a9      	mov	r9, r5
 80014c8:	46a0      	mov	r8, r4
 80014ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014cc:	4b92      	ldr	r3, [pc, #584]	@ (8001718 <__aeabi_dmul+0x314>)
 80014ce:	4326      	orrs	r6, r4
 80014d0:	18eb      	adds	r3, r5, r3
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dmul+0xd4>
 80014d6:	e0bb      	b.n	8001650 <__aeabi_dmul+0x24c>
 80014d8:	2203      	movs	r2, #3
 80014da:	4641      	mov	r1, r8
 80014dc:	4311      	orrs	r1, r2
 80014de:	465a      	mov	r2, fp
 80014e0:	4688      	mov	r8, r1
 80014e2:	9900      	ldr	r1, [sp, #0]
 80014e4:	404a      	eors	r2, r1
 80014e6:	2180      	movs	r1, #128	@ 0x80
 80014e8:	0109      	lsls	r1, r1, #4
 80014ea:	468c      	mov	ip, r1
 80014ec:	0029      	movs	r1, r5
 80014ee:	4461      	add	r1, ip
 80014f0:	9101      	str	r1, [sp, #4]
 80014f2:	4641      	mov	r1, r8
 80014f4:	290a      	cmp	r1, #10
 80014f6:	dd00      	ble.n	80014fa <__aeabi_dmul+0xf6>
 80014f8:	e233      	b.n	8001962 <__aeabi_dmul+0x55e>
 80014fa:	4693      	mov	fp, r2
 80014fc:	2603      	movs	r6, #3
 80014fe:	4642      	mov	r2, r8
 8001500:	2701      	movs	r7, #1
 8001502:	4097      	lsls	r7, r2
 8001504:	21a6      	movs	r1, #166	@ 0xa6
 8001506:	003a      	movs	r2, r7
 8001508:	00c9      	lsls	r1, r1, #3
 800150a:	400a      	ands	r2, r1
 800150c:	420f      	tst	r7, r1
 800150e:	d031      	beq.n	8001574 <__aeabi_dmul+0x170>
 8001510:	9e02      	ldr	r6, [sp, #8]
 8001512:	2e02      	cmp	r6, #2
 8001514:	d100      	bne.n	8001518 <__aeabi_dmul+0x114>
 8001516:	e235      	b.n	8001984 <__aeabi_dmul+0x580>
 8001518:	2e03      	cmp	r6, #3
 800151a:	d100      	bne.n	800151e <__aeabi_dmul+0x11a>
 800151c:	e1d2      	b.n	80018c4 <__aeabi_dmul+0x4c0>
 800151e:	4654      	mov	r4, sl
 8001520:	4648      	mov	r0, r9
 8001522:	2e01      	cmp	r6, #1
 8001524:	d0c1      	beq.n	80014aa <__aeabi_dmul+0xa6>
 8001526:	9a01      	ldr	r2, [sp, #4]
 8001528:	4b7d      	ldr	r3, [pc, #500]	@ (8001720 <__aeabi_dmul+0x31c>)
 800152a:	4694      	mov	ip, r2
 800152c:	4463      	add	r3, ip
 800152e:	2b00      	cmp	r3, #0
 8001530:	dc00      	bgt.n	8001534 <__aeabi_dmul+0x130>
 8001532:	e0c0      	b.n	80016b6 <__aeabi_dmul+0x2b2>
 8001534:	0742      	lsls	r2, r0, #29
 8001536:	d009      	beq.n	800154c <__aeabi_dmul+0x148>
 8001538:	220f      	movs	r2, #15
 800153a:	4002      	ands	r2, r0
 800153c:	2a04      	cmp	r2, #4
 800153e:	d005      	beq.n	800154c <__aeabi_dmul+0x148>
 8001540:	1d02      	adds	r2, r0, #4
 8001542:	4282      	cmp	r2, r0
 8001544:	4180      	sbcs	r0, r0
 8001546:	4240      	negs	r0, r0
 8001548:	1824      	adds	r4, r4, r0
 800154a:	0010      	movs	r0, r2
 800154c:	01e2      	lsls	r2, r4, #7
 800154e:	d506      	bpl.n	800155e <__aeabi_dmul+0x15a>
 8001550:	4b74      	ldr	r3, [pc, #464]	@ (8001724 <__aeabi_dmul+0x320>)
 8001552:	9a01      	ldr	r2, [sp, #4]
 8001554:	401c      	ands	r4, r3
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	4694      	mov	ip, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4463      	add	r3, ip
 800155e:	4a72      	ldr	r2, [pc, #456]	@ (8001728 <__aeabi_dmul+0x324>)
 8001560:	4293      	cmp	r3, r2
 8001562:	dc6b      	bgt.n	800163c <__aeabi_dmul+0x238>
 8001564:	0762      	lsls	r2, r4, #29
 8001566:	08c0      	lsrs	r0, r0, #3
 8001568:	0264      	lsls	r4, r4, #9
 800156a:	055b      	lsls	r3, r3, #21
 800156c:	4302      	orrs	r2, r0
 800156e:	0b24      	lsrs	r4, r4, #12
 8001570:	0d5b      	lsrs	r3, r3, #21
 8001572:	e79d      	b.n	80014b0 <__aeabi_dmul+0xac>
 8001574:	2190      	movs	r1, #144	@ 0x90
 8001576:	0089      	lsls	r1, r1, #2
 8001578:	420f      	tst	r7, r1
 800157a:	d163      	bne.n	8001644 <__aeabi_dmul+0x240>
 800157c:	2288      	movs	r2, #136	@ 0x88
 800157e:	423a      	tst	r2, r7
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x180>
 8001582:	e0d7      	b.n	8001734 <__aeabi_dmul+0x330>
 8001584:	9b00      	ldr	r3, [sp, #0]
 8001586:	46a2      	mov	sl, r4
 8001588:	469b      	mov	fp, r3
 800158a:	4681      	mov	r9, r0
 800158c:	9602      	str	r6, [sp, #8]
 800158e:	e7bf      	b.n	8001510 <__aeabi_dmul+0x10c>
 8001590:	0023      	movs	r3, r4
 8001592:	4333      	orrs	r3, r6
 8001594:	d100      	bne.n	8001598 <__aeabi_dmul+0x194>
 8001596:	e07f      	b.n	8001698 <__aeabi_dmul+0x294>
 8001598:	2c00      	cmp	r4, #0
 800159a:	d100      	bne.n	800159e <__aeabi_dmul+0x19a>
 800159c:	e1ad      	b.n	80018fa <__aeabi_dmul+0x4f6>
 800159e:	0020      	movs	r0, r4
 80015a0:	f000 fe60 	bl	8002264 <__clzsi2>
 80015a4:	0002      	movs	r2, r0
 80015a6:	0003      	movs	r3, r0
 80015a8:	3a0b      	subs	r2, #11
 80015aa:	201d      	movs	r0, #29
 80015ac:	0019      	movs	r1, r3
 80015ae:	1a82      	subs	r2, r0, r2
 80015b0:	0030      	movs	r0, r6
 80015b2:	3908      	subs	r1, #8
 80015b4:	40d0      	lsrs	r0, r2
 80015b6:	408c      	lsls	r4, r1
 80015b8:	4304      	orrs	r4, r0
 80015ba:	0030      	movs	r0, r6
 80015bc:	4088      	lsls	r0, r1
 80015be:	4a5b      	ldr	r2, [pc, #364]	@ (800172c <__aeabi_dmul+0x328>)
 80015c0:	1aeb      	subs	r3, r5, r3
 80015c2:	4694      	mov	ip, r2
 80015c4:	4463      	add	r3, ip
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	9201      	str	r2, [sp, #4]
 80015ca:	4642      	mov	r2, r8
 80015cc:	2600      	movs	r6, #0
 80015ce:	2a0a      	cmp	r2, #10
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_dmul+0x1d0>
 80015d2:	e75a      	b.n	800148a <__aeabi_dmul+0x86>
 80015d4:	e79c      	b.n	8001510 <__aeabi_dmul+0x10c>
 80015d6:	4653      	mov	r3, sl
 80015d8:	4303      	orrs	r3, r0
 80015da:	4699      	mov	r9, r3
 80015dc:	d054      	beq.n	8001688 <__aeabi_dmul+0x284>
 80015de:	4653      	mov	r3, sl
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0x1e2>
 80015e4:	e177      	b.n	80018d6 <__aeabi_dmul+0x4d2>
 80015e6:	4650      	mov	r0, sl
 80015e8:	f000 fe3c 	bl	8002264 <__clzsi2>
 80015ec:	230b      	movs	r3, #11
 80015ee:	425b      	negs	r3, r3
 80015f0:	469c      	mov	ip, r3
 80015f2:	0002      	movs	r2, r0
 80015f4:	4484      	add	ip, r0
 80015f6:	0011      	movs	r1, r2
 80015f8:	4650      	mov	r0, sl
 80015fa:	3908      	subs	r1, #8
 80015fc:	4088      	lsls	r0, r1
 80015fe:	231d      	movs	r3, #29
 8001600:	4680      	mov	r8, r0
 8001602:	4660      	mov	r0, ip
 8001604:	1a1b      	subs	r3, r3, r0
 8001606:	0020      	movs	r0, r4
 8001608:	40d8      	lsrs	r0, r3
 800160a:	0003      	movs	r3, r0
 800160c:	4640      	mov	r0, r8
 800160e:	4303      	orrs	r3, r0
 8001610:	469a      	mov	sl, r3
 8001612:	0023      	movs	r3, r4
 8001614:	408b      	lsls	r3, r1
 8001616:	4699      	mov	r9, r3
 8001618:	2300      	movs	r3, #0
 800161a:	4d44      	ldr	r5, [pc, #272]	@ (800172c <__aeabi_dmul+0x328>)
 800161c:	4698      	mov	r8, r3
 800161e:	1aad      	subs	r5, r5, r2
 8001620:	9302      	str	r3, [sp, #8]
 8001622:	e715      	b.n	8001450 <__aeabi_dmul+0x4c>
 8001624:	4652      	mov	r2, sl
 8001626:	4302      	orrs	r2, r0
 8001628:	4691      	mov	r9, r2
 800162a:	d126      	bne.n	800167a <__aeabi_dmul+0x276>
 800162c:	2200      	movs	r2, #0
 800162e:	001d      	movs	r5, r3
 8001630:	2302      	movs	r3, #2
 8001632:	4692      	mov	sl, r2
 8001634:	3208      	adds	r2, #8
 8001636:	4690      	mov	r8, r2
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	e709      	b.n	8001450 <__aeabi_dmul+0x4c>
 800163c:	2400      	movs	r4, #0
 800163e:	2200      	movs	r2, #0
 8001640:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <__aeabi_dmul+0x314>)
 8001642:	e735      	b.n	80014b0 <__aeabi_dmul+0xac>
 8001644:	2300      	movs	r3, #0
 8001646:	2480      	movs	r4, #128	@ 0x80
 8001648:	469b      	mov	fp, r3
 800164a:	0324      	lsls	r4, r4, #12
 800164c:	4b32      	ldr	r3, [pc, #200]	@ (8001718 <__aeabi_dmul+0x314>)
 800164e:	e72f      	b.n	80014b0 <__aeabi_dmul+0xac>
 8001650:	2202      	movs	r2, #2
 8001652:	4641      	mov	r1, r8
 8001654:	4311      	orrs	r1, r2
 8001656:	2280      	movs	r2, #128	@ 0x80
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	4694      	mov	ip, r2
 800165c:	002a      	movs	r2, r5
 800165e:	4462      	add	r2, ip
 8001660:	4688      	mov	r8, r1
 8001662:	9201      	str	r2, [sp, #4]
 8001664:	290a      	cmp	r1, #10
 8001666:	dd00      	ble.n	800166a <__aeabi_dmul+0x266>
 8001668:	e752      	b.n	8001510 <__aeabi_dmul+0x10c>
 800166a:	465a      	mov	r2, fp
 800166c:	2000      	movs	r0, #0
 800166e:	9900      	ldr	r1, [sp, #0]
 8001670:	0004      	movs	r4, r0
 8001672:	404a      	eors	r2, r1
 8001674:	4693      	mov	fp, r2
 8001676:	2602      	movs	r6, #2
 8001678:	e70b      	b.n	8001492 <__aeabi_dmul+0x8e>
 800167a:	220c      	movs	r2, #12
 800167c:	001d      	movs	r5, r3
 800167e:	2303      	movs	r3, #3
 8001680:	4681      	mov	r9, r0
 8001682:	4690      	mov	r8, r2
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	e6e3      	b.n	8001450 <__aeabi_dmul+0x4c>
 8001688:	2300      	movs	r3, #0
 800168a:	469a      	mov	sl, r3
 800168c:	3304      	adds	r3, #4
 800168e:	4698      	mov	r8, r3
 8001690:	3b03      	subs	r3, #3
 8001692:	2500      	movs	r5, #0
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	e6db      	b.n	8001450 <__aeabi_dmul+0x4c>
 8001698:	4642      	mov	r2, r8
 800169a:	3301      	adds	r3, #1
 800169c:	431a      	orrs	r2, r3
 800169e:	002b      	movs	r3, r5
 80016a0:	4690      	mov	r8, r2
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	9201      	str	r2, [sp, #4]
 80016a6:	4642      	mov	r2, r8
 80016a8:	2400      	movs	r4, #0
 80016aa:	2000      	movs	r0, #0
 80016ac:	2601      	movs	r6, #1
 80016ae:	2a0a      	cmp	r2, #10
 80016b0:	dc00      	bgt.n	80016b4 <__aeabi_dmul+0x2b0>
 80016b2:	e6ea      	b.n	800148a <__aeabi_dmul+0x86>
 80016b4:	e72c      	b.n	8001510 <__aeabi_dmul+0x10c>
 80016b6:	2201      	movs	r2, #1
 80016b8:	1ad2      	subs	r2, r2, r3
 80016ba:	2a38      	cmp	r2, #56	@ 0x38
 80016bc:	dd00      	ble.n	80016c0 <__aeabi_dmul+0x2bc>
 80016be:	e6f4      	b.n	80014aa <__aeabi_dmul+0xa6>
 80016c0:	2a1f      	cmp	r2, #31
 80016c2:	dc00      	bgt.n	80016c6 <__aeabi_dmul+0x2c2>
 80016c4:	e12a      	b.n	800191c <__aeabi_dmul+0x518>
 80016c6:	211f      	movs	r1, #31
 80016c8:	4249      	negs	r1, r1
 80016ca:	1acb      	subs	r3, r1, r3
 80016cc:	0021      	movs	r1, r4
 80016ce:	40d9      	lsrs	r1, r3
 80016d0:	000b      	movs	r3, r1
 80016d2:	2a20      	cmp	r2, #32
 80016d4:	d005      	beq.n	80016e2 <__aeabi_dmul+0x2de>
 80016d6:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <__aeabi_dmul+0x32c>)
 80016d8:	9d01      	ldr	r5, [sp, #4]
 80016da:	4694      	mov	ip, r2
 80016dc:	4465      	add	r5, ip
 80016de:	40ac      	lsls	r4, r5
 80016e0:	4320      	orrs	r0, r4
 80016e2:	1e42      	subs	r2, r0, #1
 80016e4:	4190      	sbcs	r0, r2
 80016e6:	4318      	orrs	r0, r3
 80016e8:	2307      	movs	r3, #7
 80016ea:	0019      	movs	r1, r3
 80016ec:	2400      	movs	r4, #0
 80016ee:	4001      	ands	r1, r0
 80016f0:	4203      	tst	r3, r0
 80016f2:	d00c      	beq.n	800170e <__aeabi_dmul+0x30a>
 80016f4:	230f      	movs	r3, #15
 80016f6:	4003      	ands	r3, r0
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d100      	bne.n	80016fe <__aeabi_dmul+0x2fa>
 80016fc:	e140      	b.n	8001980 <__aeabi_dmul+0x57c>
 80016fe:	1d03      	adds	r3, r0, #4
 8001700:	4283      	cmp	r3, r0
 8001702:	41a4      	sbcs	r4, r4
 8001704:	0018      	movs	r0, r3
 8001706:	4264      	negs	r4, r4
 8001708:	0761      	lsls	r1, r4, #29
 800170a:	0264      	lsls	r4, r4, #9
 800170c:	0b24      	lsrs	r4, r4, #12
 800170e:	08c2      	lsrs	r2, r0, #3
 8001710:	2300      	movs	r3, #0
 8001712:	430a      	orrs	r2, r1
 8001714:	e6cc      	b.n	80014b0 <__aeabi_dmul+0xac>
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	000007ff 	.word	0x000007ff
 800171c:	fffffc01 	.word	0xfffffc01
 8001720:	000003ff 	.word	0x000003ff
 8001724:	feffffff 	.word	0xfeffffff
 8001728:	000007fe 	.word	0x000007fe
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	0000043e 	.word	0x0000043e
 8001734:	4649      	mov	r1, r9
 8001736:	464a      	mov	r2, r9
 8001738:	0409      	lsls	r1, r1, #16
 800173a:	0c09      	lsrs	r1, r1, #16
 800173c:	000d      	movs	r5, r1
 800173e:	0c16      	lsrs	r6, r2, #16
 8001740:	0c02      	lsrs	r2, r0, #16
 8001742:	0400      	lsls	r0, r0, #16
 8001744:	0c00      	lsrs	r0, r0, #16
 8001746:	4345      	muls	r5, r0
 8001748:	46ac      	mov	ip, r5
 800174a:	0005      	movs	r5, r0
 800174c:	4375      	muls	r5, r6
 800174e:	46a8      	mov	r8, r5
 8001750:	0015      	movs	r5, r2
 8001752:	000f      	movs	r7, r1
 8001754:	4375      	muls	r5, r6
 8001756:	9200      	str	r2, [sp, #0]
 8001758:	9502      	str	r5, [sp, #8]
 800175a:	002a      	movs	r2, r5
 800175c:	9d00      	ldr	r5, [sp, #0]
 800175e:	436f      	muls	r7, r5
 8001760:	4665      	mov	r5, ip
 8001762:	0c2d      	lsrs	r5, r5, #16
 8001764:	46a9      	mov	r9, r5
 8001766:	4447      	add	r7, r8
 8001768:	444f      	add	r7, r9
 800176a:	45b8      	cmp	r8, r7
 800176c:	d905      	bls.n	800177a <__aeabi_dmul+0x376>
 800176e:	0015      	movs	r5, r2
 8001770:	2280      	movs	r2, #128	@ 0x80
 8001772:	0252      	lsls	r2, r2, #9
 8001774:	4690      	mov	r8, r2
 8001776:	4445      	add	r5, r8
 8001778:	9502      	str	r5, [sp, #8]
 800177a:	0c3d      	lsrs	r5, r7, #16
 800177c:	9503      	str	r5, [sp, #12]
 800177e:	4665      	mov	r5, ip
 8001780:	042d      	lsls	r5, r5, #16
 8001782:	043f      	lsls	r7, r7, #16
 8001784:	0c2d      	lsrs	r5, r5, #16
 8001786:	46ac      	mov	ip, r5
 8001788:	003d      	movs	r5, r7
 800178a:	4465      	add	r5, ip
 800178c:	9504      	str	r5, [sp, #16]
 800178e:	0c25      	lsrs	r5, r4, #16
 8001790:	0424      	lsls	r4, r4, #16
 8001792:	0c24      	lsrs	r4, r4, #16
 8001794:	46ac      	mov	ip, r5
 8001796:	0025      	movs	r5, r4
 8001798:	4375      	muls	r5, r6
 800179a:	46a8      	mov	r8, r5
 800179c:	4665      	mov	r5, ip
 800179e:	000f      	movs	r7, r1
 80017a0:	4369      	muls	r1, r5
 80017a2:	4441      	add	r1, r8
 80017a4:	4689      	mov	r9, r1
 80017a6:	4367      	muls	r7, r4
 80017a8:	0c39      	lsrs	r1, r7, #16
 80017aa:	4449      	add	r1, r9
 80017ac:	436e      	muls	r6, r5
 80017ae:	4588      	cmp	r8, r1
 80017b0:	d903      	bls.n	80017ba <__aeabi_dmul+0x3b6>
 80017b2:	2280      	movs	r2, #128	@ 0x80
 80017b4:	0252      	lsls	r2, r2, #9
 80017b6:	4690      	mov	r8, r2
 80017b8:	4446      	add	r6, r8
 80017ba:	0c0d      	lsrs	r5, r1, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0035      	movs	r5, r6
 80017c0:	4445      	add	r5, r8
 80017c2:	9505      	str	r5, [sp, #20]
 80017c4:	9d03      	ldr	r5, [sp, #12]
 80017c6:	043f      	lsls	r7, r7, #16
 80017c8:	46a8      	mov	r8, r5
 80017ca:	0c3f      	lsrs	r7, r7, #16
 80017cc:	0409      	lsls	r1, r1, #16
 80017ce:	19c9      	adds	r1, r1, r7
 80017d0:	4488      	add	r8, r1
 80017d2:	4645      	mov	r5, r8
 80017d4:	9503      	str	r5, [sp, #12]
 80017d6:	4655      	mov	r5, sl
 80017d8:	042e      	lsls	r6, r5, #16
 80017da:	0c36      	lsrs	r6, r6, #16
 80017dc:	0c2f      	lsrs	r7, r5, #16
 80017de:	0035      	movs	r5, r6
 80017e0:	4345      	muls	r5, r0
 80017e2:	4378      	muls	r0, r7
 80017e4:	4681      	mov	r9, r0
 80017e6:	0038      	movs	r0, r7
 80017e8:	46a8      	mov	r8, r5
 80017ea:	0c2d      	lsrs	r5, r5, #16
 80017ec:	46aa      	mov	sl, r5
 80017ee:	9a00      	ldr	r2, [sp, #0]
 80017f0:	4350      	muls	r0, r2
 80017f2:	4372      	muls	r2, r6
 80017f4:	444a      	add	r2, r9
 80017f6:	4452      	add	r2, sl
 80017f8:	4591      	cmp	r9, r2
 80017fa:	d903      	bls.n	8001804 <__aeabi_dmul+0x400>
 80017fc:	2580      	movs	r5, #128	@ 0x80
 80017fe:	026d      	lsls	r5, r5, #9
 8001800:	46a9      	mov	r9, r5
 8001802:	4448      	add	r0, r9
 8001804:	0c15      	lsrs	r5, r2, #16
 8001806:	46a9      	mov	r9, r5
 8001808:	4645      	mov	r5, r8
 800180a:	042d      	lsls	r5, r5, #16
 800180c:	0c2d      	lsrs	r5, r5, #16
 800180e:	46a8      	mov	r8, r5
 8001810:	4665      	mov	r5, ip
 8001812:	437d      	muls	r5, r7
 8001814:	0412      	lsls	r2, r2, #16
 8001816:	4448      	add	r0, r9
 8001818:	4490      	add	r8, r2
 800181a:	46a9      	mov	r9, r5
 800181c:	0032      	movs	r2, r6
 800181e:	4665      	mov	r5, ip
 8001820:	4362      	muls	r2, r4
 8001822:	436e      	muls	r6, r5
 8001824:	437c      	muls	r4, r7
 8001826:	0c17      	lsrs	r7, r2, #16
 8001828:	1936      	adds	r6, r6, r4
 800182a:	19bf      	adds	r7, r7, r6
 800182c:	42bc      	cmp	r4, r7
 800182e:	d903      	bls.n	8001838 <__aeabi_dmul+0x434>
 8001830:	2480      	movs	r4, #128	@ 0x80
 8001832:	0264      	lsls	r4, r4, #9
 8001834:	46a4      	mov	ip, r4
 8001836:	44e1      	add	r9, ip
 8001838:	9c02      	ldr	r4, [sp, #8]
 800183a:	9e03      	ldr	r6, [sp, #12]
 800183c:	46a4      	mov	ip, r4
 800183e:	9d05      	ldr	r5, [sp, #20]
 8001840:	4466      	add	r6, ip
 8001842:	428e      	cmp	r6, r1
 8001844:	4189      	sbcs	r1, r1
 8001846:	46ac      	mov	ip, r5
 8001848:	0412      	lsls	r2, r2, #16
 800184a:	043c      	lsls	r4, r7, #16
 800184c:	0c12      	lsrs	r2, r2, #16
 800184e:	18a2      	adds	r2, r4, r2
 8001850:	4462      	add	r2, ip
 8001852:	4249      	negs	r1, r1
 8001854:	1854      	adds	r4, r2, r1
 8001856:	4446      	add	r6, r8
 8001858:	46a4      	mov	ip, r4
 800185a:	4546      	cmp	r6, r8
 800185c:	41a4      	sbcs	r4, r4
 800185e:	4682      	mov	sl, r0
 8001860:	4264      	negs	r4, r4
 8001862:	46a0      	mov	r8, r4
 8001864:	42aa      	cmp	r2, r5
 8001866:	4192      	sbcs	r2, r2
 8001868:	458c      	cmp	ip, r1
 800186a:	4189      	sbcs	r1, r1
 800186c:	44e2      	add	sl, ip
 800186e:	44d0      	add	r8, sl
 8001870:	4249      	negs	r1, r1
 8001872:	4252      	negs	r2, r2
 8001874:	430a      	orrs	r2, r1
 8001876:	45a0      	cmp	r8, r4
 8001878:	41a4      	sbcs	r4, r4
 800187a:	4582      	cmp	sl, r0
 800187c:	4189      	sbcs	r1, r1
 800187e:	4264      	negs	r4, r4
 8001880:	4249      	negs	r1, r1
 8001882:	430c      	orrs	r4, r1
 8001884:	4641      	mov	r1, r8
 8001886:	0c3f      	lsrs	r7, r7, #16
 8001888:	19d2      	adds	r2, r2, r7
 800188a:	1912      	adds	r2, r2, r4
 800188c:	0dcc      	lsrs	r4, r1, #23
 800188e:	9904      	ldr	r1, [sp, #16]
 8001890:	0270      	lsls	r0, r6, #9
 8001892:	4308      	orrs	r0, r1
 8001894:	1e41      	subs	r1, r0, #1
 8001896:	4188      	sbcs	r0, r1
 8001898:	4641      	mov	r1, r8
 800189a:	444a      	add	r2, r9
 800189c:	0df6      	lsrs	r6, r6, #23
 800189e:	0252      	lsls	r2, r2, #9
 80018a0:	4330      	orrs	r0, r6
 80018a2:	0249      	lsls	r1, r1, #9
 80018a4:	4314      	orrs	r4, r2
 80018a6:	4308      	orrs	r0, r1
 80018a8:	01d2      	lsls	r2, r2, #7
 80018aa:	d535      	bpl.n	8001918 <__aeabi_dmul+0x514>
 80018ac:	2201      	movs	r2, #1
 80018ae:	0843      	lsrs	r3, r0, #1
 80018b0:	4002      	ands	r2, r0
 80018b2:	4313      	orrs	r3, r2
 80018b4:	07e0      	lsls	r0, r4, #31
 80018b6:	4318      	orrs	r0, r3
 80018b8:	0864      	lsrs	r4, r4, #1
 80018ba:	e634      	b.n	8001526 <__aeabi_dmul+0x122>
 80018bc:	9b00      	ldr	r3, [sp, #0]
 80018be:	46a2      	mov	sl, r4
 80018c0:	469b      	mov	fp, r3
 80018c2:	4681      	mov	r9, r0
 80018c4:	2480      	movs	r4, #128	@ 0x80
 80018c6:	4653      	mov	r3, sl
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	431c      	orrs	r4, r3
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	464a      	mov	r2, r9
 80018d0:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <__aeabi_dmul+0x588>)
 80018d2:	0b24      	lsrs	r4, r4, #12
 80018d4:	e5ec      	b.n	80014b0 <__aeabi_dmul+0xac>
 80018d6:	f000 fcc5 	bl	8002264 <__clzsi2>
 80018da:	2315      	movs	r3, #21
 80018dc:	469c      	mov	ip, r3
 80018de:	4484      	add	ip, r0
 80018e0:	0002      	movs	r2, r0
 80018e2:	4663      	mov	r3, ip
 80018e4:	3220      	adds	r2, #32
 80018e6:	2b1c      	cmp	r3, #28
 80018e8:	dc00      	bgt.n	80018ec <__aeabi_dmul+0x4e8>
 80018ea:	e684      	b.n	80015f6 <__aeabi_dmul+0x1f2>
 80018ec:	2300      	movs	r3, #0
 80018ee:	4699      	mov	r9, r3
 80018f0:	0023      	movs	r3, r4
 80018f2:	3808      	subs	r0, #8
 80018f4:	4083      	lsls	r3, r0
 80018f6:	469a      	mov	sl, r3
 80018f8:	e68e      	b.n	8001618 <__aeabi_dmul+0x214>
 80018fa:	f000 fcb3 	bl	8002264 <__clzsi2>
 80018fe:	0002      	movs	r2, r0
 8001900:	0003      	movs	r3, r0
 8001902:	3215      	adds	r2, #21
 8001904:	3320      	adds	r3, #32
 8001906:	2a1c      	cmp	r2, #28
 8001908:	dc00      	bgt.n	800190c <__aeabi_dmul+0x508>
 800190a:	e64e      	b.n	80015aa <__aeabi_dmul+0x1a6>
 800190c:	0002      	movs	r2, r0
 800190e:	0034      	movs	r4, r6
 8001910:	3a08      	subs	r2, #8
 8001912:	2000      	movs	r0, #0
 8001914:	4094      	lsls	r4, r2
 8001916:	e652      	b.n	80015be <__aeabi_dmul+0x1ba>
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	e604      	b.n	8001526 <__aeabi_dmul+0x122>
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <__aeabi_dmul+0x58c>)
 800191e:	0021      	movs	r1, r4
 8001920:	469c      	mov	ip, r3
 8001922:	0003      	movs	r3, r0
 8001924:	9d01      	ldr	r5, [sp, #4]
 8001926:	40d3      	lsrs	r3, r2
 8001928:	4465      	add	r5, ip
 800192a:	40a9      	lsls	r1, r5
 800192c:	4319      	orrs	r1, r3
 800192e:	0003      	movs	r3, r0
 8001930:	40ab      	lsls	r3, r5
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	4183      	sbcs	r3, r0
 8001936:	4319      	orrs	r1, r3
 8001938:	0008      	movs	r0, r1
 800193a:	40d4      	lsrs	r4, r2
 800193c:	074b      	lsls	r3, r1, #29
 800193e:	d009      	beq.n	8001954 <__aeabi_dmul+0x550>
 8001940:	230f      	movs	r3, #15
 8001942:	400b      	ands	r3, r1
 8001944:	2b04      	cmp	r3, #4
 8001946:	d005      	beq.n	8001954 <__aeabi_dmul+0x550>
 8001948:	1d0b      	adds	r3, r1, #4
 800194a:	428b      	cmp	r3, r1
 800194c:	4180      	sbcs	r0, r0
 800194e:	4240      	negs	r0, r0
 8001950:	1824      	adds	r4, r4, r0
 8001952:	0018      	movs	r0, r3
 8001954:	0223      	lsls	r3, r4, #8
 8001956:	d400      	bmi.n	800195a <__aeabi_dmul+0x556>
 8001958:	e6d6      	b.n	8001708 <__aeabi_dmul+0x304>
 800195a:	2301      	movs	r3, #1
 800195c:	2400      	movs	r4, #0
 800195e:	2200      	movs	r2, #0
 8001960:	e5a6      	b.n	80014b0 <__aeabi_dmul+0xac>
 8001962:	290f      	cmp	r1, #15
 8001964:	d1aa      	bne.n	80018bc <__aeabi_dmul+0x4b8>
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	4652      	mov	r2, sl
 800196a:	031b      	lsls	r3, r3, #12
 800196c:	421a      	tst	r2, r3
 800196e:	d0a9      	beq.n	80018c4 <__aeabi_dmul+0x4c0>
 8001970:	421c      	tst	r4, r3
 8001972:	d1a7      	bne.n	80018c4 <__aeabi_dmul+0x4c0>
 8001974:	431c      	orrs	r4, r3
 8001976:	9b00      	ldr	r3, [sp, #0]
 8001978:	0002      	movs	r2, r0
 800197a:	469b      	mov	fp, r3
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <__aeabi_dmul+0x588>)
 800197e:	e597      	b.n	80014b0 <__aeabi_dmul+0xac>
 8001980:	2400      	movs	r4, #0
 8001982:	e6c1      	b.n	8001708 <__aeabi_dmul+0x304>
 8001984:	2400      	movs	r4, #0
 8001986:	4b01      	ldr	r3, [pc, #4]	@ (800198c <__aeabi_dmul+0x588>)
 8001988:	0022      	movs	r2, r4
 800198a:	e591      	b.n	80014b0 <__aeabi_dmul+0xac>
 800198c:	000007ff 	.word	0x000007ff
 8001990:	0000041e 	.word	0x0000041e

08001994 <__aeabi_dsub>:
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	464e      	mov	r6, r9
 8001998:	4645      	mov	r5, r8
 800199a:	46de      	mov	lr, fp
 800199c:	4657      	mov	r7, sl
 800199e:	b5e0      	push	{r5, r6, r7, lr}
 80019a0:	b085      	sub	sp, #20
 80019a2:	9000      	str	r0, [sp, #0]
 80019a4:	9101      	str	r1, [sp, #4]
 80019a6:	030c      	lsls	r4, r1, #12
 80019a8:	004f      	lsls	r7, r1, #1
 80019aa:	0fce      	lsrs	r6, r1, #31
 80019ac:	0a61      	lsrs	r1, r4, #9
 80019ae:	9c00      	ldr	r4, [sp, #0]
 80019b0:	46b0      	mov	r8, r6
 80019b2:	0f64      	lsrs	r4, r4, #29
 80019b4:	430c      	orrs	r4, r1
 80019b6:	9900      	ldr	r1, [sp, #0]
 80019b8:	0d7f      	lsrs	r7, r7, #21
 80019ba:	00c8      	lsls	r0, r1, #3
 80019bc:	0011      	movs	r1, r2
 80019be:	001a      	movs	r2, r3
 80019c0:	031b      	lsls	r3, r3, #12
 80019c2:	469c      	mov	ip, r3
 80019c4:	9100      	str	r1, [sp, #0]
 80019c6:	9201      	str	r2, [sp, #4]
 80019c8:	0051      	lsls	r1, r2, #1
 80019ca:	0d4b      	lsrs	r3, r1, #21
 80019cc:	4699      	mov	r9, r3
 80019ce:	9b01      	ldr	r3, [sp, #4]
 80019d0:	9d00      	ldr	r5, [sp, #0]
 80019d2:	0fd9      	lsrs	r1, r3, #31
 80019d4:	4663      	mov	r3, ip
 80019d6:	0f6a      	lsrs	r2, r5, #29
 80019d8:	0a5b      	lsrs	r3, r3, #9
 80019da:	4313      	orrs	r3, r2
 80019dc:	00ea      	lsls	r2, r5, #3
 80019de:	4694      	mov	ip, r2
 80019e0:	4693      	mov	fp, r2
 80019e2:	4ac1      	ldr	r2, [pc, #772]	@ (8001ce8 <__aeabi_dsub+0x354>)
 80019e4:	9003      	str	r0, [sp, #12]
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	4591      	cmp	r9, r2
 80019ea:	d100      	bne.n	80019ee <__aeabi_dsub+0x5a>
 80019ec:	e0cd      	b.n	8001b8a <__aeabi_dsub+0x1f6>
 80019ee:	2501      	movs	r5, #1
 80019f0:	4069      	eors	r1, r5
 80019f2:	464d      	mov	r5, r9
 80019f4:	1b7d      	subs	r5, r7, r5
 80019f6:	46aa      	mov	sl, r5
 80019f8:	428e      	cmp	r6, r1
 80019fa:	d100      	bne.n	80019fe <__aeabi_dsub+0x6a>
 80019fc:	e080      	b.n	8001b00 <__aeabi_dsub+0x16c>
 80019fe:	2d00      	cmp	r5, #0
 8001a00:	dc00      	bgt.n	8001a04 <__aeabi_dsub+0x70>
 8001a02:	e335      	b.n	8002070 <__aeabi_dsub+0x6dc>
 8001a04:	4649      	mov	r1, r9
 8001a06:	2900      	cmp	r1, #0
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x78>
 8001a0a:	e0df      	b.n	8001bcc <__aeabi_dsub+0x238>
 8001a0c:	4297      	cmp	r7, r2
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x7e>
 8001a10:	e194      	b.n	8001d3c <__aeabi_dsub+0x3a8>
 8001a12:	4652      	mov	r2, sl
 8001a14:	2501      	movs	r5, #1
 8001a16:	2a38      	cmp	r2, #56	@ 0x38
 8001a18:	dc19      	bgt.n	8001a4e <__aeabi_dsub+0xba>
 8001a1a:	2280      	movs	r2, #128	@ 0x80
 8001a1c:	9b02      	ldr	r3, [sp, #8]
 8001a1e:	0412      	lsls	r2, r2, #16
 8001a20:	4313      	orrs	r3, r2
 8001a22:	9302      	str	r3, [sp, #8]
 8001a24:	4652      	mov	r2, sl
 8001a26:	2a1f      	cmp	r2, #31
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0x98>
 8001a2a:	e1e3      	b.n	8001df4 <__aeabi_dsub+0x460>
 8001a2c:	4653      	mov	r3, sl
 8001a2e:	2220      	movs	r2, #32
 8001a30:	4661      	mov	r1, ip
 8001a32:	9d02      	ldr	r5, [sp, #8]
 8001a34:	1ad2      	subs	r2, r2, r3
 8001a36:	4095      	lsls	r5, r2
 8001a38:	40d9      	lsrs	r1, r3
 8001a3a:	430d      	orrs	r5, r1
 8001a3c:	4661      	mov	r1, ip
 8001a3e:	4091      	lsls	r1, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	1e51      	subs	r1, r2, #1
 8001a44:	418a      	sbcs	r2, r1
 8001a46:	4315      	orrs	r5, r2
 8001a48:	9a02      	ldr	r2, [sp, #8]
 8001a4a:	40da      	lsrs	r2, r3
 8001a4c:	1aa4      	subs	r4, r4, r2
 8001a4e:	1b45      	subs	r5, r0, r5
 8001a50:	42a8      	cmp	r0, r5
 8001a52:	4180      	sbcs	r0, r0
 8001a54:	4240      	negs	r0, r0
 8001a56:	1a24      	subs	r4, r4, r0
 8001a58:	0223      	lsls	r3, r4, #8
 8001a5a:	d400      	bmi.n	8001a5e <__aeabi_dsub+0xca>
 8001a5c:	e13d      	b.n	8001cda <__aeabi_dsub+0x346>
 8001a5e:	0264      	lsls	r4, r4, #9
 8001a60:	0a64      	lsrs	r4, r4, #9
 8001a62:	2c00      	cmp	r4, #0
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dsub+0xd4>
 8001a66:	e147      	b.n	8001cf8 <__aeabi_dsub+0x364>
 8001a68:	0020      	movs	r0, r4
 8001a6a:	f000 fbfb 	bl	8002264 <__clzsi2>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	3b08      	subs	r3, #8
 8001a72:	2120      	movs	r1, #32
 8001a74:	0028      	movs	r0, r5
 8001a76:	1aca      	subs	r2, r1, r3
 8001a78:	40d0      	lsrs	r0, r2
 8001a7a:	409c      	lsls	r4, r3
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	409d      	lsls	r5, r3
 8001a80:	4322      	orrs	r2, r4
 8001a82:	429f      	cmp	r7, r3
 8001a84:	dd00      	ble.n	8001a88 <__aeabi_dsub+0xf4>
 8001a86:	e177      	b.n	8001d78 <__aeabi_dsub+0x3e4>
 8001a88:	1bd8      	subs	r0, r3, r7
 8001a8a:	3001      	adds	r0, #1
 8001a8c:	1a09      	subs	r1, r1, r0
 8001a8e:	002c      	movs	r4, r5
 8001a90:	408d      	lsls	r5, r1
 8001a92:	40c4      	lsrs	r4, r0
 8001a94:	1e6b      	subs	r3, r5, #1
 8001a96:	419d      	sbcs	r5, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	40c2      	lsrs	r2, r0
 8001a9c:	408b      	lsls	r3, r1
 8001a9e:	4325      	orrs	r5, r4
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	0014      	movs	r4, r2
 8001aa4:	431d      	orrs	r5, r3
 8001aa6:	076b      	lsls	r3, r5, #29
 8001aa8:	d009      	beq.n	8001abe <__aeabi_dsub+0x12a>
 8001aaa:	230f      	movs	r3, #15
 8001aac:	402b      	ands	r3, r5
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d005      	beq.n	8001abe <__aeabi_dsub+0x12a>
 8001ab2:	1d2b      	adds	r3, r5, #4
 8001ab4:	42ab      	cmp	r3, r5
 8001ab6:	41ad      	sbcs	r5, r5
 8001ab8:	426d      	negs	r5, r5
 8001aba:	1964      	adds	r4, r4, r5
 8001abc:	001d      	movs	r5, r3
 8001abe:	0223      	lsls	r3, r4, #8
 8001ac0:	d400      	bmi.n	8001ac4 <__aeabi_dsub+0x130>
 8001ac2:	e140      	b.n	8001d46 <__aeabi_dsub+0x3b2>
 8001ac4:	4a88      	ldr	r2, [pc, #544]	@ (8001ce8 <__aeabi_dsub+0x354>)
 8001ac6:	3701      	adds	r7, #1
 8001ac8:	4297      	cmp	r7, r2
 8001aca:	d100      	bne.n	8001ace <__aeabi_dsub+0x13a>
 8001acc:	e101      	b.n	8001cd2 <__aeabi_dsub+0x33e>
 8001ace:	2601      	movs	r6, #1
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	4986      	ldr	r1, [pc, #536]	@ (8001cec <__aeabi_dsub+0x358>)
 8001ad4:	08ed      	lsrs	r5, r5, #3
 8001ad6:	4021      	ands	r1, r4
 8001ad8:	074a      	lsls	r2, r1, #29
 8001ada:	432a      	orrs	r2, r5
 8001adc:	057c      	lsls	r4, r7, #21
 8001ade:	024d      	lsls	r5, r1, #9
 8001ae0:	0b2d      	lsrs	r5, r5, #12
 8001ae2:	0d64      	lsrs	r4, r4, #21
 8001ae4:	401e      	ands	r6, r3
 8001ae6:	0524      	lsls	r4, r4, #20
 8001ae8:	432c      	orrs	r4, r5
 8001aea:	07f6      	lsls	r6, r6, #31
 8001aec:	4334      	orrs	r4, r6
 8001aee:	0010      	movs	r0, r2
 8001af0:	0021      	movs	r1, r4
 8001af2:	b005      	add	sp, #20
 8001af4:	bcf0      	pop	{r4, r5, r6, r7}
 8001af6:	46bb      	mov	fp, r7
 8001af8:	46b2      	mov	sl, r6
 8001afa:	46a9      	mov	r9, r5
 8001afc:	46a0      	mov	r8, r4
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	2d00      	cmp	r5, #0
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x172>
 8001b04:	e2d0      	b.n	80020a8 <__aeabi_dsub+0x714>
 8001b06:	4649      	mov	r1, r9
 8001b08:	2900      	cmp	r1, #0
 8001b0a:	d000      	beq.n	8001b0e <__aeabi_dsub+0x17a>
 8001b0c:	e0d4      	b.n	8001cb8 <__aeabi_dsub+0x324>
 8001b0e:	4661      	mov	r1, ip
 8001b10:	9b02      	ldr	r3, [sp, #8]
 8001b12:	4319      	orrs	r1, r3
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x184>
 8001b16:	e12b      	b.n	8001d70 <__aeabi_dsub+0x3dc>
 8001b18:	1e69      	subs	r1, r5, #1
 8001b1a:	2d01      	cmp	r5, #1
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x18c>
 8001b1e:	e1d9      	b.n	8001ed4 <__aeabi_dsub+0x540>
 8001b20:	4295      	cmp	r5, r2
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x192>
 8001b24:	e10a      	b.n	8001d3c <__aeabi_dsub+0x3a8>
 8001b26:	2501      	movs	r5, #1
 8001b28:	2938      	cmp	r1, #56	@ 0x38
 8001b2a:	dc17      	bgt.n	8001b5c <__aeabi_dsub+0x1c8>
 8001b2c:	468a      	mov	sl, r1
 8001b2e:	4653      	mov	r3, sl
 8001b30:	2b1f      	cmp	r3, #31
 8001b32:	dd00      	ble.n	8001b36 <__aeabi_dsub+0x1a2>
 8001b34:	e1e7      	b.n	8001f06 <__aeabi_dsub+0x572>
 8001b36:	2220      	movs	r2, #32
 8001b38:	1ad2      	subs	r2, r2, r3
 8001b3a:	9b02      	ldr	r3, [sp, #8]
 8001b3c:	4661      	mov	r1, ip
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	001d      	movs	r5, r3
 8001b42:	4653      	mov	r3, sl
 8001b44:	40d9      	lsrs	r1, r3
 8001b46:	4663      	mov	r3, ip
 8001b48:	4093      	lsls	r3, r2
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	430d      	orrs	r5, r1
 8001b4e:	1e51      	subs	r1, r2, #1
 8001b50:	418a      	sbcs	r2, r1
 8001b52:	4653      	mov	r3, sl
 8001b54:	4315      	orrs	r5, r2
 8001b56:	9a02      	ldr	r2, [sp, #8]
 8001b58:	40da      	lsrs	r2, r3
 8001b5a:	18a4      	adds	r4, r4, r2
 8001b5c:	182d      	adds	r5, r5, r0
 8001b5e:	4285      	cmp	r5, r0
 8001b60:	4180      	sbcs	r0, r0
 8001b62:	4240      	negs	r0, r0
 8001b64:	1824      	adds	r4, r4, r0
 8001b66:	0223      	lsls	r3, r4, #8
 8001b68:	d400      	bmi.n	8001b6c <__aeabi_dsub+0x1d8>
 8001b6a:	e0b6      	b.n	8001cda <__aeabi_dsub+0x346>
 8001b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ce8 <__aeabi_dsub+0x354>)
 8001b6e:	3701      	adds	r7, #1
 8001b70:	429f      	cmp	r7, r3
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dsub+0x1e2>
 8001b74:	e0ad      	b.n	8001cd2 <__aeabi_dsub+0x33e>
 8001b76:	2101      	movs	r1, #1
 8001b78:	4b5c      	ldr	r3, [pc, #368]	@ (8001cec <__aeabi_dsub+0x358>)
 8001b7a:	086a      	lsrs	r2, r5, #1
 8001b7c:	401c      	ands	r4, r3
 8001b7e:	4029      	ands	r1, r5
 8001b80:	430a      	orrs	r2, r1
 8001b82:	07e5      	lsls	r5, r4, #31
 8001b84:	4315      	orrs	r5, r2
 8001b86:	0864      	lsrs	r4, r4, #1
 8001b88:	e78d      	b.n	8001aa6 <__aeabi_dsub+0x112>
 8001b8a:	4a59      	ldr	r2, [pc, #356]	@ (8001cf0 <__aeabi_dsub+0x35c>)
 8001b8c:	9b02      	ldr	r3, [sp, #8]
 8001b8e:	4692      	mov	sl, r2
 8001b90:	4662      	mov	r2, ip
 8001b92:	44ba      	add	sl, r7
 8001b94:	431a      	orrs	r2, r3
 8001b96:	d02c      	beq.n	8001bf2 <__aeabi_dsub+0x25e>
 8001b98:	428e      	cmp	r6, r1
 8001b9a:	d02e      	beq.n	8001bfa <__aeabi_dsub+0x266>
 8001b9c:	4652      	mov	r2, sl
 8001b9e:	2a00      	cmp	r2, #0
 8001ba0:	d060      	beq.n	8001c64 <__aeabi_dsub+0x2d0>
 8001ba2:	2f00      	cmp	r7, #0
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x214>
 8001ba6:	e0db      	b.n	8001d60 <__aeabi_dsub+0x3cc>
 8001ba8:	4663      	mov	r3, ip
 8001baa:	000e      	movs	r6, r1
 8001bac:	9c02      	ldr	r4, [sp, #8]
 8001bae:	08d8      	lsrs	r0, r3, #3
 8001bb0:	0762      	lsls	r2, r4, #29
 8001bb2:	4302      	orrs	r2, r0
 8001bb4:	08e4      	lsrs	r4, r4, #3
 8001bb6:	0013      	movs	r3, r2
 8001bb8:	4323      	orrs	r3, r4
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x22a>
 8001bbc:	e254      	b.n	8002068 <__aeabi_dsub+0x6d4>
 8001bbe:	2580      	movs	r5, #128	@ 0x80
 8001bc0:	032d      	lsls	r5, r5, #12
 8001bc2:	4325      	orrs	r5, r4
 8001bc4:	032d      	lsls	r5, r5, #12
 8001bc6:	4c48      	ldr	r4, [pc, #288]	@ (8001ce8 <__aeabi_dsub+0x354>)
 8001bc8:	0b2d      	lsrs	r5, r5, #12
 8001bca:	e78c      	b.n	8001ae6 <__aeabi_dsub+0x152>
 8001bcc:	4661      	mov	r1, ip
 8001bce:	9b02      	ldr	r3, [sp, #8]
 8001bd0:	4319      	orrs	r1, r3
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x242>
 8001bd4:	e0cc      	b.n	8001d70 <__aeabi_dsub+0x3dc>
 8001bd6:	0029      	movs	r1, r5
 8001bd8:	3901      	subs	r1, #1
 8001bda:	2d01      	cmp	r5, #1
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x24c>
 8001bde:	e188      	b.n	8001ef2 <__aeabi_dsub+0x55e>
 8001be0:	4295      	cmp	r5, r2
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x252>
 8001be4:	e0aa      	b.n	8001d3c <__aeabi_dsub+0x3a8>
 8001be6:	2501      	movs	r5, #1
 8001be8:	2938      	cmp	r1, #56	@ 0x38
 8001bea:	dd00      	ble.n	8001bee <__aeabi_dsub+0x25a>
 8001bec:	e72f      	b.n	8001a4e <__aeabi_dsub+0xba>
 8001bee:	468a      	mov	sl, r1
 8001bf0:	e718      	b.n	8001a24 <__aeabi_dsub+0x90>
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4051      	eors	r1, r2
 8001bf6:	428e      	cmp	r6, r1
 8001bf8:	d1d0      	bne.n	8001b9c <__aeabi_dsub+0x208>
 8001bfa:	4653      	mov	r3, sl
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x26e>
 8001c00:	e0be      	b.n	8001d80 <__aeabi_dsub+0x3ec>
 8001c02:	2f00      	cmp	r7, #0
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x274>
 8001c06:	e138      	b.n	8001e7a <__aeabi_dsub+0x4e6>
 8001c08:	46ca      	mov	sl, r9
 8001c0a:	0022      	movs	r2, r4
 8001c0c:	4302      	orrs	r2, r0
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_dsub+0x27e>
 8001c10:	e1e2      	b.n	8001fd8 <__aeabi_dsub+0x644>
 8001c12:	4653      	mov	r3, sl
 8001c14:	1e59      	subs	r1, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x288>
 8001c1a:	e20d      	b.n	8002038 <__aeabi_dsub+0x6a4>
 8001c1c:	4a32      	ldr	r2, [pc, #200]	@ (8001ce8 <__aeabi_dsub+0x354>)
 8001c1e:	4592      	cmp	sl, r2
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x290>
 8001c22:	e1d2      	b.n	8001fca <__aeabi_dsub+0x636>
 8001c24:	2701      	movs	r7, #1
 8001c26:	2938      	cmp	r1, #56	@ 0x38
 8001c28:	dc13      	bgt.n	8001c52 <__aeabi_dsub+0x2be>
 8001c2a:	291f      	cmp	r1, #31
 8001c2c:	dd00      	ble.n	8001c30 <__aeabi_dsub+0x29c>
 8001c2e:	e1ee      	b.n	800200e <__aeabi_dsub+0x67a>
 8001c30:	2220      	movs	r2, #32
 8001c32:	9b02      	ldr	r3, [sp, #8]
 8001c34:	1a52      	subs	r2, r2, r1
 8001c36:	0025      	movs	r5, r4
 8001c38:	0007      	movs	r7, r0
 8001c3a:	469a      	mov	sl, r3
 8001c3c:	40cc      	lsrs	r4, r1
 8001c3e:	4090      	lsls	r0, r2
 8001c40:	4095      	lsls	r5, r2
 8001c42:	40cf      	lsrs	r7, r1
 8001c44:	44a2      	add	sl, r4
 8001c46:	1e42      	subs	r2, r0, #1
 8001c48:	4190      	sbcs	r0, r2
 8001c4a:	4653      	mov	r3, sl
 8001c4c:	432f      	orrs	r7, r5
 8001c4e:	4307      	orrs	r7, r0
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	003d      	movs	r5, r7
 8001c54:	4465      	add	r5, ip
 8001c56:	4565      	cmp	r5, ip
 8001c58:	4192      	sbcs	r2, r2
 8001c5a:	9b02      	ldr	r3, [sp, #8]
 8001c5c:	4252      	negs	r2, r2
 8001c5e:	464f      	mov	r7, r9
 8001c60:	18d4      	adds	r4, r2, r3
 8001c62:	e780      	b.n	8001b66 <__aeabi_dsub+0x1d2>
 8001c64:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <__aeabi_dsub+0x360>)
 8001c66:	1c7d      	adds	r5, r7, #1
 8001c68:	4215      	tst	r5, r2
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x2da>
 8001c6c:	e0aa      	b.n	8001dc4 <__aeabi_dsub+0x430>
 8001c6e:	4662      	mov	r2, ip
 8001c70:	0025      	movs	r5, r4
 8001c72:	9b02      	ldr	r3, [sp, #8]
 8001c74:	4305      	orrs	r5, r0
 8001c76:	431a      	orrs	r2, r3
 8001c78:	2f00      	cmp	r7, #0
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x2ea>
 8001c7c:	e0f5      	b.n	8001e6a <__aeabi_dsub+0x4d6>
 8001c7e:	2d00      	cmp	r5, #0
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x2f0>
 8001c82:	e16b      	b.n	8001f5c <__aeabi_dsub+0x5c8>
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x2f6>
 8001c88:	e152      	b.n	8001f30 <__aeabi_dsub+0x59c>
 8001c8a:	4663      	mov	r3, ip
 8001c8c:	1ac5      	subs	r5, r0, r3
 8001c8e:	9b02      	ldr	r3, [sp, #8]
 8001c90:	1ae2      	subs	r2, r4, r3
 8001c92:	42a8      	cmp	r0, r5
 8001c94:	419b      	sbcs	r3, r3
 8001c96:	425b      	negs	r3, r3
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	021a      	lsls	r2, r3, #8
 8001c9c:	d400      	bmi.n	8001ca0 <__aeabi_dsub+0x30c>
 8001c9e:	e1d5      	b.n	800204c <__aeabi_dsub+0x6b8>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	1a1d      	subs	r5, r3, r0
 8001ca4:	45ac      	cmp	ip, r5
 8001ca6:	4192      	sbcs	r2, r2
 8001ca8:	2601      	movs	r6, #1
 8001caa:	9b02      	ldr	r3, [sp, #8]
 8001cac:	4252      	negs	r2, r2
 8001cae:	1b1c      	subs	r4, r3, r4
 8001cb0:	4688      	mov	r8, r1
 8001cb2:	1aa4      	subs	r4, r4, r2
 8001cb4:	400e      	ands	r6, r1
 8001cb6:	e6f6      	b.n	8001aa6 <__aeabi_dsub+0x112>
 8001cb8:	4297      	cmp	r7, r2
 8001cba:	d03f      	beq.n	8001d3c <__aeabi_dsub+0x3a8>
 8001cbc:	4652      	mov	r2, sl
 8001cbe:	2501      	movs	r5, #1
 8001cc0:	2a38      	cmp	r2, #56	@ 0x38
 8001cc2:	dd00      	ble.n	8001cc6 <__aeabi_dsub+0x332>
 8001cc4:	e74a      	b.n	8001b5c <__aeabi_dsub+0x1c8>
 8001cc6:	2280      	movs	r2, #128	@ 0x80
 8001cc8:	9b02      	ldr	r3, [sp, #8]
 8001cca:	0412      	lsls	r2, r2, #16
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	e72d      	b.n	8001b2e <__aeabi_dsub+0x19a>
 8001cd2:	003c      	movs	r4, r7
 8001cd4:	2500      	movs	r5, #0
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	e705      	b.n	8001ae6 <__aeabi_dsub+0x152>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	402b      	ands	r3, r5
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d000      	beq.n	8001ce4 <__aeabi_dsub+0x350>
 8001ce2:	e6e2      	b.n	8001aaa <__aeabi_dsub+0x116>
 8001ce4:	e06b      	b.n	8001dbe <__aeabi_dsub+0x42a>
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	ff7fffff 	.word	0xff7fffff
 8001cf0:	fffff801 	.word	0xfffff801
 8001cf4:	000007fe 	.word	0x000007fe
 8001cf8:	0028      	movs	r0, r5
 8001cfa:	f000 fab3 	bl	8002264 <__clzsi2>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	3318      	adds	r3, #24
 8001d02:	2b1f      	cmp	r3, #31
 8001d04:	dc00      	bgt.n	8001d08 <__aeabi_dsub+0x374>
 8001d06:	e6b4      	b.n	8001a72 <__aeabi_dsub+0xde>
 8001d08:	002a      	movs	r2, r5
 8001d0a:	3808      	subs	r0, #8
 8001d0c:	4082      	lsls	r2, r0
 8001d0e:	429f      	cmp	r7, r3
 8001d10:	dd00      	ble.n	8001d14 <__aeabi_dsub+0x380>
 8001d12:	e0b9      	b.n	8001e88 <__aeabi_dsub+0x4f4>
 8001d14:	1bdb      	subs	r3, r3, r7
 8001d16:	1c58      	adds	r0, r3, #1
 8001d18:	281f      	cmp	r0, #31
 8001d1a:	dc00      	bgt.n	8001d1e <__aeabi_dsub+0x38a>
 8001d1c:	e1a0      	b.n	8002060 <__aeabi_dsub+0x6cc>
 8001d1e:	0015      	movs	r5, r2
 8001d20:	3b1f      	subs	r3, #31
 8001d22:	40dd      	lsrs	r5, r3
 8001d24:	2820      	cmp	r0, #32
 8001d26:	d005      	beq.n	8001d34 <__aeabi_dsub+0x3a0>
 8001d28:	2340      	movs	r3, #64	@ 0x40
 8001d2a:	1a1b      	subs	r3, r3, r0
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	1e53      	subs	r3, r2, #1
 8001d30:	419a      	sbcs	r2, r3
 8001d32:	4315      	orrs	r5, r2
 8001d34:	2307      	movs	r3, #7
 8001d36:	2700      	movs	r7, #0
 8001d38:	402b      	ands	r3, r5
 8001d3a:	e7d0      	b.n	8001cde <__aeabi_dsub+0x34a>
 8001d3c:	08c0      	lsrs	r0, r0, #3
 8001d3e:	0762      	lsls	r2, r4, #29
 8001d40:	4302      	orrs	r2, r0
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	e737      	b.n	8001bb6 <__aeabi_dsub+0x222>
 8001d46:	08ea      	lsrs	r2, r5, #3
 8001d48:	0763      	lsls	r3, r4, #29
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	4bd3      	ldr	r3, [pc, #844]	@ (800209c <__aeabi_dsub+0x708>)
 8001d4e:	08e4      	lsrs	r4, r4, #3
 8001d50:	429f      	cmp	r7, r3
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0x3c2>
 8001d54:	e72f      	b.n	8001bb6 <__aeabi_dsub+0x222>
 8001d56:	0324      	lsls	r4, r4, #12
 8001d58:	0b25      	lsrs	r5, r4, #12
 8001d5a:	057c      	lsls	r4, r7, #21
 8001d5c:	0d64      	lsrs	r4, r4, #21
 8001d5e:	e6c2      	b.n	8001ae6 <__aeabi_dsub+0x152>
 8001d60:	46ca      	mov	sl, r9
 8001d62:	0022      	movs	r2, r4
 8001d64:	4302      	orrs	r2, r0
 8001d66:	d158      	bne.n	8001e1a <__aeabi_dsub+0x486>
 8001d68:	4663      	mov	r3, ip
 8001d6a:	000e      	movs	r6, r1
 8001d6c:	9c02      	ldr	r4, [sp, #8]
 8001d6e:	9303      	str	r3, [sp, #12]
 8001d70:	9b03      	ldr	r3, [sp, #12]
 8001d72:	4657      	mov	r7, sl
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	e7e7      	b.n	8001d48 <__aeabi_dsub+0x3b4>
 8001d78:	4cc9      	ldr	r4, [pc, #804]	@ (80020a0 <__aeabi_dsub+0x70c>)
 8001d7a:	1aff      	subs	r7, r7, r3
 8001d7c:	4014      	ands	r4, r2
 8001d7e:	e692      	b.n	8001aa6 <__aeabi_dsub+0x112>
 8001d80:	4dc8      	ldr	r5, [pc, #800]	@ (80020a4 <__aeabi_dsub+0x710>)
 8001d82:	1c7a      	adds	r2, r7, #1
 8001d84:	422a      	tst	r2, r5
 8001d86:	d000      	beq.n	8001d8a <__aeabi_dsub+0x3f6>
 8001d88:	e084      	b.n	8001e94 <__aeabi_dsub+0x500>
 8001d8a:	0022      	movs	r2, r4
 8001d8c:	4302      	orrs	r2, r0
 8001d8e:	2f00      	cmp	r7, #0
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x400>
 8001d92:	e0ef      	b.n	8001f74 <__aeabi_dsub+0x5e0>
 8001d94:	2a00      	cmp	r2, #0
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x406>
 8001d98:	e0e5      	b.n	8001f66 <__aeabi_dsub+0x5d2>
 8001d9a:	4662      	mov	r2, ip
 8001d9c:	9902      	ldr	r1, [sp, #8]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x410>
 8001da2:	e0c5      	b.n	8001f30 <__aeabi_dsub+0x59c>
 8001da4:	4663      	mov	r3, ip
 8001da6:	18c5      	adds	r5, r0, r3
 8001da8:	468c      	mov	ip, r1
 8001daa:	4285      	cmp	r5, r0
 8001dac:	4180      	sbcs	r0, r0
 8001dae:	4464      	add	r4, ip
 8001db0:	4240      	negs	r0, r0
 8001db2:	1824      	adds	r4, r4, r0
 8001db4:	0223      	lsls	r3, r4, #8
 8001db6:	d502      	bpl.n	8001dbe <__aeabi_dsub+0x42a>
 8001db8:	4bb9      	ldr	r3, [pc, #740]	@ (80020a0 <__aeabi_dsub+0x70c>)
 8001dba:	3701      	adds	r7, #1
 8001dbc:	401c      	ands	r4, r3
 8001dbe:	46ba      	mov	sl, r7
 8001dc0:	9503      	str	r5, [sp, #12]
 8001dc2:	e7d5      	b.n	8001d70 <__aeabi_dsub+0x3dc>
 8001dc4:	4662      	mov	r2, ip
 8001dc6:	1a85      	subs	r5, r0, r2
 8001dc8:	42a8      	cmp	r0, r5
 8001dca:	4192      	sbcs	r2, r2
 8001dcc:	4252      	negs	r2, r2
 8001dce:	4691      	mov	r9, r2
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	1ae3      	subs	r3, r4, r3
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	464b      	mov	r3, r9
 8001dd8:	1ad2      	subs	r2, r2, r3
 8001dda:	0013      	movs	r3, r2
 8001ddc:	4691      	mov	r9, r2
 8001dde:	021a      	lsls	r2, r3, #8
 8001de0:	d46c      	bmi.n	8001ebc <__aeabi_dsub+0x528>
 8001de2:	464a      	mov	r2, r9
 8001de4:	464c      	mov	r4, r9
 8001de6:	432a      	orrs	r2, r5
 8001de8:	d000      	beq.n	8001dec <__aeabi_dsub+0x458>
 8001dea:	e63a      	b.n	8001a62 <__aeabi_dsub+0xce>
 8001dec:	2600      	movs	r6, #0
 8001dee:	2400      	movs	r4, #0
 8001df0:	2500      	movs	r5, #0
 8001df2:	e678      	b.n	8001ae6 <__aeabi_dsub+0x152>
 8001df4:	9902      	ldr	r1, [sp, #8]
 8001df6:	4653      	mov	r3, sl
 8001df8:	000d      	movs	r5, r1
 8001dfa:	3a20      	subs	r2, #32
 8001dfc:	40d5      	lsrs	r5, r2
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d006      	beq.n	8001e10 <__aeabi_dsub+0x47c>
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	1ad2      	subs	r2, r2, r3
 8001e06:	000b      	movs	r3, r1
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	4662      	mov	r2, ip
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4693      	mov	fp, r2
 8001e10:	465b      	mov	r3, fp
 8001e12:	1e5a      	subs	r2, r3, #1
 8001e14:	4193      	sbcs	r3, r2
 8001e16:	431d      	orrs	r5, r3
 8001e18:	e619      	b.n	8001a4e <__aeabi_dsub+0xba>
 8001e1a:	4653      	mov	r3, sl
 8001e1c:	1e5a      	subs	r2, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x490>
 8001e22:	e0c6      	b.n	8001fb2 <__aeabi_dsub+0x61e>
 8001e24:	4e9d      	ldr	r6, [pc, #628]	@ (800209c <__aeabi_dsub+0x708>)
 8001e26:	45b2      	cmp	sl, r6
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x498>
 8001e2a:	e6bd      	b.n	8001ba8 <__aeabi_dsub+0x214>
 8001e2c:	4688      	mov	r8, r1
 8001e2e:	000e      	movs	r6, r1
 8001e30:	2501      	movs	r5, #1
 8001e32:	2a38      	cmp	r2, #56	@ 0x38
 8001e34:	dc10      	bgt.n	8001e58 <__aeabi_dsub+0x4c4>
 8001e36:	2a1f      	cmp	r2, #31
 8001e38:	dc7f      	bgt.n	8001f3a <__aeabi_dsub+0x5a6>
 8001e3a:	2120      	movs	r1, #32
 8001e3c:	0025      	movs	r5, r4
 8001e3e:	1a89      	subs	r1, r1, r2
 8001e40:	0007      	movs	r7, r0
 8001e42:	4088      	lsls	r0, r1
 8001e44:	408d      	lsls	r5, r1
 8001e46:	40d7      	lsrs	r7, r2
 8001e48:	40d4      	lsrs	r4, r2
 8001e4a:	1e41      	subs	r1, r0, #1
 8001e4c:	4188      	sbcs	r0, r1
 8001e4e:	9b02      	ldr	r3, [sp, #8]
 8001e50:	433d      	orrs	r5, r7
 8001e52:	1b1b      	subs	r3, r3, r4
 8001e54:	4305      	orrs	r5, r0
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	4662      	mov	r2, ip
 8001e5a:	1b55      	subs	r5, r2, r5
 8001e5c:	45ac      	cmp	ip, r5
 8001e5e:	4192      	sbcs	r2, r2
 8001e60:	9b02      	ldr	r3, [sp, #8]
 8001e62:	4252      	negs	r2, r2
 8001e64:	464f      	mov	r7, r9
 8001e66:	1a9c      	subs	r4, r3, r2
 8001e68:	e5f6      	b.n	8001a58 <__aeabi_dsub+0xc4>
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	d000      	beq.n	8001e70 <__aeabi_dsub+0x4dc>
 8001e6e:	e0b7      	b.n	8001fe0 <__aeabi_dsub+0x64c>
 8001e70:	2a00      	cmp	r2, #0
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x4e2>
 8001e74:	e0f0      	b.n	8002058 <__aeabi_dsub+0x6c4>
 8001e76:	2601      	movs	r6, #1
 8001e78:	400e      	ands	r6, r1
 8001e7a:	4663      	mov	r3, ip
 8001e7c:	9802      	ldr	r0, [sp, #8]
 8001e7e:	08d9      	lsrs	r1, r3, #3
 8001e80:	0742      	lsls	r2, r0, #29
 8001e82:	430a      	orrs	r2, r1
 8001e84:	08c4      	lsrs	r4, r0, #3
 8001e86:	e696      	b.n	8001bb6 <__aeabi_dsub+0x222>
 8001e88:	4c85      	ldr	r4, [pc, #532]	@ (80020a0 <__aeabi_dsub+0x70c>)
 8001e8a:	1aff      	subs	r7, r7, r3
 8001e8c:	4014      	ands	r4, r2
 8001e8e:	0762      	lsls	r2, r4, #29
 8001e90:	08e4      	lsrs	r4, r4, #3
 8001e92:	e760      	b.n	8001d56 <__aeabi_dsub+0x3c2>
 8001e94:	4981      	ldr	r1, [pc, #516]	@ (800209c <__aeabi_dsub+0x708>)
 8001e96:	428a      	cmp	r2, r1
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x508>
 8001e9a:	e0c9      	b.n	8002030 <__aeabi_dsub+0x69c>
 8001e9c:	4663      	mov	r3, ip
 8001e9e:	18c1      	adds	r1, r0, r3
 8001ea0:	4281      	cmp	r1, r0
 8001ea2:	4180      	sbcs	r0, r0
 8001ea4:	9b02      	ldr	r3, [sp, #8]
 8001ea6:	4240      	negs	r0, r0
 8001ea8:	18e3      	adds	r3, r4, r3
 8001eaa:	181b      	adds	r3, r3, r0
 8001eac:	07dd      	lsls	r5, r3, #31
 8001eae:	085c      	lsrs	r4, r3, #1
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	0849      	lsrs	r1, r1, #1
 8001eb4:	430d      	orrs	r5, r1
 8001eb6:	0017      	movs	r7, r2
 8001eb8:	402b      	ands	r3, r5
 8001eba:	e710      	b.n	8001cde <__aeabi_dsub+0x34a>
 8001ebc:	4663      	mov	r3, ip
 8001ebe:	1a1d      	subs	r5, r3, r0
 8001ec0:	45ac      	cmp	ip, r5
 8001ec2:	4192      	sbcs	r2, r2
 8001ec4:	2601      	movs	r6, #1
 8001ec6:	9b02      	ldr	r3, [sp, #8]
 8001ec8:	4252      	negs	r2, r2
 8001eca:	1b1c      	subs	r4, r3, r4
 8001ecc:	4688      	mov	r8, r1
 8001ece:	1aa4      	subs	r4, r4, r2
 8001ed0:	400e      	ands	r6, r1
 8001ed2:	e5c6      	b.n	8001a62 <__aeabi_dsub+0xce>
 8001ed4:	4663      	mov	r3, ip
 8001ed6:	18c5      	adds	r5, r0, r3
 8001ed8:	9b02      	ldr	r3, [sp, #8]
 8001eda:	4285      	cmp	r5, r0
 8001edc:	4180      	sbcs	r0, r0
 8001ede:	469c      	mov	ip, r3
 8001ee0:	4240      	negs	r0, r0
 8001ee2:	4464      	add	r4, ip
 8001ee4:	1824      	adds	r4, r4, r0
 8001ee6:	2701      	movs	r7, #1
 8001ee8:	0223      	lsls	r3, r4, #8
 8001eea:	d400      	bmi.n	8001eee <__aeabi_dsub+0x55a>
 8001eec:	e6f5      	b.n	8001cda <__aeabi_dsub+0x346>
 8001eee:	2702      	movs	r7, #2
 8001ef0:	e641      	b.n	8001b76 <__aeabi_dsub+0x1e2>
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	1ac5      	subs	r5, r0, r3
 8001ef6:	42a8      	cmp	r0, r5
 8001ef8:	4180      	sbcs	r0, r0
 8001efa:	9b02      	ldr	r3, [sp, #8]
 8001efc:	4240      	negs	r0, r0
 8001efe:	1ae4      	subs	r4, r4, r3
 8001f00:	2701      	movs	r7, #1
 8001f02:	1a24      	subs	r4, r4, r0
 8001f04:	e5a8      	b.n	8001a58 <__aeabi_dsub+0xc4>
 8001f06:	9d02      	ldr	r5, [sp, #8]
 8001f08:	4652      	mov	r2, sl
 8001f0a:	002b      	movs	r3, r5
 8001f0c:	3a20      	subs	r2, #32
 8001f0e:	40d3      	lsrs	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	4653      	mov	r3, sl
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d006      	beq.n	8001f26 <__aeabi_dsub+0x592>
 8001f18:	2240      	movs	r2, #64	@ 0x40
 8001f1a:	1ad2      	subs	r2, r2, r3
 8001f1c:	002b      	movs	r3, r5
 8001f1e:	4093      	lsls	r3, r2
 8001f20:	4662      	mov	r2, ip
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	465d      	mov	r5, fp
 8001f28:	1e6b      	subs	r3, r5, #1
 8001f2a:	419d      	sbcs	r5, r3
 8001f2c:	430d      	orrs	r5, r1
 8001f2e:	e615      	b.n	8001b5c <__aeabi_dsub+0x1c8>
 8001f30:	0762      	lsls	r2, r4, #29
 8001f32:	08c0      	lsrs	r0, r0, #3
 8001f34:	4302      	orrs	r2, r0
 8001f36:	08e4      	lsrs	r4, r4, #3
 8001f38:	e70d      	b.n	8001d56 <__aeabi_dsub+0x3c2>
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	0027      	movs	r7, r4
 8001f3e:	3920      	subs	r1, #32
 8001f40:	40cf      	lsrs	r7, r1
 8001f42:	2a20      	cmp	r2, #32
 8001f44:	d005      	beq.n	8001f52 <__aeabi_dsub+0x5be>
 8001f46:	2140      	movs	r1, #64	@ 0x40
 8001f48:	1a8a      	subs	r2, r1, r2
 8001f4a:	4094      	lsls	r4, r2
 8001f4c:	0025      	movs	r5, r4
 8001f4e:	4305      	orrs	r5, r0
 8001f50:	9503      	str	r5, [sp, #12]
 8001f52:	9d03      	ldr	r5, [sp, #12]
 8001f54:	1e6a      	subs	r2, r5, #1
 8001f56:	4195      	sbcs	r5, r2
 8001f58:	433d      	orrs	r5, r7
 8001f5a:	e77d      	b.n	8001e58 <__aeabi_dsub+0x4c4>
 8001f5c:	2a00      	cmp	r2, #0
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x5ce>
 8001f60:	e744      	b.n	8001dec <__aeabi_dsub+0x458>
 8001f62:	2601      	movs	r6, #1
 8001f64:	400e      	ands	r6, r1
 8001f66:	4663      	mov	r3, ip
 8001f68:	08d9      	lsrs	r1, r3, #3
 8001f6a:	9b02      	ldr	r3, [sp, #8]
 8001f6c:	075a      	lsls	r2, r3, #29
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	08dc      	lsrs	r4, r3, #3
 8001f72:	e6f0      	b.n	8001d56 <__aeabi_dsub+0x3c2>
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d028      	beq.n	8001fca <__aeabi_dsub+0x636>
 8001f78:	4662      	mov	r2, ip
 8001f7a:	9f02      	ldr	r7, [sp, #8]
 8001f7c:	08c0      	lsrs	r0, r0, #3
 8001f7e:	433a      	orrs	r2, r7
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x5f0>
 8001f82:	e6dc      	b.n	8001d3e <__aeabi_dsub+0x3aa>
 8001f84:	0762      	lsls	r2, r4, #29
 8001f86:	4310      	orrs	r0, r2
 8001f88:	2280      	movs	r2, #128	@ 0x80
 8001f8a:	08e4      	lsrs	r4, r4, #3
 8001f8c:	0312      	lsls	r2, r2, #12
 8001f8e:	4214      	tst	r4, r2
 8001f90:	d009      	beq.n	8001fa6 <__aeabi_dsub+0x612>
 8001f92:	08fd      	lsrs	r5, r7, #3
 8001f94:	4215      	tst	r5, r2
 8001f96:	d106      	bne.n	8001fa6 <__aeabi_dsub+0x612>
 8001f98:	4663      	mov	r3, ip
 8001f9a:	2601      	movs	r6, #1
 8001f9c:	002c      	movs	r4, r5
 8001f9e:	08d8      	lsrs	r0, r3, #3
 8001fa0:	077b      	lsls	r3, r7, #29
 8001fa2:	4318      	orrs	r0, r3
 8001fa4:	400e      	ands	r6, r1
 8001fa6:	0f42      	lsrs	r2, r0, #29
 8001fa8:	00c0      	lsls	r0, r0, #3
 8001faa:	08c0      	lsrs	r0, r0, #3
 8001fac:	0752      	lsls	r2, r2, #29
 8001fae:	4302      	orrs	r2, r0
 8001fb0:	e601      	b.n	8001bb6 <__aeabi_dsub+0x222>
 8001fb2:	4663      	mov	r3, ip
 8001fb4:	1a1d      	subs	r5, r3, r0
 8001fb6:	45ac      	cmp	ip, r5
 8001fb8:	4192      	sbcs	r2, r2
 8001fba:	9b02      	ldr	r3, [sp, #8]
 8001fbc:	4252      	negs	r2, r2
 8001fbe:	1b1c      	subs	r4, r3, r4
 8001fc0:	000e      	movs	r6, r1
 8001fc2:	4688      	mov	r8, r1
 8001fc4:	2701      	movs	r7, #1
 8001fc6:	1aa4      	subs	r4, r4, r2
 8001fc8:	e546      	b.n	8001a58 <__aeabi_dsub+0xc4>
 8001fca:	4663      	mov	r3, ip
 8001fcc:	08d9      	lsrs	r1, r3, #3
 8001fce:	9b02      	ldr	r3, [sp, #8]
 8001fd0:	075a      	lsls	r2, r3, #29
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	08dc      	lsrs	r4, r3, #3
 8001fd6:	e5ee      	b.n	8001bb6 <__aeabi_dsub+0x222>
 8001fd8:	4663      	mov	r3, ip
 8001fda:	9c02      	ldr	r4, [sp, #8]
 8001fdc:	9303      	str	r3, [sp, #12]
 8001fde:	e6c7      	b.n	8001d70 <__aeabi_dsub+0x3dc>
 8001fe0:	08c0      	lsrs	r0, r0, #3
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x654>
 8001fe6:	e6aa      	b.n	8001d3e <__aeabi_dsub+0x3aa>
 8001fe8:	0762      	lsls	r2, r4, #29
 8001fea:	4310      	orrs	r0, r2
 8001fec:	2280      	movs	r2, #128	@ 0x80
 8001fee:	08e4      	lsrs	r4, r4, #3
 8001ff0:	0312      	lsls	r2, r2, #12
 8001ff2:	4214      	tst	r4, r2
 8001ff4:	d0d7      	beq.n	8001fa6 <__aeabi_dsub+0x612>
 8001ff6:	9f02      	ldr	r7, [sp, #8]
 8001ff8:	08fd      	lsrs	r5, r7, #3
 8001ffa:	4215      	tst	r5, r2
 8001ffc:	d1d3      	bne.n	8001fa6 <__aeabi_dsub+0x612>
 8001ffe:	4663      	mov	r3, ip
 8002000:	2601      	movs	r6, #1
 8002002:	08d8      	lsrs	r0, r3, #3
 8002004:	077b      	lsls	r3, r7, #29
 8002006:	002c      	movs	r4, r5
 8002008:	4318      	orrs	r0, r3
 800200a:	400e      	ands	r6, r1
 800200c:	e7cb      	b.n	8001fa6 <__aeabi_dsub+0x612>
 800200e:	000a      	movs	r2, r1
 8002010:	0027      	movs	r7, r4
 8002012:	3a20      	subs	r2, #32
 8002014:	40d7      	lsrs	r7, r2
 8002016:	2920      	cmp	r1, #32
 8002018:	d005      	beq.n	8002026 <__aeabi_dsub+0x692>
 800201a:	2240      	movs	r2, #64	@ 0x40
 800201c:	1a52      	subs	r2, r2, r1
 800201e:	4094      	lsls	r4, r2
 8002020:	0025      	movs	r5, r4
 8002022:	4305      	orrs	r5, r0
 8002024:	9503      	str	r5, [sp, #12]
 8002026:	9d03      	ldr	r5, [sp, #12]
 8002028:	1e6a      	subs	r2, r5, #1
 800202a:	4195      	sbcs	r5, r2
 800202c:	432f      	orrs	r7, r5
 800202e:	e610      	b.n	8001c52 <__aeabi_dsub+0x2be>
 8002030:	0014      	movs	r4, r2
 8002032:	2500      	movs	r5, #0
 8002034:	2200      	movs	r2, #0
 8002036:	e556      	b.n	8001ae6 <__aeabi_dsub+0x152>
 8002038:	9b02      	ldr	r3, [sp, #8]
 800203a:	4460      	add	r0, ip
 800203c:	4699      	mov	r9, r3
 800203e:	4560      	cmp	r0, ip
 8002040:	4192      	sbcs	r2, r2
 8002042:	444c      	add	r4, r9
 8002044:	4252      	negs	r2, r2
 8002046:	0005      	movs	r5, r0
 8002048:	18a4      	adds	r4, r4, r2
 800204a:	e74c      	b.n	8001ee6 <__aeabi_dsub+0x552>
 800204c:	001a      	movs	r2, r3
 800204e:	001c      	movs	r4, r3
 8002050:	432a      	orrs	r2, r5
 8002052:	d000      	beq.n	8002056 <__aeabi_dsub+0x6c2>
 8002054:	e6b3      	b.n	8001dbe <__aeabi_dsub+0x42a>
 8002056:	e6c9      	b.n	8001dec <__aeabi_dsub+0x458>
 8002058:	2480      	movs	r4, #128	@ 0x80
 800205a:	2600      	movs	r6, #0
 800205c:	0324      	lsls	r4, r4, #12
 800205e:	e5ae      	b.n	8001bbe <__aeabi_dsub+0x22a>
 8002060:	2120      	movs	r1, #32
 8002062:	2500      	movs	r5, #0
 8002064:	1a09      	subs	r1, r1, r0
 8002066:	e517      	b.n	8001a98 <__aeabi_dsub+0x104>
 8002068:	2200      	movs	r2, #0
 800206a:	2500      	movs	r5, #0
 800206c:	4c0b      	ldr	r4, [pc, #44]	@ (800209c <__aeabi_dsub+0x708>)
 800206e:	e53a      	b.n	8001ae6 <__aeabi_dsub+0x152>
 8002070:	2d00      	cmp	r5, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6e2>
 8002074:	e5f6      	b.n	8001c64 <__aeabi_dsub+0x2d0>
 8002076:	464b      	mov	r3, r9
 8002078:	1bda      	subs	r2, r3, r7
 800207a:	4692      	mov	sl, r2
 800207c:	2f00      	cmp	r7, #0
 800207e:	d100      	bne.n	8002082 <__aeabi_dsub+0x6ee>
 8002080:	e66f      	b.n	8001d62 <__aeabi_dsub+0x3ce>
 8002082:	2a38      	cmp	r2, #56	@ 0x38
 8002084:	dc05      	bgt.n	8002092 <__aeabi_dsub+0x6fe>
 8002086:	2680      	movs	r6, #128	@ 0x80
 8002088:	0436      	lsls	r6, r6, #16
 800208a:	4334      	orrs	r4, r6
 800208c:	4688      	mov	r8, r1
 800208e:	000e      	movs	r6, r1
 8002090:	e6d1      	b.n	8001e36 <__aeabi_dsub+0x4a2>
 8002092:	4688      	mov	r8, r1
 8002094:	000e      	movs	r6, r1
 8002096:	2501      	movs	r5, #1
 8002098:	e6de      	b.n	8001e58 <__aeabi_dsub+0x4c4>
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	000007ff 	.word	0x000007ff
 80020a0:	ff7fffff 	.word	0xff7fffff
 80020a4:	000007fe 	.word	0x000007fe
 80020a8:	2d00      	cmp	r5, #0
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x71a>
 80020ac:	e668      	b.n	8001d80 <__aeabi_dsub+0x3ec>
 80020ae:	464b      	mov	r3, r9
 80020b0:	1bd9      	subs	r1, r3, r7
 80020b2:	2f00      	cmp	r7, #0
 80020b4:	d101      	bne.n	80020ba <__aeabi_dsub+0x726>
 80020b6:	468a      	mov	sl, r1
 80020b8:	e5a7      	b.n	8001c0a <__aeabi_dsub+0x276>
 80020ba:	2701      	movs	r7, #1
 80020bc:	2938      	cmp	r1, #56	@ 0x38
 80020be:	dd00      	ble.n	80020c2 <__aeabi_dsub+0x72e>
 80020c0:	e5c7      	b.n	8001c52 <__aeabi_dsub+0x2be>
 80020c2:	2280      	movs	r2, #128	@ 0x80
 80020c4:	0412      	lsls	r2, r2, #16
 80020c6:	4314      	orrs	r4, r2
 80020c8:	e5af      	b.n	8001c2a <__aeabi_dsub+0x296>
 80020ca:	46c0      	nop			@ (mov r8, r8)

080020cc <__aeabi_f2d>:
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	0242      	lsls	r2, r0, #9
 80020d0:	0043      	lsls	r3, r0, #1
 80020d2:	0fc4      	lsrs	r4, r0, #31
 80020d4:	20fe      	movs	r0, #254	@ 0xfe
 80020d6:	0e1b      	lsrs	r3, r3, #24
 80020d8:	1c59      	adds	r1, r3, #1
 80020da:	0a55      	lsrs	r5, r2, #9
 80020dc:	4208      	tst	r0, r1
 80020de:	d00c      	beq.n	80020fa <__aeabi_f2d+0x2e>
 80020e0:	21e0      	movs	r1, #224	@ 0xe0
 80020e2:	0089      	lsls	r1, r1, #2
 80020e4:	468c      	mov	ip, r1
 80020e6:	076d      	lsls	r5, r5, #29
 80020e8:	0b12      	lsrs	r2, r2, #12
 80020ea:	4463      	add	r3, ip
 80020ec:	051b      	lsls	r3, r3, #20
 80020ee:	4313      	orrs	r3, r2
 80020f0:	07e4      	lsls	r4, r4, #31
 80020f2:	4323      	orrs	r3, r4
 80020f4:	0028      	movs	r0, r5
 80020f6:	0019      	movs	r1, r3
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d114      	bne.n	8002128 <__aeabi_f2d+0x5c>
 80020fe:	2d00      	cmp	r5, #0
 8002100:	d01b      	beq.n	800213a <__aeabi_f2d+0x6e>
 8002102:	0028      	movs	r0, r5
 8002104:	f000 f8ae 	bl	8002264 <__clzsi2>
 8002108:	280a      	cmp	r0, #10
 800210a:	dc1c      	bgt.n	8002146 <__aeabi_f2d+0x7a>
 800210c:	230b      	movs	r3, #11
 800210e:	002a      	movs	r2, r5
 8002110:	1a1b      	subs	r3, r3, r0
 8002112:	40da      	lsrs	r2, r3
 8002114:	0003      	movs	r3, r0
 8002116:	3315      	adds	r3, #21
 8002118:	409d      	lsls	r5, r3
 800211a:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <__aeabi_f2d+0x88>)
 800211c:	0312      	lsls	r2, r2, #12
 800211e:	1a1b      	subs	r3, r3, r0
 8002120:	055b      	lsls	r3, r3, #21
 8002122:	0b12      	lsrs	r2, r2, #12
 8002124:	0d5b      	lsrs	r3, r3, #21
 8002126:	e7e1      	b.n	80020ec <__aeabi_f2d+0x20>
 8002128:	2d00      	cmp	r5, #0
 800212a:	d009      	beq.n	8002140 <__aeabi_f2d+0x74>
 800212c:	0b13      	lsrs	r3, r2, #12
 800212e:	2280      	movs	r2, #128	@ 0x80
 8002130:	0312      	lsls	r2, r2, #12
 8002132:	431a      	orrs	r2, r3
 8002134:	076d      	lsls	r5, r5, #29
 8002136:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <__aeabi_f2d+0x8c>)
 8002138:	e7d8      	b.n	80020ec <__aeabi_f2d+0x20>
 800213a:	2300      	movs	r3, #0
 800213c:	2200      	movs	r2, #0
 800213e:	e7d5      	b.n	80020ec <__aeabi_f2d+0x20>
 8002140:	2200      	movs	r2, #0
 8002142:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <__aeabi_f2d+0x8c>)
 8002144:	e7d2      	b.n	80020ec <__aeabi_f2d+0x20>
 8002146:	0003      	movs	r3, r0
 8002148:	002a      	movs	r2, r5
 800214a:	3b0b      	subs	r3, #11
 800214c:	409a      	lsls	r2, r3
 800214e:	2500      	movs	r5, #0
 8002150:	e7e3      	b.n	800211a <__aeabi_f2d+0x4e>
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	00000389 	.word	0x00000389
 8002158:	000007ff 	.word	0x000007ff

0800215c <__aeabi_d2f>:
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	004b      	lsls	r3, r1, #1
 8002160:	030f      	lsls	r7, r1, #12
 8002162:	0d5b      	lsrs	r3, r3, #21
 8002164:	4c3b      	ldr	r4, [pc, #236]	@ (8002254 <__aeabi_d2f+0xf8>)
 8002166:	0f45      	lsrs	r5, r0, #29
 8002168:	b083      	sub	sp, #12
 800216a:	0a7f      	lsrs	r7, r7, #9
 800216c:	1c5e      	adds	r6, r3, #1
 800216e:	432f      	orrs	r7, r5
 8002170:	9000      	str	r0, [sp, #0]
 8002172:	9101      	str	r1, [sp, #4]
 8002174:	0fca      	lsrs	r2, r1, #31
 8002176:	00c5      	lsls	r5, r0, #3
 8002178:	4226      	tst	r6, r4
 800217a:	d00b      	beq.n	8002194 <__aeabi_d2f+0x38>
 800217c:	4936      	ldr	r1, [pc, #216]	@ (8002258 <__aeabi_d2f+0xfc>)
 800217e:	185c      	adds	r4, r3, r1
 8002180:	2cfe      	cmp	r4, #254	@ 0xfe
 8002182:	dd13      	ble.n	80021ac <__aeabi_d2f+0x50>
 8002184:	20ff      	movs	r0, #255	@ 0xff
 8002186:	2300      	movs	r3, #0
 8002188:	05c0      	lsls	r0, r0, #23
 800218a:	4318      	orrs	r0, r3
 800218c:	07d2      	lsls	r2, r2, #31
 800218e:	4310      	orrs	r0, r2
 8002190:	b003      	add	sp, #12
 8002192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <__aeabi_d2f+0x42>
 8002198:	2000      	movs	r0, #0
 800219a:	2300      	movs	r3, #0
 800219c:	e7f4      	b.n	8002188 <__aeabi_d2f+0x2c>
 800219e:	433d      	orrs	r5, r7
 80021a0:	d0f0      	beq.n	8002184 <__aeabi_d2f+0x28>
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	03db      	lsls	r3, r3, #15
 80021a6:	20ff      	movs	r0, #255	@ 0xff
 80021a8:	433b      	orrs	r3, r7
 80021aa:	e7ed      	b.n	8002188 <__aeabi_d2f+0x2c>
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	dd14      	ble.n	80021da <__aeabi_d2f+0x7e>
 80021b0:	9b00      	ldr	r3, [sp, #0]
 80021b2:	00ff      	lsls	r7, r7, #3
 80021b4:	019b      	lsls	r3, r3, #6
 80021b6:	1e58      	subs	r0, r3, #1
 80021b8:	4183      	sbcs	r3, r0
 80021ba:	0f69      	lsrs	r1, r5, #29
 80021bc:	433b      	orrs	r3, r7
 80021be:	430b      	orrs	r3, r1
 80021c0:	0759      	lsls	r1, r3, #29
 80021c2:	d041      	beq.n	8002248 <__aeabi_d2f+0xec>
 80021c4:	210f      	movs	r1, #15
 80021c6:	4019      	ands	r1, r3
 80021c8:	2904      	cmp	r1, #4
 80021ca:	d028      	beq.n	800221e <__aeabi_d2f+0xc2>
 80021cc:	3304      	adds	r3, #4
 80021ce:	0159      	lsls	r1, r3, #5
 80021d0:	d525      	bpl.n	800221e <__aeabi_d2f+0xc2>
 80021d2:	3401      	adds	r4, #1
 80021d4:	2300      	movs	r3, #0
 80021d6:	b2e0      	uxtb	r0, r4
 80021d8:	e7d6      	b.n	8002188 <__aeabi_d2f+0x2c>
 80021da:	0021      	movs	r1, r4
 80021dc:	3117      	adds	r1, #23
 80021de:	dbdb      	blt.n	8002198 <__aeabi_d2f+0x3c>
 80021e0:	2180      	movs	r1, #128	@ 0x80
 80021e2:	201e      	movs	r0, #30
 80021e4:	0409      	lsls	r1, r1, #16
 80021e6:	4339      	orrs	r1, r7
 80021e8:	1b00      	subs	r0, r0, r4
 80021ea:	281f      	cmp	r0, #31
 80021ec:	dd1b      	ble.n	8002226 <__aeabi_d2f+0xca>
 80021ee:	2602      	movs	r6, #2
 80021f0:	4276      	negs	r6, r6
 80021f2:	1b34      	subs	r4, r6, r4
 80021f4:	000e      	movs	r6, r1
 80021f6:	40e6      	lsrs	r6, r4
 80021f8:	0034      	movs	r4, r6
 80021fa:	2820      	cmp	r0, #32
 80021fc:	d004      	beq.n	8002208 <__aeabi_d2f+0xac>
 80021fe:	4817      	ldr	r0, [pc, #92]	@ (800225c <__aeabi_d2f+0x100>)
 8002200:	4684      	mov	ip, r0
 8002202:	4463      	add	r3, ip
 8002204:	4099      	lsls	r1, r3
 8002206:	430d      	orrs	r5, r1
 8002208:	002b      	movs	r3, r5
 800220a:	1e59      	subs	r1, r3, #1
 800220c:	418b      	sbcs	r3, r1
 800220e:	4323      	orrs	r3, r4
 8002210:	0759      	lsls	r1, r3, #29
 8002212:	d015      	beq.n	8002240 <__aeabi_d2f+0xe4>
 8002214:	210f      	movs	r1, #15
 8002216:	2400      	movs	r4, #0
 8002218:	4019      	ands	r1, r3
 800221a:	2904      	cmp	r1, #4
 800221c:	d117      	bne.n	800224e <__aeabi_d2f+0xf2>
 800221e:	019b      	lsls	r3, r3, #6
 8002220:	0a5b      	lsrs	r3, r3, #9
 8002222:	b2e0      	uxtb	r0, r4
 8002224:	e7b0      	b.n	8002188 <__aeabi_d2f+0x2c>
 8002226:	4c0e      	ldr	r4, [pc, #56]	@ (8002260 <__aeabi_d2f+0x104>)
 8002228:	191c      	adds	r4, r3, r4
 800222a:	002b      	movs	r3, r5
 800222c:	40a5      	lsls	r5, r4
 800222e:	40c3      	lsrs	r3, r0
 8002230:	40a1      	lsls	r1, r4
 8002232:	1e68      	subs	r0, r5, #1
 8002234:	4185      	sbcs	r5, r0
 8002236:	4329      	orrs	r1, r5
 8002238:	430b      	orrs	r3, r1
 800223a:	2400      	movs	r4, #0
 800223c:	0759      	lsls	r1, r3, #29
 800223e:	d1c1      	bne.n	80021c4 <__aeabi_d2f+0x68>
 8002240:	019b      	lsls	r3, r3, #6
 8002242:	2000      	movs	r0, #0
 8002244:	0a5b      	lsrs	r3, r3, #9
 8002246:	e79f      	b.n	8002188 <__aeabi_d2f+0x2c>
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	b2e0      	uxtb	r0, r4
 800224c:	e79c      	b.n	8002188 <__aeabi_d2f+0x2c>
 800224e:	3304      	adds	r3, #4
 8002250:	e7e5      	b.n	800221e <__aeabi_d2f+0xc2>
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	000007fe 	.word	0x000007fe
 8002258:	fffffc80 	.word	0xfffffc80
 800225c:	fffffca2 	.word	0xfffffca2
 8002260:	fffffc82 	.word	0xfffffc82

08002264 <__clzsi2>:
 8002264:	211c      	movs	r1, #28
 8002266:	2301      	movs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	4298      	cmp	r0, r3
 800226c:	d301      	bcc.n	8002272 <__clzsi2+0xe>
 800226e:	0c00      	lsrs	r0, r0, #16
 8002270:	3910      	subs	r1, #16
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	4298      	cmp	r0, r3
 8002276:	d301      	bcc.n	800227c <__clzsi2+0x18>
 8002278:	0a00      	lsrs	r0, r0, #8
 800227a:	3908      	subs	r1, #8
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	4298      	cmp	r0, r3
 8002280:	d301      	bcc.n	8002286 <__clzsi2+0x22>
 8002282:	0900      	lsrs	r0, r0, #4
 8002284:	3904      	subs	r1, #4
 8002286:	a202      	add	r2, pc, #8	@ (adr r2, 8002290 <__clzsi2+0x2c>)
 8002288:	5c10      	ldrb	r0, [r2, r0]
 800228a:	1840      	adds	r0, r0, r1
 800228c:	4770      	bx	lr
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	02020304 	.word	0x02020304
 8002294:	01010101 	.word	0x01010101
	...

080022a0 <microDelay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay(uint16_t delay) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	0002      	movs	r2, r0
 80022a8:	1dbb      	adds	r3, r7, #6
 80022aa:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <microDelay+0x30>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2200      	movs	r2, #0
 80022b2:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80022b4:	46c0      	nop			@ (mov r8, r8)
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <microDelay+0x30>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022bc:	1dbb      	adds	r3, r7, #6
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3f8      	bcc.n	80022b6 <microDelay+0x16>
}
 80022c4:	46c0      	nop			@ (mov r8, r8)
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b002      	add	sp, #8
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	200000e0 	.word	0x200000e0

080022d4 <DHT22_Start>:

uint8_t DHT22_Start(void) {
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 80022da:	2417      	movs	r4, #23
 80022dc:	193b      	adds	r3, r7, r4
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	003b      	movs	r3, r7
 80022e4:	0018      	movs	r0, r3
 80022e6:	2314      	movs	r3, #20
 80022e8:	001a      	movs	r2, r3
 80022ea:	2100      	movs	r1, #0
 80022ec:	f003 fd40 	bl	8005d70 <memset>

    // Set pin as output
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_RESET);
 80022f0:	23a0      	movs	r3, #160	@ 0xa0
 80022f2:	05db      	lsls	r3, r3, #23
 80022f4:	2200      	movs	r2, #0
 80022f6:	2102      	movs	r1, #2
 80022f8:	0018      	movs	r0, r3
 80022fa:	f001 ff06 	bl	800410a <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = DHT22_PIN;
 80022fe:	003b      	movs	r3, r7
 8002300:	2202      	movs	r2, #2
 8002302:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002304:	003b      	movs	r3, r7
 8002306:	2201      	movs	r2, #1
 8002308:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	003b      	movs	r3, r7
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	003b      	movs	r3, r7
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStruct);
 8002316:	003a      	movs	r2, r7
 8002318:	23a0      	movs	r3, #160	@ 0xa0
 800231a:	05db      	lsls	r3, r3, #23
 800231c:	0011      	movs	r1, r2
 800231e:	0018      	movs	r0, r3
 8002320:	f001 fd72 	bl	8003e08 <HAL_GPIO_Init>

    // Pull the pin low for 1300 µs
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0); // Pin low
 8002324:	23a0      	movs	r3, #160	@ 0xa0
 8002326:	05db      	lsls	r3, r3, #23
 8002328:	2200      	movs	r2, #0
 800232a:	2102      	movs	r1, #2
 800232c:	0018      	movs	r0, r3
 800232e:	f001 feec 	bl	800410a <HAL_GPIO_WritePin>
    microDelay(1300); // Wait for 1300 µs
 8002332:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <DHT22_Start+0x100>)
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff ffb3 	bl	80022a0 <microDelay>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1); // Pin high
 800233a:	23a0      	movs	r3, #160	@ 0xa0
 800233c:	05db      	lsls	r3, r3, #23
 800233e:	2201      	movs	r2, #1
 8002340:	2102      	movs	r1, #2
 8002342:	0018      	movs	r0, r3
 8002344:	f001 fee1 	bl	800410a <HAL_GPIO_WritePin>
    microDelay(30); // Wait for 30 µs
 8002348:	201e      	movs	r0, #30
 800234a:	f7ff ffa9 	bl	80022a0 <microDelay>

    // Set pin as input to receive response
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234e:	003b      	movs	r3, r7
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // Default pull-up (internally)
 8002354:	003b      	movs	r3, r7
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStruct);
 800235a:	003a      	movs	r2, r7
 800235c:	23a0      	movs	r3, #160	@ 0xa0
 800235e:	05db      	lsls	r3, r3, #23
 8002360:	0011      	movs	r1, r2
 8002362:	0018      	movs	r0, r3
 8002364:	f001 fd50 	bl	8003e08 <HAL_GPIO_Init>

    // Wait for sensor response, checking if the pin is low
    microDelay(40); // Wait for 40 µs
 8002368:	2028      	movs	r0, #40	@ 0x28
 800236a:	f7ff ff99 	bl	80022a0 <microDelay>
    if (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) { // If pin is low
 800236e:	23a0      	movs	r3, #160	@ 0xa0
 8002370:	05db      	lsls	r3, r3, #23
 8002372:	2102      	movs	r1, #2
 8002374:	0018      	movs	r0, r3
 8002376:	f001 feab 	bl	80040d0 <HAL_GPIO_ReadPin>
 800237a:	1e03      	subs	r3, r0, #0
 800237c:	d10d      	bne.n	800239a <DHT22_Start+0xc6>
        microDelay(80); // Wait for 80 µs (total 120 µs from the start)
 800237e:	2050      	movs	r0, #80	@ 0x50
 8002380:	f7ff ff8e 	bl	80022a0 <microDelay>
        if (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) Response = 1; // If pin goes high, response OK
 8002384:	23a0      	movs	r3, #160	@ 0xa0
 8002386:	05db      	lsls	r3, r3, #23
 8002388:	2102      	movs	r1, #2
 800238a:	0018      	movs	r0, r3
 800238c:	f001 fea0 	bl	80040d0 <HAL_GPIO_ReadPin>
 8002390:	1e03      	subs	r3, r0, #0
 8002392:	d002      	beq.n	800239a <DHT22_Start+0xc6>
 8002394:	193b      	adds	r3, r7, r4
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
    }

    // Wait for the pin to go low (sensor finishes communication)
    pMillis = HAL_GetTick();
 800239a:	f000 fe13 	bl	8002fc4 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	4b0d      	ldr	r3, [pc, #52]	@ (80023d8 <DHT22_Start+0x104>)
 80023a2:	601a      	str	r2, [r3, #0]
    while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN) && (HAL_GetTick() - pMillis < 2)); // Timeout if pin stays high for too long
 80023a4:	46c0      	nop			@ (mov r8, r8)
 80023a6:	23a0      	movs	r3, #160	@ 0xa0
 80023a8:	05db      	lsls	r3, r3, #23
 80023aa:	2102      	movs	r1, #2
 80023ac:	0018      	movs	r0, r3
 80023ae:	f001 fe8f 	bl	80040d0 <HAL_GPIO_ReadPin>
 80023b2:	1e03      	subs	r3, r0, #0
 80023b4:	d007      	beq.n	80023c6 <DHT22_Start+0xf2>
 80023b6:	f000 fe05 	bl	8002fc4 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <DHT22_Start+0x104>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d9ef      	bls.n	80023a6 <DHT22_Start+0xd2>

    return Response; // Return 1 if response was valid, 0 otherwise
 80023c6:	2317      	movs	r3, #23
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	781b      	ldrb	r3, [r3, #0]
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b007      	add	sp, #28
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	00000514 	.word	0x00000514
 80023d8:	200001c8 	.word	0x200001c8

080023dc <DHT22_Read>:


uint8_t DHT22_Read(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
    uint8_t a, b = 0;
 80023e2:	1dbb      	adds	r3, r7, #6
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
    for (a = 0; a < 8; a++) {
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	e05c      	b.n	80024aa <DHT22_Read+0xce>
        pMillis = HAL_GetTick();
 80023f0:	f000 fde8 	bl	8002fc4 <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	4b32      	ldr	r3, [pc, #200]	@ (80024c0 <DHT22_Read+0xe4>)
 80023f8:	601a      	str	r2, [r3, #0]
        while (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN) && (HAL_GetTick() - pMillis < 2));
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	23a0      	movs	r3, #160	@ 0xa0
 80023fe:	05db      	lsls	r3, r3, #23
 8002400:	2102      	movs	r1, #2
 8002402:	0018      	movs	r0, r3
 8002404:	f001 fe64 	bl	80040d0 <HAL_GPIO_ReadPin>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d107      	bne.n	800241c <DHT22_Read+0x40>
 800240c:	f000 fdda 	bl	8002fc4 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <DHT22_Read+0xe4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d9ef      	bls.n	80023fc <DHT22_Read+0x20>

        microDelay(40); // Wait for 40us
 800241c:	2028      	movs	r0, #40	@ 0x28
 800241e:	f7ff ff3f 	bl	80022a0 <microDelay>

        if (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8002422:	23a0      	movs	r3, #160	@ 0xa0
 8002424:	05db      	lsls	r3, r3, #23
 8002426:	2102      	movs	r1, #2
 8002428:	0018      	movs	r0, r3
 800242a:	f001 fe51 	bl	80040d0 <HAL_GPIO_ReadPin>
 800242e:	1e03      	subs	r3, r0, #0
 8002430:	d00f      	beq.n	8002452 <DHT22_Read+0x76>
            b |= (1 << (7 - a)); // Set bit
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2207      	movs	r2, #7
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2201      	movs	r2, #1
 800243c:	409a      	lsls	r2, r3
 800243e:	0013      	movs	r3, r2
 8002440:	b25a      	sxtb	r2, r3
 8002442:	1dbb      	adds	r3, r7, #6
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b25b      	sxtb	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b25a      	sxtb	r2, r3
 800244c:	1dbb      	adds	r3, r7, #6
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e010      	b.n	8002474 <DHT22_Read+0x98>
        else
            b &= ~(1 << (7 - a)); // Clear bit
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2207      	movs	r2, #7
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2201      	movs	r2, #1
 800245c:	409a      	lsls	r2, r3
 800245e:	0013      	movs	r3, r2
 8002460:	b25b      	sxtb	r3, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	b25b      	sxtb	r3, r3
 8002466:	1dba      	adds	r2, r7, #6
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	b252      	sxtb	r2, r2
 800246c:	4013      	ands	r3, r2
 800246e:	b25a      	sxtb	r2, r3
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	701a      	strb	r2, [r3, #0]

        pMillis = HAL_GetTick();
 8002474:	f000 fda6 	bl	8002fc4 <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <DHT22_Read+0xe4>)
 800247c:	601a      	str	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN) && (HAL_GetTick() - pMillis < 2));
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	23a0      	movs	r3, #160	@ 0xa0
 8002482:	05db      	lsls	r3, r3, #23
 8002484:	2102      	movs	r1, #2
 8002486:	0018      	movs	r0, r3
 8002488:	f001 fe22 	bl	80040d0 <HAL_GPIO_ReadPin>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d007      	beq.n	80024a0 <DHT22_Read+0xc4>
 8002490:	f000 fd98 	bl	8002fc4 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <DHT22_Read+0xe4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d9ef      	bls.n	8002480 <DHT22_Read+0xa4>
    for (a = 0; a < 8; a++) {
 80024a0:	1dfb      	adds	r3, r7, #7
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	3201      	adds	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b07      	cmp	r3, #7
 80024b0:	d99e      	bls.n	80023f0 <DHT22_Read+0x14>
    }
    return b;
 80024b2:	1dbb      	adds	r3, r7, #6
 80024b4:	781b      	ldrb	r3, [r3, #0]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	200001c8 	.word	0x200001c8

080024c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c6:	46ce      	mov	lr, r9
 80024c8:	4647      	mov	r7, r8
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b087      	sub	sp, #28
 80024ce:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d0:	f000 fcfc 	bl	8002ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d4:	f000 f9e2 	bl	800289c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d8:	f000 fb4c 	bl	8002b74 <MX_GPIO_Init>
  MX_TIM1_Init();
 80024dc:	f000 faa0 	bl	8002a20 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80024e0:	f000 fafa 	bl	8002ad8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80024e4:	f000 fa34 	bl	8002950 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80024e8:	4bcf      	ldr	r3, [pc, #828]	@ (8002828 <main+0x364>)
 80024ea:	0018      	movs	r0, r3
 80024ec:	f002 fb88 	bl	8004c00 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 80024f0:	4bce      	ldr	r3, [pc, #824]	@ (800282c <main+0x368>)
 80024f2:	0018      	movs	r0, r3
 80024f4:	f001 f888 	bl	8003608 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (DHT22_Start()) {
 80024f8:	f7ff feec 	bl	80022d4 <DHT22_Start>
 80024fc:	1e03      	subs	r3, r0, #0
 80024fe:	d100      	bne.n	8002502 <main+0x3e>
 8002500:	e083      	b.n	800260a <main+0x146>
          // Read DHT22 sensor data
          RH1 = DHT22_Read();
 8002502:	f7ff ff6b 	bl	80023dc <DHT22_Read>
 8002506:	0003      	movs	r3, r0
 8002508:	001a      	movs	r2, r3
 800250a:	4bc9      	ldr	r3, [pc, #804]	@ (8002830 <main+0x36c>)
 800250c:	701a      	strb	r2, [r3, #0]
          RH2 = DHT22_Read();
 800250e:	f7ff ff65 	bl	80023dc <DHT22_Read>
 8002512:	0003      	movs	r3, r0
 8002514:	001a      	movs	r2, r3
 8002516:	4bc7      	ldr	r3, [pc, #796]	@ (8002834 <main+0x370>)
 8002518:	701a      	strb	r2, [r3, #0]
          TC1 = DHT22_Read();
 800251a:	f7ff ff5f 	bl	80023dc <DHT22_Read>
 800251e:	0003      	movs	r3, r0
 8002520:	001a      	movs	r2, r3
 8002522:	4bc5      	ldr	r3, [pc, #788]	@ (8002838 <main+0x374>)
 8002524:	701a      	strb	r2, [r3, #0]
          TC2 = DHT22_Read();
 8002526:	f7ff ff59 	bl	80023dc <DHT22_Read>
 800252a:	0003      	movs	r3, r0
 800252c:	001a      	movs	r2, r3
 800252e:	4bc3      	ldr	r3, [pc, #780]	@ (800283c <main+0x378>)
 8002530:	701a      	strb	r2, [r3, #0]
          SUM = DHT22_Read();
 8002532:	f7ff ff53 	bl	80023dc <DHT22_Read>
 8002536:	0003      	movs	r3, r0
 8002538:	001a      	movs	r2, r3
 800253a:	4bc1      	ldr	r3, [pc, #772]	@ (8002840 <main+0x37c>)
 800253c:	701a      	strb	r2, [r3, #0]

          // Verify checksum
          CHECK = RH1 + RH2 + TC1 + TC2;
 800253e:	4bbc      	ldr	r3, [pc, #752]	@ (8002830 <main+0x36c>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	4bbc      	ldr	r3, [pc, #752]	@ (8002834 <main+0x370>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4bbb      	ldr	r3, [pc, #748]	@ (8002838 <main+0x374>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	18d3      	adds	r3, r2, r3
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4bba      	ldr	r3, [pc, #744]	@ (800283c <main+0x378>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	18d3      	adds	r3, r2, r3
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4bba      	ldr	r3, [pc, #744]	@ (8002844 <main+0x380>)
 800255c:	701a      	strb	r2, [r3, #0]
          if (CHECK == SUM) {
 800255e:	4bb9      	ldr	r3, [pc, #740]	@ (8002844 <main+0x380>)
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	4bb7      	ldr	r3, [pc, #732]	@ (8002840 <main+0x37c>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d14f      	bne.n	800260a <main+0x146>
              // Calculate temperature in Celsius
              if (TC1 > 127) { // Negative temperature
 800256a:	4bb3      	ldr	r3, [pc, #716]	@ (8002838 <main+0x374>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	b25b      	sxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	da11      	bge.n	8002598 <main+0xd4>
                  tCelsius = (float)TC2 / 10 * (-1);
 8002574:	4bb1      	ldr	r3, [pc, #708]	@ (800283c <main+0x378>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	0018      	movs	r0, r3
 800257a:	f7fe fb9d 	bl	8000cb8 <__aeabi_ui2f>
 800257e:	1c03      	adds	r3, r0, #0
 8002580:	49b1      	ldr	r1, [pc, #708]	@ (8002848 <main+0x384>)
 8002582:	1c18      	adds	r0, r3, #0
 8002584:	f7fe f8ce 	bl	8000724 <__aeabi_fdiv>
 8002588:	1c03      	adds	r3, r0, #0
 800258a:	1c1a      	adds	r2, r3, #0
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	405a      	eors	r2, r3
 8002592:	4bae      	ldr	r3, [pc, #696]	@ (800284c <main+0x388>)
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e011      	b.n	80025bc <main+0xf8>
              } else {
                  tCelsius = (float)((TC1 << 8) | TC2) / 10;
 8002598:	4ba7      	ldr	r3, [pc, #668]	@ (8002838 <main+0x374>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	4aa7      	ldr	r2, [pc, #668]	@ (800283c <main+0x378>)
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7fe fb3b 	bl	8000c20 <__aeabi_i2f>
 80025aa:	1c03      	adds	r3, r0, #0
 80025ac:	49a6      	ldr	r1, [pc, #664]	@ (8002848 <main+0x384>)
 80025ae:	1c18      	adds	r0, r3, #0
 80025b0:	f7fe f8b8 	bl	8000724 <__aeabi_fdiv>
 80025b4:	1c03      	adds	r3, r0, #0
 80025b6:	1c1a      	adds	r2, r3, #0
 80025b8:	4ba4      	ldr	r3, [pc, #656]	@ (800284c <main+0x388>)
 80025ba:	601a      	str	r2, [r3, #0]
              }
              // Convert to Fahrenheit
              tFahrenheit = tCelsius * 9 / 5 + 32;
 80025bc:	4ba3      	ldr	r3, [pc, #652]	@ (800284c <main+0x388>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	49a3      	ldr	r1, [pc, #652]	@ (8002850 <main+0x38c>)
 80025c2:	1c18      	adds	r0, r3, #0
 80025c4:	f7fe f9ce 	bl	8000964 <__aeabi_fmul>
 80025c8:	1c03      	adds	r3, r0, #0
 80025ca:	49a2      	ldr	r1, [pc, #648]	@ (8002854 <main+0x390>)
 80025cc:	1c18      	adds	r0, r3, #0
 80025ce:	f7fe f8a9 	bl	8000724 <__aeabi_fdiv>
 80025d2:	1c03      	adds	r3, r0, #0
 80025d4:	2184      	movs	r1, #132	@ 0x84
 80025d6:	05c9      	lsls	r1, r1, #23
 80025d8:	1c18      	adds	r0, r3, #0
 80025da:	f7fd ff19 	bl	8000410 <__aeabi_fadd>
 80025de:	1c03      	adds	r3, r0, #0
 80025e0:	1c1a      	adds	r2, r3, #0
 80025e2:	4b9d      	ldr	r3, [pc, #628]	@ (8002858 <main+0x394>)
 80025e4:	601a      	str	r2, [r3, #0]

              // Calculate relative humidity
              RH = (float)((RH1 << 8) | RH2) / 10;
 80025e6:	4b92      	ldr	r3, [pc, #584]	@ (8002830 <main+0x36c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	4a91      	ldr	r2, [pc, #580]	@ (8002834 <main+0x370>)
 80025ee:	7812      	ldrb	r2, [r2, #0]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7fe fb14 	bl	8000c20 <__aeabi_i2f>
 80025f8:	1c03      	adds	r3, r0, #0
 80025fa:	4993      	ldr	r1, [pc, #588]	@ (8002848 <main+0x384>)
 80025fc:	1c18      	adds	r0, r3, #0
 80025fe:	f7fe f891 	bl	8000724 <__aeabi_fdiv>
 8002602:	1c03      	adds	r3, r0, #0
 8002604:	1c1a      	adds	r2, r3, #0
 8002606:	4b95      	ldr	r3, [pc, #596]	@ (800285c <main+0x398>)
 8002608:	601a      	str	r2, [r3, #0]
          }
      }

      // Scale temperature and humidity for easier formatting
      int16_t tCelsiusScaled = (int16_t)(tCelsius * 10);
 800260a:	4b90      	ldr	r3, [pc, #576]	@ (800284c <main+0x388>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	498e      	ldr	r1, [pc, #568]	@ (8002848 <main+0x384>)
 8002610:	1c18      	adds	r0, r3, #0
 8002612:	f7fe f9a7 	bl	8000964 <__aeabi_fmul>
 8002616:	1c03      	adds	r3, r0, #0
 8002618:	1dbc      	adds	r4, r7, #6
 800261a:	1c18      	adds	r0, r3, #0
 800261c:	f7fe fae0 	bl	8000be0 <__aeabi_f2iz>
 8002620:	0003      	movs	r3, r0
 8002622:	8023      	strh	r3, [r4, #0]
      int16_t RHScaled = (int16_t)(RH * 10);
 8002624:	4b8d      	ldr	r3, [pc, #564]	@ (800285c <main+0x398>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4987      	ldr	r1, [pc, #540]	@ (8002848 <main+0x384>)
 800262a:	1c18      	adds	r0, r3, #0
 800262c:	f7fe f99a 	bl	8000964 <__aeabi_fmul>
 8002630:	1c03      	adds	r3, r0, #0
 8002632:	1d3c      	adds	r4, r7, #4
 8002634:	1c18      	adds	r0, r3, #0
 8002636:	f7fe fad3 	bl	8000be0 <__aeabi_f2iz>
 800263a:	0003      	movs	r3, r0
 800263c:	8023      	strh	r3, [r4, #0]

      // --------- Read soil moisture
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Enable sensor
 800263e:	23a0      	movs	r3, #160	@ 0xa0
 8002640:	05db      	lsls	r3, r3, #23
 8002642:	2201      	movs	r2, #1
 8002644:	2101      	movs	r1, #1
 8002646:	0018      	movs	r0, r3
 8002648:	f001 fd5f 	bl	800410a <HAL_GPIO_WritePin>
      HAL_Delay(100); // Wait 100 ms for stabilization
 800264c:	2064      	movs	r0, #100	@ 0x64
 800264e:	f000 fcc3 	bl	8002fd8 <HAL_Delay>

      // Read ADC raw value
      HAL_ADC_PollForConversion(&hadc1, 1000);
 8002652:	23fa      	movs	r3, #250	@ 0xfa
 8002654:	009a      	lsls	r2, r3, #2
 8002656:	4b75      	ldr	r3, [pc, #468]	@ (800282c <main+0x368>)
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f001 f822 	bl	80036a4 <HAL_ADC_PollForConversion>
      readValue = HAL_ADC_GetValue(&hadc1); // Get raw ADC value
 8002660:	4b72      	ldr	r3, [pc, #456]	@ (800282c <main+0x368>)
 8002662:	0018      	movs	r0, r3
 8002664:	f001 f8b2 	bl	80037cc <HAL_ADC_GetValue>
 8002668:	0003      	movs	r3, r0
 800266a:	b29a      	uxth	r2, r3
 800266c:	4b7c      	ldr	r3, [pc, #496]	@ (8002860 <main+0x39c>)
 800266e:	801a      	strh	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Disable sensor
 8002670:	23a0      	movs	r3, #160	@ 0xa0
 8002672:	05db      	lsls	r3, r3, #23
 8002674:	2200      	movs	r2, #0
 8002676:	2101      	movs	r1, #1
 8002678:	0018      	movs	r0, r3
 800267a:	f001 fd46 	bl	800410a <HAL_GPIO_WritePin>

      // Clamp ADC value within valid range
      if (readValue < minADC) {
 800267e:	4b78      	ldr	r3, [pc, #480]	@ (8002860 <main+0x39c>)
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	4b78      	ldr	r3, [pc, #480]	@ (8002864 <main+0x3a0>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d204      	bcs.n	8002694 <main+0x1d0>
          readValue = minADC;
 800268a:	4b76      	ldr	r3, [pc, #472]	@ (8002864 <main+0x3a0>)
 800268c:	881a      	ldrh	r2, [r3, #0]
 800268e:	4b74      	ldr	r3, [pc, #464]	@ (8002860 <main+0x39c>)
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	e009      	b.n	80026a8 <main+0x1e4>
      } else if (readValue > maxADC) {
 8002694:	4b72      	ldr	r3, [pc, #456]	@ (8002860 <main+0x39c>)
 8002696:	881a      	ldrh	r2, [r3, #0]
 8002698:	4b73      	ldr	r3, [pc, #460]	@ (8002868 <main+0x3a4>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d903      	bls.n	80026a8 <main+0x1e4>
          readValue = maxADC;
 80026a0:	4b71      	ldr	r3, [pc, #452]	@ (8002868 <main+0x3a4>)
 80026a2:	881a      	ldrh	r2, [r3, #0]
 80026a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002860 <main+0x39c>)
 80026a6:	801a      	strh	r2, [r3, #0]
      }

      // Calculate soil moisture percentage
      soil_moisture = (1.0 - ((float)(readValue - minADC) / (float)(maxADC - minADC))) * 100.0;
 80026a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002860 <main+0x39c>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	001a      	movs	r2, r3
 80026ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002864 <main+0x3a0>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7fe fab3 	bl	8000c20 <__aeabi_i2f>
 80026ba:	1c04      	adds	r4, r0, #0
 80026bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002868 <main+0x3a4>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	001a      	movs	r2, r3
 80026c2:	4b68      	ldr	r3, [pc, #416]	@ (8002864 <main+0x3a0>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7fe faa9 	bl	8000c20 <__aeabi_i2f>
 80026ce:	1c03      	adds	r3, r0, #0
 80026d0:	1c19      	adds	r1, r3, #0
 80026d2:	1c20      	adds	r0, r4, #0
 80026d4:	f7fe f826 	bl	8000724 <__aeabi_fdiv>
 80026d8:	1c03      	adds	r3, r0, #0
 80026da:	1c18      	adds	r0, r3, #0
 80026dc:	f7ff fcf6 	bl	80020cc <__aeabi_f2d>
 80026e0:	0002      	movs	r2, r0
 80026e2:	000b      	movs	r3, r1
 80026e4:	2000      	movs	r0, #0
 80026e6:	4961      	ldr	r1, [pc, #388]	@ (800286c <main+0x3a8>)
 80026e8:	f7ff f954 	bl	8001994 <__aeabi_dsub>
 80026ec:	0002      	movs	r2, r0
 80026ee:	000b      	movs	r3, r1
 80026f0:	0010      	movs	r0, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	2200      	movs	r2, #0
 80026f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002870 <main+0x3ac>)
 80026f8:	f7fe fe84 	bl	8001404 <__aeabi_dmul>
 80026fc:	0002      	movs	r2, r0
 80026fe:	000b      	movs	r3, r1
 8002700:	0010      	movs	r0, r2
 8002702:	0019      	movs	r1, r3
 8002704:	f7ff fd2a 	bl	800215c <__aeabi_d2f>
 8002708:	1c02      	adds	r2, r0, #0
 800270a:	4b5a      	ldr	r3, [pc, #360]	@ (8002874 <main+0x3b0>)
 800270c:	601a      	str	r2, [r3, #0]

      // Apply moving average for smoothing
      static float previousMoisture = 0;
      soil_moisture = 0.9 * previousMoisture + 0.1 * soil_moisture;
 800270e:	4b5a      	ldr	r3, [pc, #360]	@ (8002878 <main+0x3b4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	1c18      	adds	r0, r3, #0
 8002714:	f7ff fcda 	bl	80020cc <__aeabi_f2d>
 8002718:	4a58      	ldr	r2, [pc, #352]	@ (800287c <main+0x3b8>)
 800271a:	4b59      	ldr	r3, [pc, #356]	@ (8002880 <main+0x3bc>)
 800271c:	f7fe fe72 	bl	8001404 <__aeabi_dmul>
 8002720:	0002      	movs	r2, r0
 8002722:	000b      	movs	r3, r1
 8002724:	0014      	movs	r4, r2
 8002726:	001d      	movs	r5, r3
 8002728:	4b52      	ldr	r3, [pc, #328]	@ (8002874 <main+0x3b0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	1c18      	adds	r0, r3, #0
 800272e:	f7ff fccd 	bl	80020cc <__aeabi_f2d>
 8002732:	4a54      	ldr	r2, [pc, #336]	@ (8002884 <main+0x3c0>)
 8002734:	4b54      	ldr	r3, [pc, #336]	@ (8002888 <main+0x3c4>)
 8002736:	f7fe fe65 	bl	8001404 <__aeabi_dmul>
 800273a:	0002      	movs	r2, r0
 800273c:	000b      	movs	r3, r1
 800273e:	0020      	movs	r0, r4
 8002740:	0029      	movs	r1, r5
 8002742:	f7fe fafb 	bl	8000d3c <__aeabi_dadd>
 8002746:	0002      	movs	r2, r0
 8002748:	000b      	movs	r3, r1
 800274a:	0010      	movs	r0, r2
 800274c:	0019      	movs	r1, r3
 800274e:	f7ff fd05 	bl	800215c <__aeabi_d2f>
 8002752:	1c02      	adds	r2, r0, #0
 8002754:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <main+0x3b0>)
 8002756:	601a      	str	r2, [r3, #0]
      previousMoisture = soil_moisture;
 8002758:	4b46      	ldr	r3, [pc, #280]	@ (8002874 <main+0x3b0>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b46      	ldr	r3, [pc, #280]	@ (8002878 <main+0x3b4>)
 800275e:	601a      	str	r2, [r3, #0]

      // Scale soil moisture for easier formatting
      int16_t soilMoistureScaled = (int16_t)(soil_moisture * 10);
 8002760:	4b44      	ldr	r3, [pc, #272]	@ (8002874 <main+0x3b0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4938      	ldr	r1, [pc, #224]	@ (8002848 <main+0x384>)
 8002766:	1c18      	adds	r0, r3, #0
 8002768:	f7fe f8fc 	bl	8000964 <__aeabi_fmul>
 800276c:	1c03      	adds	r3, r0, #0
 800276e:	1cbc      	adds	r4, r7, #2
 8002770:	1c18      	adds	r0, r3, #0
 8002772:	f7fe fa35 	bl	8000be0 <__aeabi_f2iz>
 8002776:	0003      	movs	r3, r0
 8002778:	8023      	strh	r3, [r4, #0]

      // Format data into a string
      sprintf((char *)txBuffer,
 800277a:	1dbb      	adds	r3, r7, #6
 800277c:	2200      	movs	r2, #0
 800277e:	5e9b      	ldrsh	r3, [r3, r2]
 8002780:	210a      	movs	r1, #10
 8002782:	0018      	movs	r0, r3
 8002784:	f7fd fd58 	bl	8000238 <__divsi3>
 8002788:	0003      	movs	r3, r0
 800278a:	b21b      	sxth	r3, r3
 800278c:	4698      	mov	r8, r3
 800278e:	1dbb      	adds	r3, r7, #6
 8002790:	2200      	movs	r2, #0
 8002792:	5e9b      	ldrsh	r3, [r3, r2]
 8002794:	210a      	movs	r1, #10
 8002796:	0018      	movs	r0, r3
 8002798:	f7fd fe34 	bl	8000404 <__aeabi_idivmod>
 800279c:	000b      	movs	r3, r1
 800279e:	b21b      	sxth	r3, r3
 80027a0:	4699      	mov	r9, r3
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	2200      	movs	r2, #0
 80027a6:	5e9b      	ldrsh	r3, [r3, r2]
 80027a8:	210a      	movs	r1, #10
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7fd fd44 	bl	8000238 <__divsi3>
 80027b0:	0003      	movs	r3, r0
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	001c      	movs	r4, r3
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	2200      	movs	r2, #0
 80027ba:	5e9b      	ldrsh	r3, [r3, r2]
 80027bc:	210a      	movs	r1, #10
 80027be:	0018      	movs	r0, r3
 80027c0:	f7fd fe20 	bl	8000404 <__aeabi_idivmod>
 80027c4:	000b      	movs	r3, r1
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	001d      	movs	r5, r3
 80027ca:	1cbb      	adds	r3, r7, #2
 80027cc:	2200      	movs	r2, #0
 80027ce:	5e9b      	ldrsh	r3, [r3, r2]
 80027d0:	210a      	movs	r1, #10
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fd fd30 	bl	8000238 <__divsi3>
 80027d8:	0003      	movs	r3, r0
 80027da:	b21b      	sxth	r3, r3
 80027dc:	001e      	movs	r6, r3
 80027de:	1cbb      	adds	r3, r7, #2
 80027e0:	2200      	movs	r2, #0
 80027e2:	5e9b      	ldrsh	r3, [r3, r2]
 80027e4:	210a      	movs	r1, #10
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7fd fe0c 	bl	8000404 <__aeabi_idivmod>
 80027ec:	000b      	movs	r3, r1
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	4926      	ldr	r1, [pc, #152]	@ (800288c <main+0x3c8>)
 80027f2:	4827      	ldr	r0, [pc, #156]	@ (8002890 <main+0x3cc>)
 80027f4:	9303      	str	r3, [sp, #12]
 80027f6:	9602      	str	r6, [sp, #8]
 80027f8:	9501      	str	r5, [sp, #4]
 80027fa:	9400      	str	r4, [sp, #0]
 80027fc:	464b      	mov	r3, r9
 80027fe:	4642      	mov	r2, r8
 8002800:	f003 fa96 	bl	8005d30 <siprintf>
          tCelsiusScaled / 10, tCelsiusScaled % 10,
          RHScaled / 10, RHScaled % 10,
          soilMoistureScaled / 10, soilMoistureScaled % 10);

      // Send the formatted string over UART2
      HAL_UART_Transmit(&huart2, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY);
 8002804:	4b22      	ldr	r3, [pc, #136]	@ (8002890 <main+0x3cc>)
 8002806:	0018      	movs	r0, r3
 8002808:	f7fd fc7a 	bl	8000100 <strlen>
 800280c:	0003      	movs	r3, r0
 800280e:	b29a      	uxth	r2, r3
 8002810:	2301      	movs	r3, #1
 8002812:	425b      	negs	r3, r3
 8002814:	491e      	ldr	r1, [pc, #120]	@ (8002890 <main+0x3cc>)
 8002816:	481f      	ldr	r0, [pc, #124]	@ (8002894 <main+0x3d0>)
 8002818:	f002 fcf4 	bl	8005204 <HAL_UART_Transmit>

      // Delay 10 seconds
      HAL_Delay(10000);
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <main+0x3d4>)
 800281e:	0018      	movs	r0, r3
 8002820:	f000 fbda 	bl	8002fd8 <HAL_Delay>
  {
 8002824:	e668      	b.n	80024f8 <main+0x34>
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	200000e0 	.word	0x200000e0
 800282c:	2000007c 	.word	0x2000007c
 8002830:	200001c0 	.word	0x200001c0
 8002834:	200001c1 	.word	0x200001c1
 8002838:	200001c2 	.word	0x200001c2
 800283c:	200001c3 	.word	0x200001c3
 8002840:	200001c4 	.word	0x200001c4
 8002844:	200001c5 	.word	0x200001c5
 8002848:	41200000 	.word	0x41200000
 800284c:	200001cc 	.word	0x200001cc
 8002850:	41100000 	.word	0x41100000
 8002854:	40a00000 	.word	0x40a00000
 8002858:	200001d0 	.word	0x200001d0
 800285c:	200001d4 	.word	0x200001d4
 8002860:	2000023c 	.word	0x2000023c
 8002864:	20000000 	.word	0x20000000
 8002868:	20000002 	.word	0x20000002
 800286c:	3ff00000 	.word	0x3ff00000
 8002870:	40590000 	.word	0x40590000
 8002874:	20000240 	.word	0x20000240
 8002878:	20000244 	.word	0x20000244
 800287c:	cccccccd 	.word	0xcccccccd
 8002880:	3feccccc 	.word	0x3feccccc
 8002884:	9999999a 	.word	0x9999999a
 8002888:	3fb99999 	.word	0x3fb99999
 800288c:	08006684 	.word	0x08006684
 8002890:	200001d8 	.word	0x200001d8
 8002894:	2000012c 	.word	0x2000012c
 8002898:	00002710 	.word	0x00002710

0800289c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b093      	sub	sp, #76	@ 0x4c
 80028a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028a2:	2414      	movs	r4, #20
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	0018      	movs	r0, r3
 80028a8:	2334      	movs	r3, #52	@ 0x34
 80028aa:	001a      	movs	r2, r3
 80028ac:	2100      	movs	r1, #0
 80028ae:	f003 fa5f 	bl	8005d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	0018      	movs	r0, r3
 80028b6:	2310      	movs	r3, #16
 80028b8:	001a      	movs	r2, r3
 80028ba:	2100      	movs	r1, #0
 80028bc:	f003 fa58 	bl	8005d70 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f001 fc3d 	bl	8004144 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	2280      	movs	r2, #128	@ 0x80
 80028d4:	0052      	lsls	r2, r2, #1
 80028d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80028d8:	0021      	movs	r1, r4
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	2240      	movs	r2, #64	@ 0x40
 80028e4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	2202      	movs	r2, #2
 80028ea:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2202      	movs	r2, #2
 80028f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2230      	movs	r2, #48	@ 0x30
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 70;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2246      	movs	r2, #70	@ 0x46
 80028fc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2290      	movs	r2, #144	@ 0x90
 8002902:	0352      	lsls	r2, r2, #13
 8002904:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 8002906:	187b      	adds	r3, r7, r1
 8002908:	2280      	movs	r2, #128	@ 0x80
 800290a:	0612      	lsls	r2, r2, #24
 800290c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800290e:	187b      	adds	r3, r7, r1
 8002910:	0018      	movs	r0, r3
 8002912:	f001 fc63 	bl	80041dc <HAL_RCC_OscConfig>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d001      	beq.n	800291e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800291a:	f000 f97b 	bl	8002c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2202      	movs	r2, #2
 8002928:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	2102      	movs	r1, #2
 800293a:	0018      	movs	r0, r3
 800293c:	f001 ff5e 	bl	80047fc <HAL_RCC_ClockConfig>
 8002940:	1e03      	subs	r3, r0, #0
 8002942:	d001      	beq.n	8002948 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002944:	f000 f966 	bl	8002c14 <Error_Handler>
  }
}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b013      	add	sp, #76	@ 0x4c
 800294e:	bd90      	pop	{r4, r7, pc}

08002950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	0018      	movs	r0, r3
 800295a:	230c      	movs	r3, #12
 800295c:	001a      	movs	r2, r3
 800295e:	2100      	movs	r1, #0
 8002960:	f003 fa06 	bl	8005d70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002964:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 8002966:	4a2c      	ldr	r2, [pc, #176]	@ (8002a18 <MX_ADC1_Init+0xc8>)
 8002968:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800296a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 800296c:	2280      	movs	r2, #128	@ 0x80
 800296e:	05d2      	lsls	r2, r2, #23
 8002970:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002972:	4b28      	ldr	r3, [pc, #160]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002978:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800297e:	4b25      	ldr	r3, [pc, #148]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002984:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 8002986:	2204      	movs	r2, #4
 8002988:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800298a:	4b22      	ldr	r3, [pc, #136]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 800298c:	2200      	movs	r2, #0
 800298e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002990:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 8002992:	2200      	movs	r2, #0
 8002994:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002996:	4b1f      	ldr	r3, [pc, #124]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 8002998:	2201      	movs	r2, #1
 800299a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800299c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 800299e:	2201      	movs	r2, #1
 80029a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029ae:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029b0:	222c      	movs	r2, #44	@ 0x2c
 80029b2:	2100      	movs	r1, #0
 80029b4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029b6:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80029bc:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029be:	2200      	movs	r2, #0
 80029c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80029c2:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80029c8:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029ca:	223c      	movs	r2, #60	@ 0x3c
 80029cc:	2100      	movs	r1, #0
 80029ce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80029d0:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 fc6d 	bl	80032b8 <HAL_ADC_Init>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80029e2:	f000 f917 	bl	8002c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a1c <MX_ADC1_Init+0xcc>)
 80029ea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f8:	1d3a      	adds	r2, r7, #4
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <MX_ADC1_Init+0xc4>)
 80029fc:	0011      	movs	r1, r2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 fef0 	bl	80037e4 <HAL_ADC_ConfigChannel>
 8002a04:	1e03      	subs	r3, r0, #0
 8002a06:	d001      	beq.n	8002a0c <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8002a08:	f000 f904 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	2000007c 	.word	0x2000007c
 8002a18:	40012400 	.word	0x40012400
 8002a1c:	24000200 	.word	0x24000200

08002a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a26:	2310      	movs	r3, #16
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	001a      	movs	r2, r3
 8002a30:	2100      	movs	r1, #0
 8002a32:	f003 f99d 	bl	8005d70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	0018      	movs	r0, r3
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	2100      	movs	r1, #0
 8002a40:	f003 f996 	bl	8005d70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a44:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002a46:	4a22      	ldr	r2, [pc, #136]	@ (8002ad0 <MX_TIM1_Init+0xb0>)
 8002a48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 55;
 8002a4a:	4b20      	ldr	r3, [pc, #128]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002a4c:	2237      	movs	r2, #55	@ 0x37
 8002a4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a56:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002a58:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad4 <MX_TIM1_Init+0xb4>)
 8002a5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a62:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a68:	4b18      	ldr	r3, [pc, #96]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a6e:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002a70:	0018      	movs	r0, r3
 8002a72:	f002 f86d 	bl	8004b50 <HAL_TIM_Base_Init>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002a7a:	f000 f8cb 	bl	8002c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7e:	2110      	movs	r1, #16
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	2280      	movs	r2, #128	@ 0x80
 8002a84:	0152      	lsls	r2, r2, #5
 8002a86:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a88:	187a      	adds	r2, r7, r1
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002a8c:	0011      	movs	r1, r2
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f002 f904 	bl	8004c9c <HAL_TIM_ConfigClockSource>
 8002a94:	1e03      	subs	r3, r0, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002a98:	f000 f8bc 	bl	8002c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002aae:	1d3a      	adds	r2, r7, #4
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <MX_TIM1_Init+0xac>)
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f002 fae7 	bl	8005088 <HAL_TIMEx_MasterConfigSynchronization>
 8002aba:	1e03      	subs	r3, r0, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002abe:	f000 f8a9 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b008      	add	sp, #32
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	200000e0 	.word	0x200000e0
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	0000ffff 	.word	0x0000ffff

08002ad8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002adc:	4b23      	ldr	r3, [pc, #140]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002ade:	4a24      	ldr	r2, [pc, #144]	@ (8002b70 <MX_USART2_UART_Init+0x98>)
 8002ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ae2:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002ae4:	2296      	movs	r2, #150	@ 0x96
 8002ae6:	0192      	lsls	r2, r2, #6
 8002ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aea:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002af0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002af6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002afe:	220c      	movs	r2, #12
 8002b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b02:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b08:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b0e:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b14:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f002 fb18 	bl	8005158 <HAL_UART_Init>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b2c:	f000 f872 	bl	8002c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002b32:	2100      	movs	r1, #0
 8002b34:	0018      	movs	r0, r3
 8002b36:	f003 f81b 	bl	8005b70 <HAL_UARTEx_SetTxFifoThreshold>
 8002b3a:	1e03      	subs	r3, r0, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b3e:	f000 f869 	bl	8002c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b42:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002b44:	2100      	movs	r1, #0
 8002b46:	0018      	movs	r0, r3
 8002b48:	f003 f852 	bl	8005bf0 <HAL_UARTEx_SetRxFifoThreshold>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b50:	f000 f860 	bl	8002c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <MX_USART2_UART_Init+0x94>)
 8002b56:	0018      	movs	r0, r3
 8002b58:	f002 ffd0 	bl	8005afc <HAL_UARTEx_DisableFifoMode>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b60:	f000 f858 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	2000012c 	.word	0x2000012c
 8002b70:	40004400 	.word	0x40004400

08002b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b089      	sub	sp, #36	@ 0x24
 8002b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7a:	240c      	movs	r4, #12
 8002b7c:	193b      	adds	r3, r7, r4
 8002b7e:	0018      	movs	r0, r3
 8002b80:	2314      	movs	r3, #20
 8002b82:	001a      	movs	r2, r3
 8002b84:	2100      	movs	r1, #0
 8002b86:	f003 f8f3 	bl	8005d70 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b8a:	4b21      	ldr	r3, [pc, #132]	@ (8002c10 <MX_GPIO_Init+0x9c>)
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b8e:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <MX_GPIO_Init+0x9c>)
 8002b90:	2120      	movs	r1, #32
 8002b92:	430a      	orrs	r2, r1
 8002b94:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b96:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <MX_GPIO_Init+0x9c>)
 8002b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <MX_GPIO_Init+0x9c>)
 8002ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c10 <MX_GPIO_Init+0x9c>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	430a      	orrs	r2, r1
 8002bac:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bae:	4b18      	ldr	r3, [pc, #96]	@ (8002c10 <MX_GPIO_Init+0x9c>)
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <MX_GPIO_Init+0x9c>)
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bbe:	4b14      	ldr	r3, [pc, #80]	@ (8002c10 <MX_GPIO_Init+0x9c>)
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bc6:	4b12      	ldr	r3, [pc, #72]	@ (8002c10 <MX_GPIO_Init+0x9c>)
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002bd2:	23a0      	movs	r3, #160	@ 0xa0
 8002bd4:	05db      	lsls	r3, r3, #23
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2102      	movs	r1, #2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f001 fa95 	bl	800410a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002be0:	0021      	movs	r1, r4
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	2202      	movs	r2, #2
 8002be6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	2201      	movs	r2, #1
 8002bec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	187a      	adds	r2, r7, r1
 8002bfc:	23a0      	movs	r3, #160	@ 0xa0
 8002bfe:	05db      	lsls	r3, r3, #23
 8002c00:	0011      	movs	r1, r2
 8002c02:	0018      	movs	r0, r3
 8002c04:	f001 f900 	bl	8003e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b009      	add	sp, #36	@ 0x24
 8002c0e:	bd90      	pop	{r4, r7, pc}
 8002c10:	40021000 	.word	0x40021000

08002c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c18:	b672      	cpsid	i
}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c1c:	46c0      	nop			@ (mov r8, r8)
 8002c1e:	e7fd      	b.n	8002c1c <Error_Handler+0x8>

08002c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c32:	4b0e      	ldr	r3, [pc, #56]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2201      	movs	r2, #1
 8002c38:	4013      	ands	r3, r2
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c44:	2180      	movs	r1, #128	@ 0x80
 8002c46:	0549      	lsls	r1, r1, #21
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c4c:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <HAL_MspInit+0x4c>)
 8002c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	055b      	lsls	r3, r3, #21
 8002c54:	4013      	ands	r3, r2
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002c5a:	23c0      	movs	r3, #192	@ 0xc0
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 f9de 	bl	8003020 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b08b      	sub	sp, #44	@ 0x2c
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	2414      	movs	r4, #20
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	2314      	movs	r3, #20
 8002c80:	001a      	movs	r2, r3
 8002c82:	2100      	movs	r1, #0
 8002c84:	f003 f874 	bl	8005d70 <memset>
  if(hadc->Instance==ADC1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a17      	ldr	r2, [pc, #92]	@ (8002cec <HAL_ADC_MspInit+0x7c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d128      	bne.n	8002ce4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c92:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <HAL_ADC_MspInit+0x80>)
 8002c94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c96:	4b16      	ldr	r3, [pc, #88]	@ (8002cf0 <HAL_ADC_MspInit+0x80>)
 8002c98:	2180      	movs	r1, #128	@ 0x80
 8002c9a:	0349      	lsls	r1, r1, #13
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ca0:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <HAL_ADC_MspInit+0x80>)
 8002ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ca4:	2380      	movs	r3, #128	@ 0x80
 8002ca6:	035b      	lsls	r3, r3, #13
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <HAL_ADC_MspInit+0x80>)
 8002cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <HAL_ADC_MspInit+0x80>)
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cba:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <HAL_ADC_MspInit+0x80>)
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	2202      	movs	r2, #2
 8002cca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2203      	movs	r2, #3
 8002cd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	4a06      	ldr	r2, [pc, #24]	@ (8002cf4 <HAL_ADC_MspInit+0x84>)
 8002cdc:	0019      	movs	r1, r3
 8002cde:	0010      	movs	r0, r2
 8002ce0:	f001 f892 	bl	8003e08 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ce4:	46c0      	nop			@ (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b00b      	add	sp, #44	@ 0x2c
 8002cea:	bd90      	pop	{r4, r7, pc}
 8002cec:	40012400 	.word	0x40012400
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	50000400 	.word	0x50000400

08002cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <HAL_TIM_Base_MspInit+0x38>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10d      	bne.n	8002d26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <HAL_TIM_Base_MspInit+0x3c>)
 8002d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_TIM_Base_MspInit+0x3c>)
 8002d10:	2180      	movs	r1, #128	@ 0x80
 8002d12:	0109      	lsls	r1, r1, #4
 8002d14:	430a      	orrs	r2, r1
 8002d16:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d18:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <HAL_TIM_Base_MspInit+0x3c>)
 8002d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40021000 	.word	0x40021000

08002d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b08b      	sub	sp, #44	@ 0x2c
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	2414      	movs	r4, #20
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	0018      	movs	r0, r3
 8002d46:	2314      	movs	r3, #20
 8002d48:	001a      	movs	r2, r3
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	f003 f810 	bl	8005d70 <memset>
  if(huart->Instance==USART2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc4 <HAL_UART_MspInit+0x8c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d130      	bne.n	8002dbc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <HAL_UART_MspInit+0x90>)
 8002d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <HAL_UART_MspInit+0x90>)
 8002d60:	2180      	movs	r1, #128	@ 0x80
 8002d62:	0289      	lsls	r1, r1, #10
 8002d64:	430a      	orrs	r2, r1
 8002d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d68:	4b17      	ldr	r3, [pc, #92]	@ (8002dc8 <HAL_UART_MspInit+0x90>)
 8002d6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <HAL_UART_MspInit+0x90>)
 8002d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d7a:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <HAL_UART_MspInit+0x90>)
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d82:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <HAL_UART_MspInit+0x90>)
 8002d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d86:	2201      	movs	r2, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d8e:	0021      	movs	r1, r4
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	220c      	movs	r2, #12
 8002d94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2202      	movs	r2, #2
 8002d9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	2201      	movs	r2, #1
 8002dac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	187a      	adds	r2, r7, r1
 8002db0:	23a0      	movs	r3, #160	@ 0xa0
 8002db2:	05db      	lsls	r3, r3, #23
 8002db4:	0011      	movs	r1, r2
 8002db6:	0018      	movs	r0, r3
 8002db8:	f001 f826 	bl	8003e08 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002dbc:	46c0      	nop			@ (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b00b      	add	sp, #44	@ 0x2c
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	40004400 	.word	0x40004400
 8002dc8:	40021000 	.word	0x40021000

08002dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	e7fd      	b.n	8002dd0 <NMI_Handler+0x4>

08002dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd8:	46c0      	nop			@ (mov r8, r8)
 8002dda:	e7fd      	b.n	8002dd8 <HardFault_Handler+0x4>

08002ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002de0:	46c0      	nop			@ (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df4:	f000 f8d4 	bl	8002fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df8:	46c0      	nop			@ (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e08:	4a14      	ldr	r2, [pc, #80]	@ (8002e5c <_sbrk+0x5c>)
 8002e0a:	4b15      	ldr	r3, [pc, #84]	@ (8002e60 <_sbrk+0x60>)
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e14:	4b13      	ldr	r3, [pc, #76]	@ (8002e64 <_sbrk+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <_sbrk+0x64>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	@ (8002e68 <_sbrk+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	18d3      	adds	r3, r2, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e30:	f002 ffa6 	bl	8005d80 <__errno>
 8002e34:	0003      	movs	r3, r0
 8002e36:	220c      	movs	r2, #12
 8002e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	425b      	negs	r3, r3
 8002e3e:	e009      	b.n	8002e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e40:	4b08      	ldr	r3, [pc, #32]	@ (8002e64 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e46:	4b07      	ldr	r3, [pc, #28]	@ (8002e64 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	18d2      	adds	r2, r2, r3
 8002e4e:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <_sbrk+0x64>)
 8002e50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b006      	add	sp, #24
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20009000 	.word	0x20009000
 8002e60:	00000400 	.word	0x00000400
 8002e64:	20000248 	.word	0x20000248
 8002e68:	20000398 	.word	0x20000398

08002e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e78:	480d      	ldr	r0, [pc, #52]	@ (8002eb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e7c:	f7ff fff6 	bl	8002e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e80:	480c      	ldr	r0, [pc, #48]	@ (8002eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e82:	490d      	ldr	r1, [pc, #52]	@ (8002eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e84:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <LoopForever+0xe>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e88:	e002      	b.n	8002e90 <LoopCopyDataInit>

08002e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8e:	3304      	adds	r3, #4

08002e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e94:	d3f9      	bcc.n	8002e8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e96:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e98:	4c0a      	ldr	r4, [pc, #40]	@ (8002ec4 <LoopForever+0x16>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e9c:	e001      	b.n	8002ea2 <LoopFillZerobss>

08002e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea0:	3204      	adds	r2, #4

08002ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea4:	d3fb      	bcc.n	8002e9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ea6:	f002 ff71 	bl	8005d8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002eaa:	f7ff fb0b 	bl	80024c4 <main>

08002eae <LoopForever>:

LoopForever:
  b LoopForever
 8002eae:	e7fe      	b.n	8002eae <LoopForever>
  ldr   r0, =_estack
 8002eb0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002ebc:	08006800 	.word	0x08006800
  ldr r2, =_sbss
 8002ec0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002ec4:	20000398 	.word	0x20000398

08002ec8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC1_IRQHandler>
	...

08002ecc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ed2:	1dfb      	adds	r3, r7, #7
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_Init+0x3c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_Init+0x3c>)
 8002ede:	2180      	movs	r1, #128	@ 0x80
 8002ee0:	0049      	lsls	r1, r1, #1
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f000 f810 	bl	8002f0c <HAL_InitTick>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ef0:	1dfb      	adds	r3, r7, #7
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e001      	b.n	8002efc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ef8:	f7ff fe92 	bl	8002c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002efc:	1dfb      	adds	r3, r7, #7
 8002efe:	781b      	ldrb	r3, [r3, #0]
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40022000 	.word	0x40022000

08002f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f14:	230f      	movs	r3, #15
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_InitTick+0x88>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02b      	beq.n	8002f7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002f24:	4b1c      	ldr	r3, [pc, #112]	@ (8002f98 <HAL_InitTick+0x8c>)
 8002f26:	681c      	ldr	r4, [r3, #0]
 8002f28:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <HAL_InitTick+0x88>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	23fa      	movs	r3, #250	@ 0xfa
 8002f30:	0098      	lsls	r0, r3, #2
 8002f32:	f7fd f8f7 	bl	8000124 <__udivsi3>
 8002f36:	0003      	movs	r3, r0
 8002f38:	0019      	movs	r1, r3
 8002f3a:	0020      	movs	r0, r4
 8002f3c:	f7fd f8f2 	bl	8000124 <__udivsi3>
 8002f40:	0003      	movs	r3, r0
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 ff53 	bl	8003dee <HAL_SYSTICK_Config>
 8002f48:	1e03      	subs	r3, r0, #0
 8002f4a:	d112      	bne.n	8002f72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d80a      	bhi.n	8002f68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	2301      	movs	r3, #1
 8002f56:	425b      	negs	r3, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 ff32 	bl	8003dc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f60:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <HAL_InitTick+0x90>)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e00d      	b.n	8002f84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f68:	230f      	movs	r3, #15
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e008      	b.n	8002f84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f72:	230f      	movs	r3, #15
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e003      	b.n	8002f84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f84:	230f      	movs	r3, #15
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	781b      	ldrb	r3, [r3, #0]
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b005      	add	sp, #20
 8002f90:	bd90      	pop	{r4, r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	2000000c 	.word	0x2000000c
 8002f98:	20000004 	.word	0x20000004
 8002f9c:	20000008 	.word	0x20000008

08002fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa4:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <HAL_IncTick+0x1c>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_IncTick+0x20>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	18d2      	adds	r2, r2, r3
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <HAL_IncTick+0x20>)
 8002fb2:	601a      	str	r2, [r3, #0]
}
 8002fb4:	46c0      	nop			@ (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	2000000c 	.word	0x2000000c
 8002fc0:	2000024c 	.word	0x2000024c

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b02      	ldr	r3, [pc, #8]	@ (8002fd4 <HAL_GetTick+0x10>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	2000024c 	.word	0x2000024c

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff fff0 	bl	8002fc4 <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	189b      	adds	r3, r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	f7ff ffe0 	bl	8002fc4 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	46c0      	nop			@ (mov r8, r8)
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	2000000c 	.word	0x2000000c

08003020 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a06      	ldr	r2, [pc, #24]	@ (8003048 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b002      	add	sp, #8
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	40010000 	.word	0x40010000
 8003048:	fffff9ff 	.word	0xfffff9ff

0800304c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800305c:	401a      	ands	r2, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	fe3fffff 	.word	0xfe3fffff

08003074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	23e0      	movs	r3, #224	@ 0xe0
 8003082:	045b      	lsls	r3, r3, #17
 8003084:	4013      	ands	r3, r2
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}

0800308e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	2104      	movs	r1, #4
 80030a2:	400a      	ands	r2, r1
 80030a4:	2107      	movs	r1, #7
 80030a6:	4091      	lsls	r1, r2
 80030a8:	000a      	movs	r2, r1
 80030aa:	43d2      	mvns	r2, r2
 80030ac:	401a      	ands	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2104      	movs	r1, #4
 80030b2:	400b      	ands	r3, r1
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4099      	lsls	r1, r3
 80030b8:	000b      	movs	r3, r1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	2104      	movs	r1, #4
 80030da:	400a      	ands	r2, r1
 80030dc:	2107      	movs	r1, #7
 80030de:	4091      	lsls	r1, r2
 80030e0:	000a      	movs	r2, r1
 80030e2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2104      	movs	r1, #4
 80030e8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030ea:	40da      	lsrs	r2, r3
 80030ec:	0013      	movs	r3, r2
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b002      	add	sp, #8
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	23c0      	movs	r3, #192	@ 0xc0
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	4013      	ands	r3, r2
 8003108:	d101      	bne.n	800310e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800310e:	2300      	movs	r3, #0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}

08003118 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	211f      	movs	r1, #31
 800312c:	400a      	ands	r2, r1
 800312e:	210f      	movs	r1, #15
 8003130:	4091      	lsls	r1, r2
 8003132:	000a      	movs	r2, r1
 8003134:	43d2      	mvns	r2, r2
 8003136:	401a      	ands	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	0e9b      	lsrs	r3, r3, #26
 800313c:	210f      	movs	r1, #15
 800313e:	4019      	ands	r1, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	201f      	movs	r0, #31
 8003144:	4003      	ands	r3, r0
 8003146:	4099      	lsls	r1, r3
 8003148:	000b      	movs	r3, r1
 800314a:	431a      	orrs	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003150:	46c0      	nop			@ (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b004      	add	sp, #16
 8003156:	bd80      	pop	{r7, pc}

08003158 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	035b      	lsls	r3, r3, #13
 800316a:	0b5b      	lsrs	r3, r3, #13
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b002      	add	sp, #8
 8003178:	bd80      	pop	{r7, pc}

0800317a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	0352      	lsls	r2, r2, #13
 800318c:	0b52      	lsrs	r2, r2, #13
 800318e:	43d2      	mvns	r2, r2
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	0212      	lsls	r2, r2, #8
 80031b4:	43d2      	mvns	r2, r2
 80031b6:	401a      	ands	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	400b      	ands	r3, r1
 80031c0:	4904      	ldr	r1, [pc, #16]	@ (80031d4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80031c2:	400b      	ands	r3, r1
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	07ffff00 	.word	0x07ffff00

080031d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <LL_ADC_EnableInternalRegulator+0x24>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	2280      	movs	r2, #128	@ 0x80
 80031ea:	0552      	lsls	r2, r2, #21
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	6fffffe8 	.word	0x6fffffe8

08003200 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	055b      	lsls	r3, r3, #21
 8003210:	401a      	ands	r2, r3
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	055b      	lsls	r3, r3, #21
 8003216:	429a      	cmp	r2, r3
 8003218:	d101      	bne.n	800321e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800321e:	2300      	movs	r3, #0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <LL_ADC_Enable+0x20>)
 8003236:	4013      	ands	r3, r2
 8003238:	2201      	movs	r2, #1
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003240:	46c0      	nop			@ (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	7fffffe8 	.word	0x7fffffe8

0800324c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2201      	movs	r2, #1
 800325a:	4013      	ands	r3, r2
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <LL_ADC_IsEnabled+0x18>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <LL_ADC_IsEnabled+0x1a>
 8003264:	2300      	movs	r3, #0
}
 8003266:	0018      	movs	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	b002      	add	sp, #8
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <LL_ADC_REG_StartConversion+0x20>)
 800327e:	4013      	ands	r3, r2
 8003280:	2204      	movs	r2, #4
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003288:	46c0      	nop			@ (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}
 8003290:	7fffffe8 	.word	0x7fffffe8

08003294 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2204      	movs	r2, #4
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d101      	bne.n	80032ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b002      	add	sp, #8
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c0:	231f      	movs	r3, #31
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e17f      	b.n	80035de <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fcc1 	bl	8002c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2254      	movs	r2, #84	@ 0x54
 80032f8:	2100      	movs	r1, #0
 80032fa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0018      	movs	r0, r3
 8003302:	f7ff ff7d 	bl	8003200 <LL_ADC_IsInternalRegulatorEnabled>
 8003306:	1e03      	subs	r3, r0, #0
 8003308:	d115      	bne.n	8003336 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0018      	movs	r0, r3
 8003310:	f7ff ff62 	bl	80031d8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003314:	4bb4      	ldr	r3, [pc, #720]	@ (80035e8 <HAL_ADC_Init+0x330>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	49b4      	ldr	r1, [pc, #720]	@ (80035ec <HAL_ADC_Init+0x334>)
 800331a:	0018      	movs	r0, r3
 800331c:	f7fc ff02 	bl	8000124 <__udivsi3>
 8003320:	0003      	movs	r3, r0
 8003322:	3301      	adds	r3, #1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003328:	e002      	b.n	8003330 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3b01      	subs	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f9      	bne.n	800332a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	0018      	movs	r0, r3
 800333c:	f7ff ff60 	bl	8003200 <LL_ADC_IsInternalRegulatorEnabled>
 8003340:	1e03      	subs	r3, r0, #0
 8003342:	d10f      	bne.n	8003364 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	2210      	movs	r2, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003354:	2201      	movs	r2, #1
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800335c:	231f      	movs	r3, #31
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0018      	movs	r0, r3
 800336a:	f7ff ff93 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 800336e:	0003      	movs	r3, r0
 8003370:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	2210      	movs	r2, #16
 8003378:	4013      	ands	r3, r2
 800337a:	d000      	beq.n	800337e <HAL_ADC_Init+0xc6>
 800337c:	e122      	b.n	80035c4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d000      	beq.n	8003386 <HAL_ADC_Init+0xce>
 8003384:	e11e      	b.n	80035c4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	4a99      	ldr	r2, [pc, #612]	@ (80035f0 <HAL_ADC_Init+0x338>)
 800338c:	4013      	ands	r3, r2
 800338e:	2202      	movs	r2, #2
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	0018      	movs	r0, r3
 800339c:	f7ff ff56 	bl	800324c <LL_ADC_IsEnabled>
 80033a0:	1e03      	subs	r3, r0, #0
 80033a2:	d000      	beq.n	80033a6 <HAL_ADC_Init+0xee>
 80033a4:	e0ad      	b.n	8003502 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	7e1b      	ldrb	r3, [r3, #24]
 80033ae:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80033b0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7e5b      	ldrb	r3, [r3, #25]
 80033b6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7e9b      	ldrb	r3, [r3, #26]
 80033be:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_ADC_Init+0x118>
 80033ca:	2380      	movs	r3, #128	@ 0x80
 80033cc:	015b      	lsls	r3, r3, #5
 80033ce:	e000      	b.n	80033d2 <HAL_ADC_Init+0x11a>
 80033d0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033d2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80033d8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	da04      	bge.n	80033ec <HAL_ADC_Init+0x134>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	e001      	b.n	80033f0 <HAL_ADC_Init+0x138>
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80033f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	212c      	movs	r1, #44	@ 0x2c
 80033f6:	5c5b      	ldrb	r3, [r3, r1]
 80033f8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033fa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	5c9b      	ldrb	r3, [r3, r2]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d115      	bne.n	8003438 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7e9b      	ldrb	r3, [r3, #26]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d105      	bne.n	8003420 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2280      	movs	r2, #128	@ 0x80
 8003418:	0252      	lsls	r2, r2, #9
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e00b      	b.n	8003438 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	2220      	movs	r2, #32
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	2201      	movs	r2, #1
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003444:	23e0      	movs	r3, #224	@ 0xe0
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800344e:	4313      	orrs	r3, r2
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a65      	ldr	r2, [pc, #404]	@ (80035f4 <HAL_ADC_Init+0x33c>)
 800345e:	4013      	ands	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	0f9b      	lsrs	r3, r3, #30
 8003472:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003478:	4313      	orrs	r3, r2
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	223c      	movs	r2, #60	@ 0x3c
 8003484:	5c9b      	ldrb	r3, [r3, r2]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d111      	bne.n	80034ae <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	0f9b      	lsrs	r3, r3, #30
 8003490:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003496:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800349c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80034a2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	2201      	movs	r2, #1
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	4a50      	ldr	r2, [pc, #320]	@ (80035f8 <HAL_ADC_Init+0x340>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	23c0      	movs	r3, #192	@ 0xc0
 80034ca:	061b      	lsls	r3, r3, #24
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d018      	beq.n	8003502 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	05db      	lsls	r3, r3, #23
 80034d8:	429a      	cmp	r2, r3
 80034da:	d012      	beq.n	8003502 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	061b      	lsls	r3, r3, #24
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d00c      	beq.n	8003502 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80034e8:	4b44      	ldr	r3, [pc, #272]	@ (80035fc <HAL_ADC_Init+0x344>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a44      	ldr	r2, [pc, #272]	@ (8003600 <HAL_ADC_Init+0x348>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	23f0      	movs	r3, #240	@ 0xf0
 80034f8:	039b      	lsls	r3, r3, #14
 80034fa:	401a      	ands	r2, r3
 80034fc:	4b3f      	ldr	r3, [pc, #252]	@ (80035fc <HAL_ADC_Init+0x344>)
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350a:	001a      	movs	r2, r3
 800350c:	2100      	movs	r1, #0
 800350e:	f7ff fdbe 	bl	800308e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	493a      	ldr	r1, [pc, #232]	@ (8003604 <HAL_ADC_Init+0x34c>)
 800351c:	001a      	movs	r2, r3
 800351e:	f7ff fdb6 	bl	800308e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2110      	movs	r1, #16
 8003536:	4249      	negs	r1, r1
 8003538:	430a      	orrs	r2, r1
 800353a:	629a      	str	r2, [r3, #40]	@ 0x28
 800353c:	e018      	b.n	8003570 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	2380      	movs	r3, #128	@ 0x80
 8003544:	039b      	lsls	r3, r3, #14
 8003546:	429a      	cmp	r2, r3
 8003548:	d112      	bne.n	8003570 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	3b01      	subs	r3, #1
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	221c      	movs	r2, #28
 800355a:	4013      	ands	r3, r2
 800355c:	2210      	movs	r2, #16
 800355e:	4252      	negs	r2, r2
 8003560:	409a      	lsls	r2, r3
 8003562:	0011      	movs	r1, r2
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2100      	movs	r1, #0
 8003576:	0018      	movs	r0, r3
 8003578:	f7ff fda6 	bl	80030c8 <LL_ADC_GetSamplingTimeCommonChannels>
 800357c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003582:	429a      	cmp	r2, r3
 8003584:	d10b      	bne.n	800359e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003590:	2203      	movs	r2, #3
 8003592:	4393      	bics	r3, r2
 8003594:	2201      	movs	r2, #1
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800359c:	e01c      	b.n	80035d8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a2:	2212      	movs	r2, #18
 80035a4:	4393      	bics	r3, r2
 80035a6:	2210      	movs	r2, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b2:	2201      	movs	r2, #1
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80035ba:	231f      	movs	r3, #31
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035c2:	e009      	b.n	80035d8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	2210      	movs	r2, #16
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80035d0:	231f      	movs	r3, #31
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80035d8:	231f      	movs	r3, #31
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b008      	add	sp, #32
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	20000004 	.word	0x20000004
 80035ec:	00030d40 	.word	0x00030d40
 80035f0:	fffffefd 	.word	0xfffffefd
 80035f4:	ffde0201 	.word	0xffde0201
 80035f8:	1ffffc02 	.word	0x1ffffc02
 80035fc:	40012708 	.word	0x40012708
 8003600:	ffc3ffff 	.word	0xffc3ffff
 8003604:	07ffff04 	.word	0x07ffff04

08003608 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0018      	movs	r0, r3
 8003616:	f7ff fe3d 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 800361a:	1e03      	subs	r3, r0, #0
 800361c:	d135      	bne.n	800368a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2254      	movs	r2, #84	@ 0x54
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_ADC_Start+0x24>
 8003628:	2302      	movs	r3, #2
 800362a:	e035      	b.n	8003698 <HAL_ADC_Start+0x90>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2254      	movs	r2, #84	@ 0x54
 8003630:	2101      	movs	r1, #1
 8003632:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003634:	250f      	movs	r5, #15
 8003636:	197c      	adds	r4, r7, r5
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 faaa 	bl	8003b94 <ADC_Enable>
 8003640:	0003      	movs	r3, r0
 8003642:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003644:	197b      	adds	r3, r7, r5
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d119      	bne.n	8003680 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003650:	4a13      	ldr	r2, [pc, #76]	@ (80036a0 <HAL_ADC_Start+0x98>)
 8003652:	4013      	ands	r3, r2
 8003654:	2280      	movs	r2, #128	@ 0x80
 8003656:	0052      	lsls	r2, r2, #1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	221c      	movs	r2, #28
 800366a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2254      	movs	r2, #84	@ 0x54
 8003670:	2100      	movs	r1, #0
 8003672:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff fdf9 	bl	8003270 <LL_ADC_REG_StartConversion>
 800367e:	e008      	b.n	8003692 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2254      	movs	r2, #84	@ 0x54
 8003684:	2100      	movs	r1, #0
 8003686:	5499      	strb	r1, [r3, r2]
 8003688:	e003      	b.n	8003692 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800368a:	230f      	movs	r3, #15
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003692:	230f      	movs	r3, #15
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	781b      	ldrb	r3, [r3, #0]
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	b004      	add	sp, #16
 800369e:	bdb0      	pop	{r4, r5, r7, pc}
 80036a0:	fffff0fe 	.word	0xfffff0fe

080036a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d102      	bne.n	80036bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80036b6:	2308      	movs	r3, #8
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e00f      	b.n	80036dc <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	d007      	beq.n	80036d8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036cc:	2220      	movs	r2, #32
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e072      	b.n	80037be <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80036d8:	2304      	movs	r3, #4
 80036da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80036dc:	f7ff fc72 	bl	8002fc4 <HAL_GetTick>
 80036e0:	0003      	movs	r3, r0
 80036e2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80036e4:	e01f      	b.n	8003726 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	d01c      	beq.n	8003726 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80036ec:	f7ff fc6a 	bl	8002fc4 <HAL_GetTick>
 80036f0:	0002      	movs	r2, r0
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <HAL_ADC_PollForConversion+0x5e>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d111      	bne.n	8003726 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	d10b      	bne.n	8003726 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	2204      	movs	r2, #4
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2254      	movs	r2, #84	@ 0x54
 800371e:	2100      	movs	r1, #0
 8003720:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e04b      	b.n	80037be <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	d0d9      	beq.n	80036e6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff fcd6 	bl	80030f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d02e      	beq.n	80037ac <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7e9b      	ldrb	r3, [r3, #26]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d12a      	bne.n	80037ac <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2208      	movs	r2, #8
 800375e:	4013      	ands	r3, r2
 8003760:	2b08      	cmp	r3, #8
 8003762:	d123      	bne.n	80037ac <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff fd93 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d110      	bne.n	8003794 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	210c      	movs	r1, #12
 800377e:	438a      	bics	r2, r1
 8003780:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003786:	4a10      	ldr	r2, [pc, #64]	@ (80037c8 <HAL_ADC_PollForConversion+0x124>)
 8003788:	4013      	ands	r3, r2
 800378a:	2201      	movs	r2, #1
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	659a      	str	r2, [r3, #88]	@ 0x58
 8003792:	e00b      	b.n	80037ac <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003798:	2220      	movs	r2, #32
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a4:	2201      	movs	r2, #1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7e1b      	ldrb	r3, [r3, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	220c      	movs	r2, #12
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	fffffefe 	.word	0xfffffefe

080037cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ee:	2317      	movs	r3, #23
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2254      	movs	r2, #84	@ 0x54
 80037fe:	5c9b      	ldrb	r3, [r3, r2]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x24>
 8003804:	2302      	movs	r3, #2
 8003806:	e1c0      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x3a6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2254      	movs	r2, #84	@ 0x54
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff fd3d 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 800381a:	1e03      	subs	r3, r0, #0
 800381c:	d000      	beq.n	8003820 <HAL_ADC_ConfigChannel+0x3c>
 800381e:	e1a3      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d100      	bne.n	800382a <HAL_ADC_ConfigChannel+0x46>
 8003828:	e143      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	2380      	movs	r3, #128	@ 0x80
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	429a      	cmp	r2, r3
 8003834:	d004      	beq.n	8003840 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800383a:	4ac1      	ldr	r2, [pc, #772]	@ (8003b40 <HAL_ADC_ConfigChannel+0x35c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d108      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0019      	movs	r1, r3
 800384a:	0010      	movs	r0, r2
 800384c:	f7ff fc84 	bl	8003158 <LL_ADC_REG_SetSequencerChAdd>
 8003850:	e0c9      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	211f      	movs	r1, #31
 800385c:	400b      	ands	r3, r1
 800385e:	210f      	movs	r1, #15
 8003860:	4099      	lsls	r1, r3
 8003862:	000b      	movs	r3, r1
 8003864:	43db      	mvns	r3, r3
 8003866:	4013      	ands	r3, r2
 8003868:	0019      	movs	r1, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	035b      	lsls	r3, r3, #13
 8003870:	0b5b      	lsrs	r3, r3, #13
 8003872:	d105      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x9c>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0e9b      	lsrs	r3, r3, #26
 800387a:	221f      	movs	r2, #31
 800387c:	4013      	ands	r3, r2
 800387e:	e098      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2201      	movs	r2, #1
 8003886:	4013      	ands	r3, r2
 8003888:	d000      	beq.n	800388c <HAL_ADC_ConfigChannel+0xa8>
 800388a:	e091      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x1cc>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2202      	movs	r2, #2
 8003892:	4013      	ands	r3, r2
 8003894:	d000      	beq.n	8003898 <HAL_ADC_ConfigChannel+0xb4>
 8003896:	e089      	b.n	80039ac <HAL_ADC_ConfigChannel+0x1c8>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2204      	movs	r2, #4
 800389e:	4013      	ands	r3, r2
 80038a0:	d000      	beq.n	80038a4 <HAL_ADC_ConfigChannel+0xc0>
 80038a2:	e081      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x1c4>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2208      	movs	r2, #8
 80038aa:	4013      	ands	r3, r2
 80038ac:	d000      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0xcc>
 80038ae:	e079      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x1c0>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2210      	movs	r2, #16
 80038b6:	4013      	ands	r3, r2
 80038b8:	d000      	beq.n	80038bc <HAL_ADC_ConfigChannel+0xd8>
 80038ba:	e071      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x1bc>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2220      	movs	r2, #32
 80038c2:	4013      	ands	r3, r2
 80038c4:	d000      	beq.n	80038c8 <HAL_ADC_ConfigChannel+0xe4>
 80038c6:	e069      	b.n	800399c <HAL_ADC_ConfigChannel+0x1b8>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2240      	movs	r2, #64	@ 0x40
 80038ce:	4013      	ands	r3, r2
 80038d0:	d000      	beq.n	80038d4 <HAL_ADC_ConfigChannel+0xf0>
 80038d2:	e061      	b.n	8003998 <HAL_ADC_ConfigChannel+0x1b4>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	4013      	ands	r3, r2
 80038dc:	d000      	beq.n	80038e0 <HAL_ADC_ConfigChannel+0xfc>
 80038de:	e059      	b.n	8003994 <HAL_ADC_ConfigChannel+0x1b0>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	2380      	movs	r3, #128	@ 0x80
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4013      	ands	r3, r2
 80038ea:	d151      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1ac>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4013      	ands	r3, r2
 80038f6:	d149      	bne.n	800398c <HAL_ADC_ConfigChannel+0x1a8>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	@ 0x80
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4013      	ands	r3, r2
 8003902:	d141      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x1a4>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	2380      	movs	r3, #128	@ 0x80
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	4013      	ands	r3, r2
 800390e:	d139      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x1a0>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2380      	movs	r3, #128	@ 0x80
 8003916:	015b      	lsls	r3, r3, #5
 8003918:	4013      	ands	r3, r2
 800391a:	d131      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x19c>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2380      	movs	r3, #128	@ 0x80
 8003922:	019b      	lsls	r3, r3, #6
 8003924:	4013      	ands	r3, r2
 8003926:	d129      	bne.n	800397c <HAL_ADC_ConfigChannel+0x198>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2380      	movs	r3, #128	@ 0x80
 800392e:	01db      	lsls	r3, r3, #7
 8003930:	4013      	ands	r3, r2
 8003932:	d121      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x194>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2380      	movs	r3, #128	@ 0x80
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	4013      	ands	r3, r2
 800393e:	d119      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x190>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	025b      	lsls	r3, r3, #9
 8003948:	4013      	ands	r3, r2
 800394a:	d111      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x18c>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2380      	movs	r3, #128	@ 0x80
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	4013      	ands	r3, r2
 8003956:	d109      	bne.n	800396c <HAL_ADC_ConfigChannel+0x188>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	2380      	movs	r3, #128	@ 0x80
 800395e:	02db      	lsls	r3, r3, #11
 8003960:	4013      	ands	r3, r2
 8003962:	d001      	beq.n	8003968 <HAL_ADC_ConfigChannel+0x184>
 8003964:	2312      	movs	r3, #18
 8003966:	e024      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003968:	2300      	movs	r3, #0
 800396a:	e022      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 800396c:	2311      	movs	r3, #17
 800396e:	e020      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003970:	2310      	movs	r3, #16
 8003972:	e01e      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003974:	230f      	movs	r3, #15
 8003976:	e01c      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003978:	230e      	movs	r3, #14
 800397a:	e01a      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 800397c:	230d      	movs	r3, #13
 800397e:	e018      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003980:	230c      	movs	r3, #12
 8003982:	e016      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003984:	230b      	movs	r3, #11
 8003986:	e014      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003988:	230a      	movs	r3, #10
 800398a:	e012      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 800398c:	2309      	movs	r3, #9
 800398e:	e010      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003990:	2308      	movs	r3, #8
 8003992:	e00e      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003994:	2307      	movs	r3, #7
 8003996:	e00c      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003998:	2306      	movs	r3, #6
 800399a:	e00a      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 800399c:	2305      	movs	r3, #5
 800399e:	e008      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a0:	2304      	movs	r3, #4
 80039a2:	e006      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a4:	2303      	movs	r3, #3
 80039a6:	e004      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e002      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039b0:	2300      	movs	r3, #0
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	6852      	ldr	r2, [r2, #4]
 80039b6:	201f      	movs	r0, #31
 80039b8:	4002      	ands	r2, r0
 80039ba:	4093      	lsls	r3, r2
 80039bc:	000a      	movs	r2, r1
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d808      	bhi.n	80039e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	001a      	movs	r2, r3
 80039e2:	f7ff fb99 	bl	8003118 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	001a      	movs	r2, r3
 80039f4:	f7ff fbd4 	bl	80031a0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db00      	blt.n	8003a02 <HAL_ADC_ConfigChannel+0x21e>
 8003a00:	e0bc      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a02:	4b50      	ldr	r3, [pc, #320]	@ (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff fb35 	bl	8003074 <LL_ADC_GetCommonPathInternalCh>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4d      	ldr	r2, [pc, #308]	@ (8003b48 <HAL_ADC_ConfigChannel+0x364>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d122      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	2380      	movs	r3, #128	@ 0x80
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a20:	d11d      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2280      	movs	r2, #128	@ 0x80
 8003a26:	0412      	lsls	r2, r2, #16
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	4a46      	ldr	r2, [pc, #280]	@ (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	0010      	movs	r0, r2
 8003a30:	f7ff fb0c 	bl	800304c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a34:	4b45      	ldr	r3, [pc, #276]	@ (8003b4c <HAL_ADC_ConfigChannel+0x368>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4945      	ldr	r1, [pc, #276]	@ (8003b50 <HAL_ADC_ConfigChannel+0x36c>)
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7fc fb72 	bl	8000124 <__udivsi3>
 8003a40:	0003      	movs	r3, r0
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	0013      	movs	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	189b      	adds	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a4e:	e002      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f9      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a5c:	e08e      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a3c      	ldr	r2, [pc, #240]	@ (8003b54 <HAL_ADC_ConfigChannel+0x370>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d10e      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	2380      	movs	r3, #128	@ 0x80
 8003a6c:	045b      	lsls	r3, r3, #17
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d109      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2280      	movs	r2, #128	@ 0x80
 8003a76:	0452      	lsls	r2, r2, #17
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	4a32      	ldr	r2, [pc, #200]	@ (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	0010      	movs	r0, r2
 8003a80:	f7ff fae4 	bl	800304c <LL_ADC_SetCommonPathInternalCh>
 8003a84:	e07a      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a33      	ldr	r2, [pc, #204]	@ (8003b58 <HAL_ADC_ConfigChannel+0x374>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d000      	beq.n	8003a92 <HAL_ADC_ConfigChannel+0x2ae>
 8003a90:	e074      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	03db      	lsls	r3, r3, #15
 8003a98:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a9a:	d000      	beq.n	8003a9e <HAL_ADC_ConfigChannel+0x2ba>
 8003a9c:	e06e      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2280      	movs	r2, #128	@ 0x80
 8003aa2:	03d2      	lsls	r2, r2, #15
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	4a27      	ldr	r2, [pc, #156]	@ (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	0010      	movs	r0, r2
 8003aac:	f7ff face 	bl	800304c <LL_ADC_SetCommonPathInternalCh>
 8003ab0:	e064      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	2380      	movs	r3, #128	@ 0x80
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d004      	beq.n	8003ac8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b40 <HAL_ADC_ConfigChannel+0x35c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d107      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	0010      	movs	r0, r2
 8003ad4:	f7ff fb51 	bl	800317a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da4d      	bge.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ae0:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7ff fac6 	bl	8003074 <LL_ADC_GetCommonPathInternalCh>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a15      	ldr	r2, [pc, #84]	@ (8003b48 <HAL_ADC_ConfigChannel+0x364>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d108      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a18      	ldr	r2, [pc, #96]	@ (8003b5c <HAL_ADC_ConfigChannel+0x378>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	4a11      	ldr	r2, [pc, #68]	@ (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003afe:	0019      	movs	r1, r3
 8003b00:	0010      	movs	r0, r2
 8003b02:	f7ff faa3 	bl	800304c <LL_ADC_SetCommonPathInternalCh>
 8003b06:	e039      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a11      	ldr	r2, [pc, #68]	@ (8003b54 <HAL_ADC_ConfigChannel+0x370>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <HAL_ADC_ConfigChannel+0x37c>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	0010      	movs	r0, r2
 8003b1e:	f7ff fa95 	bl	800304c <LL_ADC_SetCommonPathInternalCh>
 8003b22:	e02b      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0b      	ldr	r2, [pc, #44]	@ (8003b58 <HAL_ADC_ConfigChannel+0x374>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d126      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4a0c      	ldr	r2, [pc, #48]	@ (8003b64 <HAL_ADC_ConfigChannel+0x380>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	4a03      	ldr	r2, [pc, #12]	@ (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003b36:	0019      	movs	r1, r3
 8003b38:	0010      	movs	r0, r2
 8003b3a:	f7ff fa87 	bl	800304c <LL_ADC_SetCommonPathInternalCh>
 8003b3e:	e01d      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
 8003b40:	80000004 	.word	0x80000004
 8003b44:	40012708 	.word	0x40012708
 8003b48:	b0001000 	.word	0xb0001000
 8003b4c:	20000004 	.word	0x20000004
 8003b50:	00030d40 	.word	0x00030d40
 8003b54:	b8004000 	.word	0xb8004000
 8003b58:	b4002000 	.word	0xb4002000
 8003b5c:	ff7fffff 	.word	0xff7fffff
 8003b60:	feffffff 	.word	0xfeffffff
 8003b64:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003b74:	2317      	movs	r3, #23
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2254      	movs	r2, #84	@ 0x54
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003b84:	2317      	movs	r3, #23
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	781b      	ldrb	r3, [r3, #0]
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b006      	add	sp, #24
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)

08003b94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7ff fb51 	bl	800324c <LL_ADC_IsEnabled>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d000      	beq.n	8003bb0 <ADC_Enable+0x1c>
 8003bae:	e069      	b.n	8003c84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4a36      	ldr	r2, [pc, #216]	@ (8003c90 <ADC_Enable+0xfc>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d00d      	beq.n	8003bd8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bcc:	2201      	movs	r2, #1
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e056      	b.n	8003c86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff fb23 	bl	8003228 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003be2:	4b2c      	ldr	r3, [pc, #176]	@ (8003c94 <ADC_Enable+0x100>)
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7ff fa45 	bl	8003074 <LL_ADC_GetCommonPathInternalCh>
 8003bea:	0002      	movs	r2, r0
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d00f      	beq.n	8003c14 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf4:	4b28      	ldr	r3, [pc, #160]	@ (8003c98 <ADC_Enable+0x104>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4928      	ldr	r1, [pc, #160]	@ (8003c9c <ADC_Enable+0x108>)
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f7fc fa92 	bl	8000124 <__udivsi3>
 8003c00:	0003      	movs	r3, r0
 8003c02:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003c04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c06:	e002      	b.n	8003c0e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f9      	bne.n	8003c08 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7e5b      	ldrb	r3, [r3, #25]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d033      	beq.n	8003c84 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003c1c:	f7ff f9d2 	bl	8002fc4 <HAL_GetTick>
 8003c20:	0003      	movs	r3, r0
 8003c22:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c24:	e027      	b.n	8003c76 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff fb0e 	bl	800324c <LL_ADC_IsEnabled>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d104      	bne.n	8003c3e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f7ff faf5 	bl	8003228 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c3e:	f7ff f9c1 	bl	8002fc4 <HAL_GetTick>
 8003c42:	0002      	movs	r2, r0
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d914      	bls.n	8003c76 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2201      	movs	r2, #1
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d00d      	beq.n	8003c76 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5e:	2210      	movs	r2, #16
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e007      	b.n	8003c86 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d1d0      	bne.n	8003c26 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b004      	add	sp, #16
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	80000017 	.word	0x80000017
 8003c94:	40012708 	.word	0x40012708
 8003c98:	20000004 	.word	0x20000004
 8003c9c:	00030d40 	.word	0x00030d40

08003ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	1dfb      	adds	r3, r7, #7
 8003cac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cb4:	d828      	bhi.n	8003d08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d74 <__NVIC_SetPriority+0xd4>)
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	33c0      	adds	r3, #192	@ 0xc0
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	589b      	ldr	r3, [r3, r2]
 8003cc6:	1dfa      	adds	r2, r7, #7
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	0011      	movs	r1, r2
 8003ccc:	2203      	movs	r2, #3
 8003cce:	400a      	ands	r2, r1
 8003cd0:	00d2      	lsls	r2, r2, #3
 8003cd2:	21ff      	movs	r1, #255	@ 0xff
 8003cd4:	4091      	lsls	r1, r2
 8003cd6:	000a      	movs	r2, r1
 8003cd8:	43d2      	mvns	r2, r2
 8003cda:	401a      	ands	r2, r3
 8003cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	22ff      	movs	r2, #255	@ 0xff
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	1dfb      	adds	r3, r7, #7
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	0018      	movs	r0, r3
 8003cec:	2303      	movs	r3, #3
 8003cee:	4003      	ands	r3, r0
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cf4:	481f      	ldr	r0, [pc, #124]	@ (8003d74 <__NVIC_SetPriority+0xd4>)
 8003cf6:	1dfb      	adds	r3, r7, #7
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	b25b      	sxtb	r3, r3
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	33c0      	adds	r3, #192	@ 0xc0
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003d06:	e031      	b.n	8003d6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d08:	4a1b      	ldr	r2, [pc, #108]	@ (8003d78 <__NVIC_SetPriority+0xd8>)
 8003d0a:	1dfb      	adds	r3, r7, #7
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	0019      	movs	r1, r3
 8003d10:	230f      	movs	r3, #15
 8003d12:	400b      	ands	r3, r1
 8003d14:	3b08      	subs	r3, #8
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	3306      	adds	r3, #6
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	18d3      	adds	r3, r2, r3
 8003d1e:	3304      	adds	r3, #4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	1dfa      	adds	r2, r7, #7
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	0011      	movs	r1, r2
 8003d28:	2203      	movs	r2, #3
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	00d2      	lsls	r2, r2, #3
 8003d2e:	21ff      	movs	r1, #255	@ 0xff
 8003d30:	4091      	lsls	r1, r2
 8003d32:	000a      	movs	r2, r1
 8003d34:	43d2      	mvns	r2, r2
 8003d36:	401a      	ands	r2, r3
 8003d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	019b      	lsls	r3, r3, #6
 8003d3e:	22ff      	movs	r2, #255	@ 0xff
 8003d40:	401a      	ands	r2, r3
 8003d42:	1dfb      	adds	r3, r7, #7
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	0018      	movs	r0, r3
 8003d48:	2303      	movs	r3, #3
 8003d4a:	4003      	ands	r3, r0
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d50:	4809      	ldr	r0, [pc, #36]	@ (8003d78 <__NVIC_SetPriority+0xd8>)
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	001c      	movs	r4, r3
 8003d58:	230f      	movs	r3, #15
 8003d5a:	4023      	ands	r3, r4
 8003d5c:	3b08      	subs	r3, #8
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	430a      	orrs	r2, r1
 8003d62:	3306      	adds	r3, #6
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	18c3      	adds	r3, r0, r3
 8003d68:	3304      	adds	r3, #4
 8003d6a:	601a      	str	r2, [r3, #0]
}
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b003      	add	sp, #12
 8003d72:	bd90      	pop	{r4, r7, pc}
 8003d74:	e000e100 	.word	0xe000e100
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	1e5a      	subs	r2, r3, #1
 8003d88:	2380      	movs	r3, #128	@ 0x80
 8003d8a:	045b      	lsls	r3, r3, #17
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d301      	bcc.n	8003d94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d90:	2301      	movs	r3, #1
 8003d92:	e010      	b.n	8003db6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d94:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc0 <SysTick_Config+0x44>)
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	3a01      	subs	r2, #1
 8003d9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	425b      	negs	r3, r3
 8003da0:	2103      	movs	r1, #3
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7ff ff7c 	bl	8003ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da8:	4b05      	ldr	r3, [pc, #20]	@ (8003dc0 <SysTick_Config+0x44>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dae:	4b04      	ldr	r3, [pc, #16]	@ (8003dc0 <SysTick_Config+0x44>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	e000e010 	.word	0xe000e010

08003dc4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	210f      	movs	r1, #15
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	1c02      	adds	r2, r0, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	0011      	movs	r1, r2
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff ff5d 	bl	8003ca0 <__NVIC_SetPriority>
}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b004      	add	sp, #16
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7ff ffbf 	bl	8003d7c <SysTick_Config>
 8003dfe:	0003      	movs	r3, r0
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b002      	add	sp, #8
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e16:	e147      	b.n	80040a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4091      	lsls	r1, r2
 8003e22:	000a      	movs	r2, r1
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d100      	bne.n	8003e30 <HAL_GPIO_Init+0x28>
 8003e2e:	e138      	b.n	80040a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2203      	movs	r2, #3
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d005      	beq.n	8003e48 <HAL_GPIO_Init+0x40>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2203      	movs	r2, #3
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d130      	bne.n	8003eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2203      	movs	r2, #3
 8003e54:	409a      	lsls	r2, r3
 8003e56:	0013      	movs	r3, r2
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	0013      	movs	r3, r2
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e7e:	2201      	movs	r2, #1
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	409a      	lsls	r2, r3
 8003e84:	0013      	movs	r3, r2
 8003e86:	43da      	mvns	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	2201      	movs	r2, #1
 8003e96:	401a      	ands	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	0013      	movs	r3, r2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d017      	beq.n	8003ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	0013      	movs	r3, r2
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	0013      	movs	r3, r2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2203      	movs	r2, #3
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d123      	bne.n	8003f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	08da      	lsrs	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3208      	adds	r2, #8
 8003efa:	0092      	lsls	r2, r2, #2
 8003efc:	58d3      	ldr	r3, [r2, r3]
 8003efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2207      	movs	r2, #7
 8003f04:	4013      	ands	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	220f      	movs	r2, #15
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2107      	movs	r1, #7
 8003f1e:	400b      	ands	r3, r1
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	409a      	lsls	r2, r3
 8003f24:	0013      	movs	r3, r2
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	08da      	lsrs	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3208      	adds	r2, #8
 8003f34:	0092      	lsls	r2, r2, #2
 8003f36:	6939      	ldr	r1, [r7, #16]
 8003f38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2203      	movs	r2, #3
 8003f46:	409a      	lsls	r2, r3
 8003f48:	0013      	movs	r3, r2
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2203      	movs	r2, #3
 8003f58:	401a      	ands	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	0013      	movs	r3, r2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	23c0      	movs	r3, #192	@ 0xc0
 8003f74:	029b      	lsls	r3, r3, #10
 8003f76:	4013      	ands	r3, r2
 8003f78:	d100      	bne.n	8003f7c <HAL_GPIO_Init+0x174>
 8003f7a:	e092      	b.n	80040a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f7c:	4a50      	ldr	r2, [pc, #320]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	3318      	adds	r3, #24
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	589b      	ldr	r3, [r3, r2]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	4013      	ands	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	220f      	movs	r2, #15
 8003f94:	409a      	lsls	r2, r3
 8003f96:	0013      	movs	r3, r2
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	23a0      	movs	r3, #160	@ 0xa0
 8003fa4:	05db      	lsls	r3, r3, #23
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d013      	beq.n	8003fd2 <HAL_GPIO_Init+0x1ca>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a45      	ldr	r2, [pc, #276]	@ (80040c4 <HAL_GPIO_Init+0x2bc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00d      	beq.n	8003fce <HAL_GPIO_Init+0x1c6>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a44      	ldr	r2, [pc, #272]	@ (80040c8 <HAL_GPIO_Init+0x2c0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <HAL_GPIO_Init+0x1c2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a43      	ldr	r2, [pc, #268]	@ (80040cc <HAL_GPIO_Init+0x2c4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_GPIO_Init+0x1be>
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e006      	b.n	8003fd4 <HAL_GPIO_Init+0x1cc>
 8003fc6:	2305      	movs	r3, #5
 8003fc8:	e004      	b.n	8003fd4 <HAL_GPIO_Init+0x1cc>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_Init+0x1cc>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_GPIO_Init+0x1cc>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	2103      	movs	r1, #3
 8003fd8:	400a      	ands	r2, r1
 8003fda:	00d2      	lsls	r2, r2, #3
 8003fdc:	4093      	lsls	r3, r2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003fe4:	4936      	ldr	r1, [pc, #216]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3318      	adds	r3, #24
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ff2:	4b33      	ldr	r3, [pc, #204]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4013      	ands	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	2380      	movs	r3, #128	@ 0x80
 8004008:	035b      	lsls	r3, r3, #13
 800400a:	4013      	ands	r3, r2
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004016:	4b2a      	ldr	r3, [pc, #168]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800401c:	4b28      	ldr	r3, [pc, #160]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	43da      	mvns	r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	2380      	movs	r3, #128	@ 0x80
 8004032:	039b      	lsls	r3, r3, #14
 8004034:	4013      	ands	r3, r2
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004040:	4b1f      	ldr	r3, [pc, #124]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004046:	4a1e      	ldr	r2, [pc, #120]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 8004048:	2384      	movs	r3, #132	@ 0x84
 800404a:	58d3      	ldr	r3, [r2, r3]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	43da      	mvns	r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	029b      	lsls	r3, r3, #10
 8004060:	4013      	ands	r3, r2
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800406c:	4914      	ldr	r1, [pc, #80]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 800406e:	2284      	movs	r2, #132	@ 0x84
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004074:	4a12      	ldr	r2, [pc, #72]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	58d3      	ldr	r3, [r2, r3]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43da      	mvns	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	2380      	movs	r3, #128	@ 0x80
 800408c:	025b      	lsls	r3, r3, #9
 800408e:	4013      	ands	r3, r2
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800409a:	4909      	ldr	r1, [pc, #36]	@ (80040c0 <HAL_GPIO_Init+0x2b8>)
 800409c:	2280      	movs	r2, #128	@ 0x80
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3301      	adds	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	40da      	lsrs	r2, r3
 80040b0:	1e13      	subs	r3, r2, #0
 80040b2:	d000      	beq.n	80040b6 <HAL_GPIO_Init+0x2ae>
 80040b4:	e6b0      	b.n	8003e18 <HAL_GPIO_Init+0x10>
  }
}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	46c0      	nop			@ (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b006      	add	sp, #24
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021800 	.word	0x40021800
 80040c4:	50000400 	.word	0x50000400
 80040c8:	50000800 	.word	0x50000800
 80040cc:	50000c00 	.word	0x50000c00

080040d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	000a      	movs	r2, r1
 80040da:	1cbb      	adds	r3, r7, #2
 80040dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	1cba      	adds	r2, r7, #2
 80040e4:	8812      	ldrh	r2, [r2, #0]
 80040e6:	4013      	ands	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80040ea:	230f      	movs	r3, #15
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e003      	b.n	80040fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040f4:	230f      	movs	r3, #15
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80040fc:	230f      	movs	r3, #15
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	781b      	ldrb	r3, [r3, #0]
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b004      	add	sp, #16
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	0008      	movs	r0, r1
 8004114:	0011      	movs	r1, r2
 8004116:	1cbb      	adds	r3, r7, #2
 8004118:	1c02      	adds	r2, r0, #0
 800411a:	801a      	strh	r2, [r3, #0]
 800411c:	1c7b      	adds	r3, r7, #1
 800411e:	1c0a      	adds	r2, r1, #0
 8004120:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004122:	1c7b      	adds	r3, r7, #1
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d004      	beq.n	8004134 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800412a:	1cbb      	adds	r3, r7, #2
 800412c:	881a      	ldrh	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004132:	e003      	b.n	800413c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004134:	1cbb      	adds	r3, r7, #2
 8004136:	881a      	ldrh	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800414c:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004152:	4013      	ands	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	4b17      	ldr	r3, [pc, #92]	@ (80041b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	2380      	movs	r3, #128	@ 0x80
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	429a      	cmp	r2, r3
 8004166:	d11f      	bne.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004168:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	0013      	movs	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	189b      	adds	r3, r3, r2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	4912      	ldr	r1, [pc, #72]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004176:	0018      	movs	r0, r3
 8004178:	f7fb ffd4 	bl	8000124 <__udivsi3>
 800417c:	0003      	movs	r3, r0
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004182:	e008      	b.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3b01      	subs	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e001      	b.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e009      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004196:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	401a      	ands	r2, r3
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d0ed      	beq.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b004      	add	sp, #16
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	40007000 	.word	0x40007000
 80041b8:	fffff9ff 	.word	0xfffff9ff
 80041bc:	20000004 	.word	0x20000004
 80041c0:	000f4240 	.word	0x000f4240

080041c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041c8:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	23e0      	movs	r3, #224	@ 0xe0
 80041ce:	01db      	lsls	r3, r3, #7
 80041d0:	4013      	ands	r3, r2
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e2f3      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2201      	movs	r2, #1
 80041f4:	4013      	ands	r3, r2
 80041f6:	d100      	bne.n	80041fa <HAL_RCC_OscConfig+0x1e>
 80041f8:	e07c      	b.n	80042f4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041fa:	4bc3      	ldr	r3, [pc, #780]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2238      	movs	r2, #56	@ 0x38
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004204:	4bc0      	ldr	r3, [pc, #768]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2203      	movs	r2, #3
 800420a:	4013      	ands	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b10      	cmp	r3, #16
 8004212:	d102      	bne.n	800421a <HAL_RCC_OscConfig+0x3e>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b03      	cmp	r3, #3
 8004218:	d002      	beq.n	8004220 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d10b      	bne.n	8004238 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	4bb9      	ldr	r3, [pc, #740]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	4013      	ands	r3, r2
 800422a:	d062      	beq.n	80042f2 <HAL_RCC_OscConfig+0x116>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d15e      	bne.n	80042f2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e2ce      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	2380      	movs	r3, #128	@ 0x80
 800423e:	025b      	lsls	r3, r3, #9
 8004240:	429a      	cmp	r2, r3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x78>
 8004244:	4bb0      	ldr	r3, [pc, #704]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	4baf      	ldr	r3, [pc, #700]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800424a:	2180      	movs	r1, #128	@ 0x80
 800424c:	0249      	lsls	r1, r1, #9
 800424e:	430a      	orrs	r2, r1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e020      	b.n	8004296 <HAL_RCC_OscConfig+0xba>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	23a0      	movs	r3, #160	@ 0xa0
 800425a:	02db      	lsls	r3, r3, #11
 800425c:	429a      	cmp	r2, r3
 800425e:	d10e      	bne.n	800427e <HAL_RCC_OscConfig+0xa2>
 8004260:	4ba9      	ldr	r3, [pc, #676]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4ba8      	ldr	r3, [pc, #672]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004266:	2180      	movs	r1, #128	@ 0x80
 8004268:	02c9      	lsls	r1, r1, #11
 800426a:	430a      	orrs	r2, r1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	4ba6      	ldr	r3, [pc, #664]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4ba5      	ldr	r3, [pc, #660]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004274:	2180      	movs	r1, #128	@ 0x80
 8004276:	0249      	lsls	r1, r1, #9
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e00b      	b.n	8004296 <HAL_RCC_OscConfig+0xba>
 800427e:	4ba2      	ldr	r3, [pc, #648]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4ba1      	ldr	r3, [pc, #644]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004284:	49a1      	ldr	r1, [pc, #644]	@ (800450c <HAL_RCC_OscConfig+0x330>)
 8004286:	400a      	ands	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	4b9f      	ldr	r3, [pc, #636]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b9e      	ldr	r3, [pc, #632]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004290:	499f      	ldr	r1, [pc, #636]	@ (8004510 <HAL_RCC_OscConfig+0x334>)
 8004292:	400a      	ands	r2, r1
 8004294:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d014      	beq.n	80042c8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fe fe91 	bl	8002fc4 <HAL_GetTick>
 80042a2:	0003      	movs	r3, r0
 80042a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fe fe8c 	bl	8002fc4 <HAL_GetTick>
 80042ac:	0002      	movs	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	@ 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e28d      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ba:	4b93      	ldr	r3, [pc, #588]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	2380      	movs	r3, #128	@ 0x80
 80042c0:	029b      	lsls	r3, r3, #10
 80042c2:	4013      	ands	r3, r2
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0xcc>
 80042c6:	e015      	b.n	80042f4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fe fe7c 	bl	8002fc4 <HAL_GetTick>
 80042cc:	0003      	movs	r3, r0
 80042ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d2:	f7fe fe77 	bl	8002fc4 <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b64      	cmp	r3, #100	@ 0x64
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e278      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e4:	4b88      	ldr	r3, [pc, #544]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	029b      	lsls	r3, r3, #10
 80042ec:	4013      	ands	r3, r2
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0xf6>
 80042f0:	e000      	b.n	80042f4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2202      	movs	r2, #2
 80042fa:	4013      	ands	r3, r2
 80042fc:	d100      	bne.n	8004300 <HAL_RCC_OscConfig+0x124>
 80042fe:	e099      	b.n	8004434 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004300:	4b81      	ldr	r3, [pc, #516]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2238      	movs	r2, #56	@ 0x38
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800430a:	4b7f      	ldr	r3, [pc, #508]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2203      	movs	r2, #3
 8004310:	4013      	ands	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b10      	cmp	r3, #16
 8004318:	d102      	bne.n	8004320 <HAL_RCC_OscConfig+0x144>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d002      	beq.n	8004326 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d135      	bne.n	8004392 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004326:	4b78      	ldr	r3, [pc, #480]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4013      	ands	r3, r2
 8004330:	d005      	beq.n	800433e <HAL_RCC_OscConfig+0x162>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e24b      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433e:	4b72      	ldr	r3, [pc, #456]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4a74      	ldr	r2, [pc, #464]	@ (8004514 <HAL_RCC_OscConfig+0x338>)
 8004344:	4013      	ands	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	021a      	lsls	r2, r3, #8
 800434e:	4b6e      	ldr	r3, [pc, #440]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d112      	bne.n	8004380 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800435a:	4b6b      	ldr	r3, [pc, #428]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a6e      	ldr	r2, [pc, #440]	@ (8004518 <HAL_RCC_OscConfig+0x33c>)
 8004360:	4013      	ands	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	4b67      	ldr	r3, [pc, #412]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800436a:	430a      	orrs	r2, r1
 800436c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800436e:	4b66      	ldr	r3, [pc, #408]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0adb      	lsrs	r3, r3, #11
 8004374:	2207      	movs	r2, #7
 8004376:	4013      	ands	r3, r2
 8004378:	4a68      	ldr	r2, [pc, #416]	@ (800451c <HAL_RCC_OscConfig+0x340>)
 800437a:	40da      	lsrs	r2, r3
 800437c:	4b68      	ldr	r3, [pc, #416]	@ (8004520 <HAL_RCC_OscConfig+0x344>)
 800437e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004380:	4b68      	ldr	r3, [pc, #416]	@ (8004524 <HAL_RCC_OscConfig+0x348>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	0018      	movs	r0, r3
 8004386:	f7fe fdc1 	bl	8002f0c <HAL_InitTick>
 800438a:	1e03      	subs	r3, r0, #0
 800438c:	d051      	beq.n	8004432 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e221      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d030      	beq.n	80043fc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800439a:	4b5b      	ldr	r3, [pc, #364]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a5e      	ldr	r2, [pc, #376]	@ (8004518 <HAL_RCC_OscConfig+0x33c>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	0019      	movs	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	4b57      	ldr	r3, [pc, #348]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043ae:	4b56      	ldr	r3, [pc, #344]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b55      	ldr	r3, [pc, #340]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80043b4:	2180      	movs	r1, #128	@ 0x80
 80043b6:	0049      	lsls	r1, r1, #1
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fe02 	bl	8002fc4 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c6:	f7fe fdfd 	bl	8002fc4 <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e1fe      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	@ 0x80
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4013      	ands	r3, r2
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e4:	4b48      	ldr	r3, [pc, #288]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004514 <HAL_RCC_OscConfig+0x338>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	0019      	movs	r1, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	021a      	lsls	r2, r3, #8
 80043f4:	4b44      	ldr	r3, [pc, #272]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	e01b      	b.n	8004434 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80043fc:	4b42      	ldr	r3, [pc, #264]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b41      	ldr	r3, [pc, #260]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004402:	4949      	ldr	r1, [pc, #292]	@ (8004528 <HAL_RCC_OscConfig+0x34c>)
 8004404:	400a      	ands	r2, r1
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe fddc 	bl	8002fc4 <HAL_GetTick>
 800440c:	0003      	movs	r3, r0
 800440e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004412:	f7fe fdd7 	bl	8002fc4 <HAL_GetTick>
 8004416:	0002      	movs	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e1d8      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004424:	4b38      	ldr	r3, [pc, #224]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2380      	movs	r3, #128	@ 0x80
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4013      	ands	r3, r2
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x236>
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004432:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2208      	movs	r2, #8
 800443a:	4013      	ands	r3, r2
 800443c:	d047      	beq.n	80044ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800443e:	4b32      	ldr	r3, [pc, #200]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2238      	movs	r2, #56	@ 0x38
 8004444:	4013      	ands	r3, r2
 8004446:	2b18      	cmp	r3, #24
 8004448:	d10a      	bne.n	8004460 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800444a:	4b2f      	ldr	r3, [pc, #188]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800444c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444e:	2202      	movs	r2, #2
 8004450:	4013      	ands	r3, r2
 8004452:	d03c      	beq.n	80044ce <HAL_RCC_OscConfig+0x2f2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d138      	bne.n	80044ce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e1ba      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d019      	beq.n	800449c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004468:	4b27      	ldr	r3, [pc, #156]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800446a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800446c:	4b26      	ldr	r3, [pc, #152]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800446e:	2101      	movs	r1, #1
 8004470:	430a      	orrs	r2, r1
 8004472:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fe fda6 	bl	8002fc4 <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447e:	f7fe fda1 	bl	8002fc4 <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e1a2      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004490:	4b1d      	ldr	r3, [pc, #116]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 8004492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004494:	2202      	movs	r2, #2
 8004496:	4013      	ands	r3, r2
 8004498:	d0f1      	beq.n	800447e <HAL_RCC_OscConfig+0x2a2>
 800449a:	e018      	b.n	80044ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800449c:	4b1a      	ldr	r3, [pc, #104]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 800449e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044a0:	4b19      	ldr	r3, [pc, #100]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80044a2:	2101      	movs	r1, #1
 80044a4:	438a      	bics	r2, r1
 80044a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fe fd8c 	bl	8002fc4 <HAL_GetTick>
 80044ac:	0003      	movs	r3, r0
 80044ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b2:	f7fe fd87 	bl	8002fc4 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e188      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044c4:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80044c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c8:	2202      	movs	r2, #2
 80044ca:	4013      	ands	r3, r2
 80044cc:	d1f1      	bne.n	80044b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2204      	movs	r2, #4
 80044d4:	4013      	ands	r3, r2
 80044d6:	d100      	bne.n	80044da <HAL_RCC_OscConfig+0x2fe>
 80044d8:	e0c6      	b.n	8004668 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	231f      	movs	r3, #31
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044e2:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2238      	movs	r2, #56	@ 0x38
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d11e      	bne.n	800452c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <HAL_RCC_OscConfig+0x32c>)
 80044f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f2:	2202      	movs	r2, #2
 80044f4:	4013      	ands	r3, r2
 80044f6:	d100      	bne.n	80044fa <HAL_RCC_OscConfig+0x31e>
 80044f8:	e0b6      	b.n	8004668 <HAL_RCC_OscConfig+0x48c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d000      	beq.n	8004504 <HAL_RCC_OscConfig+0x328>
 8004502:	e0b1      	b.n	8004668 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e166      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
 8004508:	40021000 	.word	0x40021000
 800450c:	fffeffff 	.word	0xfffeffff
 8004510:	fffbffff 	.word	0xfffbffff
 8004514:	ffff80ff 	.word	0xffff80ff
 8004518:	ffffc7ff 	.word	0xffffc7ff
 800451c:	00f42400 	.word	0x00f42400
 8004520:	20000004 	.word	0x20000004
 8004524:	20000008 	.word	0x20000008
 8004528:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800452c:	4bac      	ldr	r3, [pc, #688]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 800452e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004530:	2380      	movs	r3, #128	@ 0x80
 8004532:	055b      	lsls	r3, r3, #21
 8004534:	4013      	ands	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_RCC_OscConfig+0x360>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x362>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d011      	beq.n	8004566 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	4ba7      	ldr	r3, [pc, #668]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004546:	4ba6      	ldr	r3, [pc, #664]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004548:	2180      	movs	r1, #128	@ 0x80
 800454a:	0549      	lsls	r1, r1, #21
 800454c:	430a      	orrs	r2, r1
 800454e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004550:	4ba3      	ldr	r3, [pc, #652]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	055b      	lsls	r3, r3, #21
 8004558:	4013      	ands	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800455e:	231f      	movs	r3, #31
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004566:	4b9f      	ldr	r3, [pc, #636]	@ (80047e4 <HAL_RCC_OscConfig+0x608>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	@ 0x80
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	4013      	ands	r3, r2
 8004570:	d11a      	bne.n	80045a8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004572:	4b9c      	ldr	r3, [pc, #624]	@ (80047e4 <HAL_RCC_OscConfig+0x608>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b9b      	ldr	r3, [pc, #620]	@ (80047e4 <HAL_RCC_OscConfig+0x608>)
 8004578:	2180      	movs	r1, #128	@ 0x80
 800457a:	0049      	lsls	r1, r1, #1
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004580:	f7fe fd20 	bl	8002fc4 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458a:	f7fe fd1b 	bl	8002fc4 <HAL_GetTick>
 800458e:	0002      	movs	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e11c      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459c:	4b91      	ldr	r3, [pc, #580]	@ (80047e4 <HAL_RCC_OscConfig+0x608>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	4013      	ands	r3, r2
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d106      	bne.n	80045be <HAL_RCC_OscConfig+0x3e2>
 80045b0:	4b8b      	ldr	r3, [pc, #556]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045b4:	4b8a      	ldr	r3, [pc, #552]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045b6:	2101      	movs	r1, #1
 80045b8:	430a      	orrs	r2, r1
 80045ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045bc:	e01c      	b.n	80045f8 <HAL_RCC_OscConfig+0x41c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0x404>
 80045c6:	4b86      	ldr	r3, [pc, #536]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045ca:	4b85      	ldr	r3, [pc, #532]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045cc:	2104      	movs	r1, #4
 80045ce:	430a      	orrs	r2, r1
 80045d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045d2:	4b83      	ldr	r3, [pc, #524]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045d6:	4b82      	ldr	r3, [pc, #520]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045d8:	2101      	movs	r1, #1
 80045da:	430a      	orrs	r2, r1
 80045dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0x41c>
 80045e0:	4b7f      	ldr	r3, [pc, #508]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045e4:	4b7e      	ldr	r3, [pc, #504]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045e6:	2101      	movs	r1, #1
 80045e8:	438a      	bics	r2, r1
 80045ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045ec:	4b7c      	ldr	r3, [pc, #496]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045f0:	4b7b      	ldr	r3, [pc, #492]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80045f2:	2104      	movs	r1, #4
 80045f4:	438a      	bics	r2, r1
 80045f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d014      	beq.n	800462a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fe fce0 	bl	8002fc4 <HAL_GetTick>
 8004604:	0003      	movs	r3, r0
 8004606:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004608:	e009      	b.n	800461e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460a:	f7fe fcdb 	bl	8002fc4 <HAL_GetTick>
 800460e:	0002      	movs	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	4a74      	ldr	r2, [pc, #464]	@ (80047e8 <HAL_RCC_OscConfig+0x60c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0db      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461e:	4b70      	ldr	r3, [pc, #448]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	2202      	movs	r2, #2
 8004624:	4013      	ands	r3, r2
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x42e>
 8004628:	e013      	b.n	8004652 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fe fccb 	bl	8002fc4 <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004632:	e009      	b.n	8004648 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fe fcc6 	bl	8002fc4 <HAL_GetTick>
 8004638:	0002      	movs	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	4a6a      	ldr	r2, [pc, #424]	@ (80047e8 <HAL_RCC_OscConfig+0x60c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0c6      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004648:	4b65      	ldr	r3, [pc, #404]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 800464a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464c:	2202      	movs	r2, #2
 800464e:	4013      	ands	r3, r2
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004652:	231f      	movs	r3, #31
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800465c:	4b60      	ldr	r3, [pc, #384]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 800465e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004660:	4b5f      	ldr	r3, [pc, #380]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004662:	4962      	ldr	r1, [pc, #392]	@ (80047ec <HAL_RCC_OscConfig+0x610>)
 8004664:	400a      	ands	r2, r1
 8004666:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d100      	bne.n	8004672 <HAL_RCC_OscConfig+0x496>
 8004670:	e0b0      	b.n	80047d4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004672:	4b5b      	ldr	r3, [pc, #364]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2238      	movs	r2, #56	@ 0x38
 8004678:	4013      	ands	r3, r2
 800467a:	2b10      	cmp	r3, #16
 800467c:	d100      	bne.n	8004680 <HAL_RCC_OscConfig+0x4a4>
 800467e:	e078      	b.n	8004772 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d153      	bne.n	8004730 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004688:	4b55      	ldr	r3, [pc, #340]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b54      	ldr	r3, [pc, #336]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 800468e:	4958      	ldr	r1, [pc, #352]	@ (80047f0 <HAL_RCC_OscConfig+0x614>)
 8004690:	400a      	ands	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fe fc96 	bl	8002fc4 <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469e:	f7fe fc91 	bl	8002fc4 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e092      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b0:	4b4b      	ldr	r3, [pc, #300]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	049b      	lsls	r3, r3, #18
 80046b8:	4013      	ands	r3, r2
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046bc:	4b48      	ldr	r3, [pc, #288]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a4c      	ldr	r2, [pc, #304]	@ (80047f4 <HAL_RCC_OscConfig+0x618>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	431a      	orrs	r2, r3
 80046e4:	4b3e      	ldr	r3, [pc, #248]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80046e6:	430a      	orrs	r2, r1
 80046e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ea:	4b3d      	ldr	r3, [pc, #244]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b3c      	ldr	r3, [pc, #240]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80046f0:	2180      	movs	r1, #128	@ 0x80
 80046f2:	0449      	lsls	r1, r1, #17
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80046f8:	4b39      	ldr	r3, [pc, #228]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	4b38      	ldr	r3, [pc, #224]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 80046fe:	2180      	movs	r1, #128	@ 0x80
 8004700:	0549      	lsls	r1, r1, #21
 8004702:	430a      	orrs	r2, r1
 8004704:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fe fc5d 	bl	8002fc4 <HAL_GetTick>
 800470a:	0003      	movs	r3, r0
 800470c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004710:	f7fe fc58 	bl	8002fc4 <HAL_GetTick>
 8004714:	0002      	movs	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e059      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004722:	4b2f      	ldr	r3, [pc, #188]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	2380      	movs	r3, #128	@ 0x80
 8004728:	049b      	lsls	r3, r3, #18
 800472a:	4013      	ands	r3, r2
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0x534>
 800472e:	e051      	b.n	80047d4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004730:	4b2b      	ldr	r3, [pc, #172]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b2a      	ldr	r3, [pc, #168]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004736:	492e      	ldr	r1, [pc, #184]	@ (80047f0 <HAL_RCC_OscConfig+0x614>)
 8004738:	400a      	ands	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fe fc42 	bl	8002fc4 <HAL_GetTick>
 8004740:	0003      	movs	r3, r0
 8004742:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004746:	f7fe fc3d 	bl	8002fc4 <HAL_GetTick>
 800474a:	0002      	movs	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e03e      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004758:	4b21      	ldr	r3, [pc, #132]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	2380      	movs	r3, #128	@ 0x80
 800475e:	049b      	lsls	r3, r3, #18
 8004760:	4013      	ands	r3, r2
 8004762:	d1f0      	bne.n	8004746 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004764:	4b1e      	ldr	r3, [pc, #120]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 800476a:	4923      	ldr	r1, [pc, #140]	@ (80047f8 <HAL_RCC_OscConfig+0x61c>)
 800476c:	400a      	ands	r2, r1
 800476e:	60da      	str	r2, [r3, #12]
 8004770:	e030      	b.n	80047d4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e02b      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800477e:	4b18      	ldr	r3, [pc, #96]	@ (80047e0 <HAL_RCC_OscConfig+0x604>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2203      	movs	r2, #3
 8004788:	401a      	ands	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	429a      	cmp	r2, r3
 8004790:	d11e      	bne.n	80047d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2270      	movs	r2, #112	@ 0x70
 8004796:	401a      	ands	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d117      	bne.n	80047d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	23fe      	movs	r3, #254	@ 0xfe
 80047a4:	01db      	lsls	r3, r3, #7
 80047a6:	401a      	ands	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d10e      	bne.n	80047d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	23f8      	movs	r3, #248	@ 0xf8
 80047b6:	039b      	lsls	r3, r3, #14
 80047b8:	401a      	ands	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047be:	429a      	cmp	r2, r3
 80047c0:	d106      	bne.n	80047d0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	0f5b      	lsrs	r3, r3, #29
 80047c6:	075a      	lsls	r2, r3, #29
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b008      	add	sp, #32
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40007000 	.word	0x40007000
 80047e8:	00001388 	.word	0x00001388
 80047ec:	efffffff 	.word	0xefffffff
 80047f0:	feffffff 	.word	0xfeffffff
 80047f4:	1fc1808c 	.word	0x1fc1808c
 80047f8:	effefffc 	.word	0xeffefffc

080047fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0e9      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b76      	ldr	r3, [pc, #472]	@ (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2207      	movs	r2, #7
 8004816:	4013      	ands	r3, r2
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d91e      	bls.n	800485c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b73      	ldr	r3, [pc, #460]	@ (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2207      	movs	r2, #7
 8004824:	4393      	bics	r3, r2
 8004826:	0019      	movs	r1, r3
 8004828:	4b70      	ldr	r3, [pc, #448]	@ (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004830:	f7fe fbc8 	bl	8002fc4 <HAL_GetTick>
 8004834:	0003      	movs	r3, r0
 8004836:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004838:	e009      	b.n	800484e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800483a:	f7fe fbc3 	bl	8002fc4 <HAL_GetTick>
 800483e:	0002      	movs	r2, r0
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	4a6a      	ldr	r2, [pc, #424]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0ca      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800484e:	4b67      	ldr	r3, [pc, #412]	@ (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2207      	movs	r2, #7
 8004854:	4013      	ands	r3, r2
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d1ee      	bne.n	800483a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2202      	movs	r2, #2
 8004862:	4013      	ands	r3, r2
 8004864:	d015      	beq.n	8004892 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2204      	movs	r2, #4
 800486c:	4013      	ands	r3, r2
 800486e:	d006      	beq.n	800487e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004870:	4b60      	ldr	r3, [pc, #384]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	4b5f      	ldr	r3, [pc, #380]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004876:	21e0      	movs	r1, #224	@ 0xe0
 8004878:	01c9      	lsls	r1, r1, #7
 800487a:	430a      	orrs	r2, r1
 800487c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487e:	4b5d      	ldr	r3, [pc, #372]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	4a5d      	ldr	r2, [pc, #372]	@ (80049f8 <HAL_RCC_ClockConfig+0x1fc>)
 8004884:	4013      	ands	r3, r2
 8004886:	0019      	movs	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	4b59      	ldr	r3, [pc, #356]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2201      	movs	r2, #1
 8004898:	4013      	ands	r3, r2
 800489a:	d057      	beq.n	800494c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d107      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a4:	4b53      	ldr	r3, [pc, #332]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2380      	movs	r3, #128	@ 0x80
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	4013      	ands	r3, r2
 80048ae:	d12b      	bne.n	8004908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e097      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d107      	bne.n	80048cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048bc:	4b4d      	ldr	r3, [pc, #308]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2380      	movs	r3, #128	@ 0x80
 80048c2:	049b      	lsls	r3, r3, #18
 80048c4:	4013      	ands	r3, r2
 80048c6:	d11f      	bne.n	8004908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e08b      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d107      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d4:	4b47      	ldr	r3, [pc, #284]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	2380      	movs	r3, #128	@ 0x80
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4013      	ands	r3, r2
 80048de:	d113      	bne.n	8004908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e07f      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ec:	4b41      	ldr	r3, [pc, #260]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 80048ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f0:	2202      	movs	r2, #2
 80048f2:	4013      	ands	r3, r2
 80048f4:	d108      	bne.n	8004908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e074      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fa:	4b3e      	ldr	r3, [pc, #248]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 80048fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fe:	2202      	movs	r2, #2
 8004900:	4013      	ands	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e06d      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004908:	4b3a      	ldr	r3, [pc, #232]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2207      	movs	r2, #7
 800490e:	4393      	bics	r3, r2
 8004910:	0019      	movs	r1, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	4b37      	ldr	r3, [pc, #220]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004918:	430a      	orrs	r2, r1
 800491a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491c:	f7fe fb52 	bl	8002fc4 <HAL_GetTick>
 8004920:	0003      	movs	r3, r0
 8004922:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004924:	e009      	b.n	800493a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004926:	f7fe fb4d 	bl	8002fc4 <HAL_GetTick>
 800492a:	0002      	movs	r2, r0
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	4a2f      	ldr	r2, [pc, #188]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e054      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b2e      	ldr	r3, [pc, #184]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2238      	movs	r2, #56	@ 0x38
 8004940:	401a      	ands	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	429a      	cmp	r2, r3
 800494a:	d1ec      	bne.n	8004926 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b27      	ldr	r3, [pc, #156]	@ (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2207      	movs	r2, #7
 8004952:	4013      	ands	r3, r2
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d21e      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2207      	movs	r2, #7
 8004960:	4393      	bics	r3, r2
 8004962:	0019      	movs	r1, r3
 8004964:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800496c:	f7fe fb2a 	bl	8002fc4 <HAL_GetTick>
 8004970:	0003      	movs	r3, r0
 8004972:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004974:	e009      	b.n	800498a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004976:	f7fe fb25 	bl	8002fc4 <HAL_GetTick>
 800497a:	0002      	movs	r2, r0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e02c      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800498a:	4b18      	ldr	r3, [pc, #96]	@ (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2207      	movs	r2, #7
 8004990:	4013      	ands	r3, r2
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d1ee      	bne.n	8004976 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2204      	movs	r2, #4
 800499e:	4013      	ands	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049a2:	4b14      	ldr	r3, [pc, #80]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	4a15      	ldr	r2, [pc, #84]	@ (80049fc <HAL_RCC_ClockConfig+0x200>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	0019      	movs	r1, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 80049b2:	430a      	orrs	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049b6:	f000 f829 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80049ba:	0001      	movs	r1, r0
 80049bc:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	220f      	movs	r2, #15
 80049c4:	401a      	ands	r2, r3
 80049c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a00 <HAL_RCC_ClockConfig+0x204>)
 80049c8:	0092      	lsls	r2, r2, #2
 80049ca:	58d3      	ldr	r3, [r2, r3]
 80049cc:	221f      	movs	r2, #31
 80049ce:	4013      	ands	r3, r2
 80049d0:	000a      	movs	r2, r1
 80049d2:	40da      	lsrs	r2, r3
 80049d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <HAL_RCC_ClockConfig+0x208>)
 80049d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a08 <HAL_RCC_ClockConfig+0x20c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0018      	movs	r0, r3
 80049de:	f7fe fa95 	bl	8002f0c <HAL_InitTick>
 80049e2:	0003      	movs	r3, r0
}
 80049e4:	0018      	movs	r0, r3
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b004      	add	sp, #16
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40022000 	.word	0x40022000
 80049f0:	00001388 	.word	0x00001388
 80049f4:	40021000 	.word	0x40021000
 80049f8:	fffff0ff 	.word	0xfffff0ff
 80049fc:	ffff8fff 	.word	0xffff8fff
 8004a00:	0800673c 	.word	0x0800673c
 8004a04:	20000004 	.word	0x20000004
 8004a08:	20000008 	.word	0x20000008

08004a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a12:	4b3c      	ldr	r3, [pc, #240]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2238      	movs	r2, #56	@ 0x38
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d10f      	bne.n	8004a3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a1c:	4b39      	ldr	r3, [pc, #228]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0adb      	lsrs	r3, r3, #11
 8004a22:	2207      	movs	r2, #7
 8004a24:	4013      	ands	r3, r2
 8004a26:	2201      	movs	r2, #1
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	0013      	movs	r3, r2
 8004a2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	4835      	ldr	r0, [pc, #212]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a32:	f7fb fb77 	bl	8000124 <__udivsi3>
 8004a36:	0003      	movs	r3, r0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e05d      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a3c:	4b31      	ldr	r3, [pc, #196]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2238      	movs	r2, #56	@ 0x38
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d102      	bne.n	8004a4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a48:	4b30      	ldr	r3, [pc, #192]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x100>)
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	e054      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2238      	movs	r2, #56	@ 0x38
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d138      	bne.n	8004acc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2203      	movs	r2, #3
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a64:	4b27      	ldr	r3, [pc, #156]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	2207      	movs	r2, #7
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d10d      	bne.n	8004a94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	4824      	ldr	r0, [pc, #144]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x100>)
 8004a7c:	f7fb fb52 	bl	8000124 <__udivsi3>
 8004a80:	0003      	movs	r3, r0
 8004a82:	0019      	movs	r1, r3
 8004a84:	4b1f      	ldr	r3, [pc, #124]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	227f      	movs	r2, #127	@ 0x7f
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	434b      	muls	r3, r1
 8004a90:	617b      	str	r3, [r7, #20]
        break;
 8004a92:	e00d      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	481c      	ldr	r0, [pc, #112]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a98:	f7fb fb44 	bl	8000124 <__udivsi3>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	4b18      	ldr	r3, [pc, #96]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	227f      	movs	r2, #127	@ 0x7f
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	434b      	muls	r3, r1
 8004aac:	617b      	str	r3, [r7, #20]
        break;
 8004aae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ab0:	4b14      	ldr	r3, [pc, #80]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	0f5b      	lsrs	r3, r3, #29
 8004ab6:	2207      	movs	r2, #7
 8004ab8:	4013      	ands	r3, r2
 8004aba:	3301      	adds	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	6978      	ldr	r0, [r7, #20]
 8004ac2:	f7fb fb2f 	bl	8000124 <__udivsi3>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	e015      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004acc:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2238      	movs	r2, #56	@ 0x38
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d103      	bne.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004ad8:	2380      	movs	r3, #128	@ 0x80
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	e00b      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004ae0:	4b08      	ldr	r3, [pc, #32]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2238      	movs	r2, #56	@ 0x38
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b18      	cmp	r3, #24
 8004aea:	d103      	bne.n	8004af4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004aec:	23fa      	movs	r3, #250	@ 0xfa
 8004aee:	01db      	lsls	r3, r3, #7
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	e001      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004af8:	693b      	ldr	r3, [r7, #16]
}
 8004afa:	0018      	movs	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b006      	add	sp, #24
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	40021000 	.word	0x40021000
 8004b08:	00f42400 	.word	0x00f42400
 8004b0c:	007a1200 	.word	0x007a1200

08004b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b14:	4b02      	ldr	r3, [pc, #8]	@ (8004b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	20000004 	.word	0x20000004

08004b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b24:	b5b0      	push	{r4, r5, r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b28:	f7ff fff2 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b2c:	0004      	movs	r4, r0
 8004b2e:	f7ff fb49 	bl	80041c4 <LL_RCC_GetAPB1Prescaler>
 8004b32:	0003      	movs	r3, r0
 8004b34:	0b1a      	lsrs	r2, r3, #12
 8004b36:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b38:	0092      	lsls	r2, r2, #2
 8004b3a:	58d3      	ldr	r3, [r2, r3]
 8004b3c:	221f      	movs	r2, #31
 8004b3e:	4013      	ands	r3, r2
 8004b40:	40dc      	lsrs	r4, r3
 8004b42:	0023      	movs	r3, r4
}
 8004b44:	0018      	movs	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bdb0      	pop	{r4, r5, r7, pc}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	0800677c 	.word	0x0800677c

08004b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e04a      	b.n	8004bf8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	223d      	movs	r2, #61	@ 0x3d
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	223c      	movs	r2, #60	@ 0x3c
 8004b72:	2100      	movs	r1, #0
 8004b74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7fe f8bd 	bl	8002cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	223d      	movs	r2, #61	@ 0x3d
 8004b82:	2102      	movs	r1, #2
 8004b84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	0019      	movs	r1, r3
 8004b90:	0010      	movs	r0, r2
 8004b92:	f000 f959 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2248      	movs	r2, #72	@ 0x48
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	223e      	movs	r2, #62	@ 0x3e
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	223f      	movs	r2, #63	@ 0x3f
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2240      	movs	r2, #64	@ 0x40
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2241      	movs	r2, #65	@ 0x41
 8004bba:	2101      	movs	r1, #1
 8004bbc:	5499      	strb	r1, [r3, r2]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2242      	movs	r2, #66	@ 0x42
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2243      	movs	r2, #67	@ 0x43
 8004bca:	2101      	movs	r1, #1
 8004bcc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2244      	movs	r2, #68	@ 0x44
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2245      	movs	r2, #69	@ 0x45
 8004bda:	2101      	movs	r1, #1
 8004bdc:	5499      	strb	r1, [r3, r2]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2246      	movs	r2, #70	@ 0x46
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2247      	movs	r2, #71	@ 0x47
 8004bea:	2101      	movs	r1, #1
 8004bec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	223d      	movs	r2, #61	@ 0x3d
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b002      	add	sp, #8
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	223d      	movs	r2, #61	@ 0x3d
 8004c0c:	5c9b      	ldrb	r3, [r3, r2]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e034      	b.n	8004c82 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	223d      	movs	r2, #61	@ 0x3d
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a19      	ldr	r2, [pc, #100]	@ (8004c8c <HAL_TIM_Base_Start+0x8c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d009      	beq.n	8004c3e <HAL_TIM_Base_Start+0x3e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a18      	ldr	r2, [pc, #96]	@ (8004c90 <HAL_TIM_Base_Start+0x90>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_Base_Start+0x3e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a16      	ldr	r2, [pc, #88]	@ (8004c94 <HAL_TIM_Base_Start+0x94>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d116      	bne.n	8004c6c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a14      	ldr	r2, [pc, #80]	@ (8004c98 <HAL_TIM_Base_Start+0x98>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d016      	beq.n	8004c7e <HAL_TIM_Base_Start+0x7e>
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	2380      	movs	r3, #128	@ 0x80
 8004c54:	025b      	lsls	r3, r3, #9
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d011      	beq.n	8004c7e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2101      	movs	r1, #1
 8004c66:	430a      	orrs	r2, r1
 8004c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6a:	e008      	b.n	8004c7e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2101      	movs	r1, #1
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e000      	b.n	8004c80 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	0018      	movs	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b004      	add	sp, #16
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	00010007 	.word	0x00010007

08004c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	230f      	movs	r3, #15
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	223c      	movs	r2, #60	@ 0x3c
 8004cb2:	5c9b      	ldrb	r3, [r3, r2]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_TIM_ConfigClockSource+0x20>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e0bc      	b.n	8004e36 <HAL_TIM_ConfigClockSource+0x19a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	223c      	movs	r2, #60	@ 0x3c
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	223d      	movs	r2, #61	@ 0x3d
 8004cc8:	2102      	movs	r1, #2
 8004cca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8004e40 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4a59      	ldr	r2, [pc, #356]	@ (8004e44 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2280      	movs	r2, #128	@ 0x80
 8004cf2:	0192      	lsls	r2, r2, #6
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d040      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0xde>
 8004cf8:	2280      	movs	r2, #128	@ 0x80
 8004cfa:	0192      	lsls	r2, r2, #6
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d900      	bls.n	8004d02 <HAL_TIM_ConfigClockSource+0x66>
 8004d00:	e088      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
 8004d02:	2280      	movs	r2, #128	@ 0x80
 8004d04:	0152      	lsls	r2, r2, #5
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d100      	bne.n	8004d0c <HAL_TIM_ConfigClockSource+0x70>
 8004d0a:	e088      	b.n	8004e1e <HAL_TIM_ConfigClockSource+0x182>
 8004d0c:	2280      	movs	r2, #128	@ 0x80
 8004d0e:	0152      	lsls	r2, r2, #5
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d900      	bls.n	8004d16 <HAL_TIM_ConfigClockSource+0x7a>
 8004d14:	e07e      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
 8004d16:	2b70      	cmp	r3, #112	@ 0x70
 8004d18:	d018      	beq.n	8004d4c <HAL_TIM_ConfigClockSource+0xb0>
 8004d1a:	d900      	bls.n	8004d1e <HAL_TIM_ConfigClockSource+0x82>
 8004d1c:	e07a      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
 8004d1e:	2b60      	cmp	r3, #96	@ 0x60
 8004d20:	d04f      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x126>
 8004d22:	d900      	bls.n	8004d26 <HAL_TIM_ConfigClockSource+0x8a>
 8004d24:	e076      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
 8004d26:	2b50      	cmp	r3, #80	@ 0x50
 8004d28:	d03b      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x106>
 8004d2a:	d900      	bls.n	8004d2e <HAL_TIM_ConfigClockSource+0x92>
 8004d2c:	e072      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
 8004d2e:	2b40      	cmp	r3, #64	@ 0x40
 8004d30:	d057      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x146>
 8004d32:	d900      	bls.n	8004d36 <HAL_TIM_ConfigClockSource+0x9a>
 8004d34:	e06e      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
 8004d36:	2b30      	cmp	r3, #48	@ 0x30
 8004d38:	d063      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x166>
 8004d3a:	d86b      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d060      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x166>
 8004d40:	d868      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d05d      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x166>
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d05b      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x166>
 8004d4a:	e063      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d5c:	f000 f974 	bl	8005048 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2277      	movs	r2, #119	@ 0x77
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	609a      	str	r2, [r3, #8]
      break;
 8004d78:	e052      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d8a:	f000 f95d 	bl	8005048 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2180      	movs	r1, #128	@ 0x80
 8004d9a:	01c9      	lsls	r1, r1, #7
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
      break;
 8004da0:	e03e      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	001a      	movs	r2, r3
 8004db0:	f000 f8ce 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2150      	movs	r1, #80	@ 0x50
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 f928 	bl	8005010 <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e02e      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dce:	001a      	movs	r2, r3
 8004dd0:	f000 f8ec 	bl	8004fac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2160      	movs	r1, #96	@ 0x60
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 f918 	bl	8005010 <TIM_ITRx_SetConfig>
      break;
 8004de0:	e01e      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	001a      	movs	r2, r3
 8004df0:	f000 f8ae 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2140      	movs	r1, #64	@ 0x40
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 f908 	bl	8005010 <TIM_ITRx_SetConfig>
      break;
 8004e00:	e00e      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	0010      	movs	r0, r2
 8004e0e:	f000 f8ff 	bl	8005010 <TIM_ITRx_SetConfig>
      break;
 8004e12:	e005      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004e14:	230f      	movs	r3, #15
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	2201      	movs	r2, #1
 8004e1a:	701a      	strb	r2, [r3, #0]
      break;
 8004e1c:	e000      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004e1e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	223d      	movs	r2, #61	@ 0x3d
 8004e24:	2101      	movs	r1, #1
 8004e26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	223c      	movs	r2, #60	@ 0x3c
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	5499      	strb	r1, [r3, r2]

  return status;
 8004e30:	230f      	movs	r3, #15
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	781b      	ldrb	r3, [r3, #0]
}
 8004e36:	0018      	movs	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b004      	add	sp, #16
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	ffceff88 	.word	0xffceff88
 8004e44:	ffff00ff 	.word	0xffff00ff

08004e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a36      	ldr	r2, [pc, #216]	@ (8004f34 <TIM_Base_SetConfig+0xec>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0x20>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a35      	ldr	r2, [pc, #212]	@ (8004f38 <TIM_Base_SetConfig+0xf0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2270      	movs	r2, #112	@ 0x70
 8004e6c:	4393      	bics	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004f34 <TIM_Base_SetConfig+0xec>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <TIM_Base_SetConfig+0x62>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	@ (8004f38 <TIM_Base_SetConfig+0xf0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00f      	beq.n	8004eaa <TIM_Base_SetConfig+0x62>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8004f3c <TIM_Base_SetConfig+0xf4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_Base_SetConfig+0x62>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2a      	ldr	r2, [pc, #168]	@ (8004f40 <TIM_Base_SetConfig+0xf8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_Base_SetConfig+0x62>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a29      	ldr	r2, [pc, #164]	@ (8004f44 <TIM_Base_SetConfig+0xfc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_Base_SetConfig+0x62>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a28      	ldr	r2, [pc, #160]	@ (8004f48 <TIM_Base_SetConfig+0x100>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a27      	ldr	r2, [pc, #156]	@ (8004f4c <TIM_Base_SetConfig+0x104>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2280      	movs	r2, #128	@ 0x80
 8004ec0:	4393      	bics	r3, r2
 8004ec2:	001a      	movs	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a13      	ldr	r2, [pc, #76]	@ (8004f34 <TIM_Base_SetConfig+0xec>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0xba>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a14      	ldr	r2, [pc, #80]	@ (8004f40 <TIM_Base_SetConfig+0xf8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0xba>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a13      	ldr	r2, [pc, #76]	@ (8004f44 <TIM_Base_SetConfig+0xfc>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0xba>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a12      	ldr	r2, [pc, #72]	@ (8004f48 <TIM_Base_SetConfig+0x100>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d103      	bne.n	8004f0a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2201      	movs	r2, #1
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d106      	bne.n	8004f2a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2201      	movs	r2, #1
 8004f22:	4393      	bics	r3, r2
 8004f24:	001a      	movs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	611a      	str	r2, [r3, #16]
  }
}
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b004      	add	sp, #16
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	46c0      	nop			@ (mov r8, r8)
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40002000 	.word	0x40002000
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800
 8004f4c:	fffffcff 	.word	0xfffffcff

08004f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	2201      	movs	r2, #1
 8004f68:	4393      	bics	r3, r2
 8004f6a:	001a      	movs	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	22f0      	movs	r2, #240	@ 0xf0
 8004f7a:	4393      	bics	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	220a      	movs	r2, #10
 8004f8c:	4393      	bics	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	621a      	str	r2, [r3, #32]
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b006      	add	sp, #24
 8004faa:	bd80      	pop	{r7, pc}

08004fac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	2210      	movs	r2, #16
 8004fc4:	4393      	bics	r3, r2
 8004fc6:	001a      	movs	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800500c <TIM_TI2_ConfigInputStage+0x60>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	031b      	lsls	r3, r3, #12
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	22a0      	movs	r2, #160	@ 0xa0
 8004fe8:	4393      	bics	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	46c0      	nop			@ (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b006      	add	sp, #24
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	ffff0fff 	.word	0xffff0fff

08005010 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a08      	ldr	r2, [pc, #32]	@ (8005044 <TIM_ITRx_SetConfig+0x34>)
 8005024:	4013      	ands	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	2207      	movs	r2, #7
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	609a      	str	r2, [r3, #8]
}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b004      	add	sp, #16
 8005040:	bd80      	pop	{r7, pc}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	ffcfff8f 	.word	0xffcfff8f

08005048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4a09      	ldr	r2, [pc, #36]	@ (8005084 <TIM_ETR_SetConfig+0x3c>)
 8005060:	4013      	ands	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	021a      	lsls	r2, r3, #8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	431a      	orrs	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b006      	add	sp, #24
 8005082:	bd80      	pop	{r7, pc}
 8005084:	ffff00ff 	.word	0xffff00ff

08005088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	223c      	movs	r2, #60	@ 0x3c
 8005096:	5c9b      	ldrb	r3, [r3, r2]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800509c:	2302      	movs	r3, #2
 800509e:	e04f      	b.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	223c      	movs	r2, #60	@ 0x3c
 80050a4:	2101      	movs	r1, #1
 80050a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	223d      	movs	r2, #61	@ 0x3d
 80050ac:	2102      	movs	r1, #2
 80050ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a20      	ldr	r2, [pc, #128]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d108      	bne.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	@ (800514c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2270      	movs	r2, #112	@ 0x70
 80050e0:	4393      	bics	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a13      	ldr	r2, [pc, #76]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a12      	ldr	r2, [pc, #72]	@ (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a11      	ldr	r2, [pc, #68]	@ (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10c      	bne.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2280      	movs	r2, #128	@ 0x80
 8005118:	4393      	bics	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	4313      	orrs	r3, r2
 8005124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	223d      	movs	r2, #61	@ 0x3d
 8005132:	2101      	movs	r1, #1
 8005134:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	223c      	movs	r2, #60	@ 0x3c
 800513a:	2100      	movs	r1, #0
 800513c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b004      	add	sp, #16
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40012c00 	.word	0x40012c00
 800514c:	ff0fffff 	.word	0xff0fffff
 8005150:	40000400 	.word	0x40000400
 8005154:	40014000 	.word	0x40014000

08005158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e046      	b.n	80051f8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2288      	movs	r2, #136	@ 0x88
 800516e:	589b      	ldr	r3, [r3, r2]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d107      	bne.n	8005184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2284      	movs	r2, #132	@ 0x84
 8005178:	2100      	movs	r1, #0
 800517a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	0018      	movs	r0, r3
 8005180:	f7fd fdda 	bl	8002d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2288      	movs	r2, #136	@ 0x88
 8005188:	2124      	movs	r1, #36	@ 0x24
 800518a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2101      	movs	r1, #1
 8005198:	438a      	bics	r2, r1
 800519a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	0018      	movs	r0, r3
 80051a8:	f000 fa74 	bl	8005694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	0018      	movs	r0, r3
 80051b0:	f000 f8cc 	bl	800534c <UART_SetConfig>
 80051b4:	0003      	movs	r3, r0
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e01c      	b.n	80051f8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	490d      	ldr	r1, [pc, #52]	@ (8005200 <HAL_UART_Init+0xa8>)
 80051ca:	400a      	ands	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	212a      	movs	r1, #42	@ 0x2a
 80051da:	438a      	bics	r2, r1
 80051dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2101      	movs	r1, #1
 80051ea:	430a      	orrs	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 fb03 	bl	80057fc <UART_CheckIdleState>
 80051f6:	0003      	movs	r3, r0
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b002      	add	sp, #8
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	ffffb7ff 	.word	0xffffb7ff

08005204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08a      	sub	sp, #40	@ 0x28
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	1dbb      	adds	r3, r7, #6
 8005212:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2288      	movs	r2, #136	@ 0x88
 8005218:	589b      	ldr	r3, [r3, r2]
 800521a:	2b20      	cmp	r3, #32
 800521c:	d000      	beq.n	8005220 <HAL_UART_Transmit+0x1c>
 800521e:	e090      	b.n	8005342 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_UART_Transmit+0x2a>
 8005226:	1dbb      	adds	r3, r7, #6
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e088      	b.n	8005344 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	2380      	movs	r3, #128	@ 0x80
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	429a      	cmp	r2, r3
 800523c:	d109      	bne.n	8005252 <HAL_UART_Transmit+0x4e>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d105      	bne.n	8005252 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2201      	movs	r2, #1
 800524a:	4013      	ands	r3, r2
 800524c:	d001      	beq.n	8005252 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e078      	b.n	8005344 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2290      	movs	r2, #144	@ 0x90
 8005256:	2100      	movs	r1, #0
 8005258:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2288      	movs	r2, #136	@ 0x88
 800525e:	2121      	movs	r1, #33	@ 0x21
 8005260:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005262:	f7fd feaf 	bl	8002fc4 <HAL_GetTick>
 8005266:	0003      	movs	r3, r0
 8005268:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1dba      	adds	r2, r7, #6
 800526e:	2154      	movs	r1, #84	@ 0x54
 8005270:	8812      	ldrh	r2, [r2, #0]
 8005272:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1dba      	adds	r2, r7, #6
 8005278:	2156      	movs	r1, #86	@ 0x56
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	015b      	lsls	r3, r3, #5
 8005286:	429a      	cmp	r2, r3
 8005288:	d108      	bne.n	800529c <HAL_UART_Transmit+0x98>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e003      	b.n	80052a4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a4:	e030      	b.n	8005308 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	0013      	movs	r3, r2
 80052b0:	2200      	movs	r2, #0
 80052b2:	2180      	movs	r1, #128	@ 0x80
 80052b4:	f000 fb4c 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 80052b8:	1e03      	subs	r3, r0, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2288      	movs	r2, #136	@ 0x88
 80052c0:	2120      	movs	r1, #32
 80052c2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e03d      	b.n	8005344 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	001a      	movs	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	05d2      	lsls	r2, r2, #23
 80052da:	0dd2      	lsrs	r2, r2, #23
 80052dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3302      	adds	r3, #2
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e007      	b.n	80052f6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2256      	movs	r2, #86	@ 0x56
 80052fa:	5a9b      	ldrh	r3, [r3, r2]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b299      	uxth	r1, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2256      	movs	r2, #86	@ 0x56
 8005306:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2256      	movs	r2, #86	@ 0x56
 800530c:	5a9b      	ldrh	r3, [r3, r2]
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1c8      	bne.n	80052a6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	0013      	movs	r3, r2
 800531e:	2200      	movs	r2, #0
 8005320:	2140      	movs	r1, #64	@ 0x40
 8005322:	f000 fb15 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 8005326:	1e03      	subs	r3, r0, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2288      	movs	r2, #136	@ 0x88
 800532e:	2120      	movs	r1, #32
 8005330:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e006      	b.n	8005344 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2288      	movs	r2, #136	@ 0x88
 800533a:	2120      	movs	r1, #32
 800533c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
  }
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b008      	add	sp, #32
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005354:	231a      	movs	r3, #26
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	4313      	orrs	r3, r2
 8005372:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4abc      	ldr	r2, [pc, #752]	@ (800566c <UART_SetConfig+0x320>)
 800537c:	4013      	ands	r3, r2
 800537e:	0019      	movs	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4ab7      	ldr	r2, [pc, #732]	@ (8005670 <UART_SetConfig+0x324>)
 8005392:	4013      	ands	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4aae      	ldr	r2, [pc, #696]	@ (8005674 <UART_SetConfig+0x328>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	0019      	movs	r1, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	220f      	movs	r2, #15
 80053d0:	4393      	bics	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4aa4      	ldr	r2, [pc, #656]	@ (8005678 <UART_SetConfig+0x32c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d127      	bne.n	800543a <UART_SetConfig+0xee>
 80053ea:	4ba4      	ldr	r3, [pc, #656]	@ (800567c <UART_SetConfig+0x330>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ee:	2203      	movs	r2, #3
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d017      	beq.n	8005426 <UART_SetConfig+0xda>
 80053f6:	d81b      	bhi.n	8005430 <UART_SetConfig+0xe4>
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d00a      	beq.n	8005412 <UART_SetConfig+0xc6>
 80053fc:	d818      	bhi.n	8005430 <UART_SetConfig+0xe4>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <UART_SetConfig+0xbc>
 8005402:	2b01      	cmp	r3, #1
 8005404:	d00a      	beq.n	800541c <UART_SetConfig+0xd0>
 8005406:	e013      	b.n	8005430 <UART_SetConfig+0xe4>
 8005408:	231b      	movs	r3, #27
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e058      	b.n	80054c4 <UART_SetConfig+0x178>
 8005412:	231b      	movs	r3, #27
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2202      	movs	r2, #2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	e053      	b.n	80054c4 <UART_SetConfig+0x178>
 800541c:	231b      	movs	r3, #27
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2204      	movs	r2, #4
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	e04e      	b.n	80054c4 <UART_SetConfig+0x178>
 8005426:	231b      	movs	r3, #27
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2208      	movs	r2, #8
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e049      	b.n	80054c4 <UART_SetConfig+0x178>
 8005430:	231b      	movs	r3, #27
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	2210      	movs	r2, #16
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	e044      	b.n	80054c4 <UART_SetConfig+0x178>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a90      	ldr	r2, [pc, #576]	@ (8005680 <UART_SetConfig+0x334>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d127      	bne.n	8005494 <UART_SetConfig+0x148>
 8005444:	4b8d      	ldr	r3, [pc, #564]	@ (800567c <UART_SetConfig+0x330>)
 8005446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005448:	220c      	movs	r2, #12
 800544a:	4013      	ands	r3, r2
 800544c:	2b0c      	cmp	r3, #12
 800544e:	d017      	beq.n	8005480 <UART_SetConfig+0x134>
 8005450:	d81b      	bhi.n	800548a <UART_SetConfig+0x13e>
 8005452:	2b08      	cmp	r3, #8
 8005454:	d00a      	beq.n	800546c <UART_SetConfig+0x120>
 8005456:	d818      	bhi.n	800548a <UART_SetConfig+0x13e>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <UART_SetConfig+0x116>
 800545c:	2b04      	cmp	r3, #4
 800545e:	d00a      	beq.n	8005476 <UART_SetConfig+0x12a>
 8005460:	e013      	b.n	800548a <UART_SetConfig+0x13e>
 8005462:	231b      	movs	r3, #27
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e02b      	b.n	80054c4 <UART_SetConfig+0x178>
 800546c:	231b      	movs	r3, #27
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	2202      	movs	r2, #2
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e026      	b.n	80054c4 <UART_SetConfig+0x178>
 8005476:	231b      	movs	r3, #27
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2204      	movs	r2, #4
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e021      	b.n	80054c4 <UART_SetConfig+0x178>
 8005480:	231b      	movs	r3, #27
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	2208      	movs	r2, #8
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	e01c      	b.n	80054c4 <UART_SetConfig+0x178>
 800548a:	231b      	movs	r3, #27
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2210      	movs	r2, #16
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	e017      	b.n	80054c4 <UART_SetConfig+0x178>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a7a      	ldr	r2, [pc, #488]	@ (8005684 <UART_SetConfig+0x338>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d104      	bne.n	80054a8 <UART_SetConfig+0x15c>
 800549e:	231b      	movs	r3, #27
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e00d      	b.n	80054c4 <UART_SetConfig+0x178>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a76      	ldr	r2, [pc, #472]	@ (8005688 <UART_SetConfig+0x33c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d104      	bne.n	80054bc <UART_SetConfig+0x170>
 80054b2:	231b      	movs	r3, #27
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e003      	b.n	80054c4 <UART_SetConfig+0x178>
 80054bc:	231b      	movs	r3, #27
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	2210      	movs	r2, #16
 80054c2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	2380      	movs	r3, #128	@ 0x80
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d000      	beq.n	80054d2 <UART_SetConfig+0x186>
 80054d0:	e065      	b.n	800559e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80054d2:	231b      	movs	r3, #27
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d015      	beq.n	8005508 <UART_SetConfig+0x1bc>
 80054dc:	dc18      	bgt.n	8005510 <UART_SetConfig+0x1c4>
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d00d      	beq.n	80054fe <UART_SetConfig+0x1b2>
 80054e2:	dc15      	bgt.n	8005510 <UART_SetConfig+0x1c4>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <UART_SetConfig+0x1a2>
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d005      	beq.n	80054f8 <UART_SetConfig+0x1ac>
 80054ec:	e010      	b.n	8005510 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ee:	f7ff fb19 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 80054f2:	0003      	movs	r3, r0
 80054f4:	617b      	str	r3, [r7, #20]
        break;
 80054f6:	e012      	b.n	800551e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f8:	4b64      	ldr	r3, [pc, #400]	@ (800568c <UART_SetConfig+0x340>)
 80054fa:	617b      	str	r3, [r7, #20]
        break;
 80054fc:	e00f      	b.n	800551e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fe:	f7ff fa85 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 8005502:	0003      	movs	r3, r0
 8005504:	617b      	str	r3, [r7, #20]
        break;
 8005506:	e00a      	b.n	800551e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005508:	2380      	movs	r3, #128	@ 0x80
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	617b      	str	r3, [r7, #20]
        break;
 800550e:	e006      	b.n	800551e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005514:	231a      	movs	r3, #26
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
        break;
 800551c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d100      	bne.n	8005526 <UART_SetConfig+0x1da>
 8005524:	e08d      	b.n	8005642 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800552a:	4b59      	ldr	r3, [pc, #356]	@ (8005690 <UART_SetConfig+0x344>)
 800552c:	0052      	lsls	r2, r2, #1
 800552e:	5ad3      	ldrh	r3, [r2, r3]
 8005530:	0019      	movs	r1, r3
 8005532:	6978      	ldr	r0, [r7, #20]
 8005534:	f7fa fdf6 	bl	8000124 <__udivsi3>
 8005538:	0003      	movs	r3, r0
 800553a:	005a      	lsls	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	18d2      	adds	r2, r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	0019      	movs	r1, r3
 800554a:	0010      	movs	r0, r2
 800554c:	f7fa fdea 	bl	8000124 <__udivsi3>
 8005550:	0003      	movs	r3, r0
 8005552:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2b0f      	cmp	r3, #15
 8005558:	d91c      	bls.n	8005594 <UART_SetConfig+0x248>
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	2380      	movs	r3, #128	@ 0x80
 800555e:	025b      	lsls	r3, r3, #9
 8005560:	429a      	cmp	r2, r3
 8005562:	d217      	bcs.n	8005594 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	b29a      	uxth	r2, r3
 8005568:	200e      	movs	r0, #14
 800556a:	183b      	adds	r3, r7, r0
 800556c:	210f      	movs	r1, #15
 800556e:	438a      	bics	r2, r1
 8005570:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	b29b      	uxth	r3, r3
 8005578:	2207      	movs	r2, #7
 800557a:	4013      	ands	r3, r2
 800557c:	b299      	uxth	r1, r3
 800557e:	183b      	adds	r3, r7, r0
 8005580:	183a      	adds	r2, r7, r0
 8005582:	8812      	ldrh	r2, [r2, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	183a      	adds	r2, r7, r0
 800558e:	8812      	ldrh	r2, [r2, #0]
 8005590:	60da      	str	r2, [r3, #12]
 8005592:	e056      	b.n	8005642 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005594:	231a      	movs	r3, #26
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	2201      	movs	r2, #1
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e051      	b.n	8005642 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800559e:	231b      	movs	r3, #27
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d015      	beq.n	80055d4 <UART_SetConfig+0x288>
 80055a8:	dc18      	bgt.n	80055dc <UART_SetConfig+0x290>
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d00d      	beq.n	80055ca <UART_SetConfig+0x27e>
 80055ae:	dc15      	bgt.n	80055dc <UART_SetConfig+0x290>
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <UART_SetConfig+0x26e>
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d005      	beq.n	80055c4 <UART_SetConfig+0x278>
 80055b8:	e010      	b.n	80055dc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ba:	f7ff fab3 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 80055be:	0003      	movs	r3, r0
 80055c0:	617b      	str	r3, [r7, #20]
        break;
 80055c2:	e012      	b.n	80055ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c4:	4b31      	ldr	r3, [pc, #196]	@ (800568c <UART_SetConfig+0x340>)
 80055c6:	617b      	str	r3, [r7, #20]
        break;
 80055c8:	e00f      	b.n	80055ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ca:	f7ff fa1f 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80055ce:	0003      	movs	r3, r0
 80055d0:	617b      	str	r3, [r7, #20]
        break;
 80055d2:	e00a      	b.n	80055ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d4:	2380      	movs	r3, #128	@ 0x80
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	617b      	str	r3, [r7, #20]
        break;
 80055da:	e006      	b.n	80055ea <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055e0:	231a      	movs	r3, #26
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	2201      	movs	r2, #1
 80055e6:	701a      	strb	r2, [r3, #0]
        break;
 80055e8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d028      	beq.n	8005642 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055f4:	4b26      	ldr	r3, [pc, #152]	@ (8005690 <UART_SetConfig+0x344>)
 80055f6:	0052      	lsls	r2, r2, #1
 80055f8:	5ad3      	ldrh	r3, [r2, r3]
 80055fa:	0019      	movs	r1, r3
 80055fc:	6978      	ldr	r0, [r7, #20]
 80055fe:	f7fa fd91 	bl	8000124 <__udivsi3>
 8005602:	0003      	movs	r3, r0
 8005604:	001a      	movs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	18d2      	adds	r2, r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	0019      	movs	r1, r3
 8005614:	0010      	movs	r0, r2
 8005616:	f7fa fd85 	bl	8000124 <__udivsi3>
 800561a:	0003      	movs	r3, r0
 800561c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b0f      	cmp	r3, #15
 8005622:	d90a      	bls.n	800563a <UART_SetConfig+0x2ee>
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	2380      	movs	r3, #128	@ 0x80
 8005628:	025b      	lsls	r3, r3, #9
 800562a:	429a      	cmp	r2, r3
 800562c:	d205      	bcs.n	800563a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	b29a      	uxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60da      	str	r2, [r3, #12]
 8005638:	e003      	b.n	8005642 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800563a:	231a      	movs	r3, #26
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	2201      	movs	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	226a      	movs	r2, #106	@ 0x6a
 8005646:	2101      	movs	r1, #1
 8005648:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2268      	movs	r2, #104	@ 0x68
 800564e:	2101      	movs	r1, #1
 8005650:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800565e:	231a      	movs	r3, #26
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	781b      	ldrb	r3, [r3, #0]
}
 8005664:	0018      	movs	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	b008      	add	sp, #32
 800566a:	bd80      	pop	{r7, pc}
 800566c:	cfff69f3 	.word	0xcfff69f3
 8005670:	ffffcfff 	.word	0xffffcfff
 8005674:	11fff4ff 	.word	0x11fff4ff
 8005678:	40013800 	.word	0x40013800
 800567c:	40021000 	.word	0x40021000
 8005680:	40004400 	.word	0x40004400
 8005684:	40004800 	.word	0x40004800
 8005688:	40004c00 	.word	0x40004c00
 800568c:	00f42400 	.word	0x00f42400
 8005690:	0800679c 	.word	0x0800679c

08005694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a0:	2208      	movs	r2, #8
 80056a2:	4013      	ands	r3, r2
 80056a4:	d00b      	beq.n	80056be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4a4a      	ldr	r2, [pc, #296]	@ (80057d8 <UART_AdvFeatureConfig+0x144>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	0019      	movs	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c2:	2201      	movs	r2, #1
 80056c4:	4013      	ands	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4a43      	ldr	r2, [pc, #268]	@ (80057dc <UART_AdvFeatureConfig+0x148>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	0019      	movs	r1, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e4:	2202      	movs	r2, #2
 80056e6:	4013      	ands	r3, r2
 80056e8:	d00b      	beq.n	8005702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4a3b      	ldr	r2, [pc, #236]	@ (80057e0 <UART_AdvFeatureConfig+0x14c>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	0019      	movs	r1, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	2204      	movs	r2, #4
 8005708:	4013      	ands	r3, r2
 800570a:	d00b      	beq.n	8005724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4a34      	ldr	r2, [pc, #208]	@ (80057e4 <UART_AdvFeatureConfig+0x150>)
 8005714:	4013      	ands	r3, r2
 8005716:	0019      	movs	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	2210      	movs	r2, #16
 800572a:	4013      	ands	r3, r2
 800572c:	d00b      	beq.n	8005746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4a2c      	ldr	r2, [pc, #176]	@ (80057e8 <UART_AdvFeatureConfig+0x154>)
 8005736:	4013      	ands	r3, r2
 8005738:	0019      	movs	r1, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574a:	2220      	movs	r2, #32
 800574c:	4013      	ands	r3, r2
 800574e:	d00b      	beq.n	8005768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	4a25      	ldr	r2, [pc, #148]	@ (80057ec <UART_AdvFeatureConfig+0x158>)
 8005758:	4013      	ands	r3, r2
 800575a:	0019      	movs	r1, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	2240      	movs	r2, #64	@ 0x40
 800576e:	4013      	ands	r3, r2
 8005770:	d01d      	beq.n	80057ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a1d      	ldr	r2, [pc, #116]	@ (80057f0 <UART_AdvFeatureConfig+0x15c>)
 800577a:	4013      	ands	r3, r2
 800577c:	0019      	movs	r1, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800578e:	2380      	movs	r3, #128	@ 0x80
 8005790:	035b      	lsls	r3, r3, #13
 8005792:	429a      	cmp	r2, r3
 8005794:	d10b      	bne.n	80057ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4a15      	ldr	r2, [pc, #84]	@ (80057f4 <UART_AdvFeatureConfig+0x160>)
 800579e:	4013      	ands	r3, r2
 80057a0:	0019      	movs	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b2:	2280      	movs	r2, #128	@ 0x80
 80057b4:	4013      	ands	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4a0e      	ldr	r2, [pc, #56]	@ (80057f8 <UART_AdvFeatureConfig+0x164>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	0019      	movs	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	605a      	str	r2, [r3, #4]
  }
}
 80057d0:	46c0      	nop			@ (mov r8, r8)
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b002      	add	sp, #8
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	ffff7fff 	.word	0xffff7fff
 80057dc:	fffdffff 	.word	0xfffdffff
 80057e0:	fffeffff 	.word	0xfffeffff
 80057e4:	fffbffff 	.word	0xfffbffff
 80057e8:	ffffefff 	.word	0xffffefff
 80057ec:	ffffdfff 	.word	0xffffdfff
 80057f0:	ffefffff 	.word	0xffefffff
 80057f4:	ff9fffff 	.word	0xff9fffff
 80057f8:	fff7ffff 	.word	0xfff7ffff

080057fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b092      	sub	sp, #72	@ 0x48
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2290      	movs	r2, #144	@ 0x90
 8005808:	2100      	movs	r1, #0
 800580a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800580c:	f7fd fbda 	bl	8002fc4 <HAL_GetTick>
 8005810:	0003      	movs	r3, r0
 8005812:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2208      	movs	r2, #8
 800581c:	4013      	ands	r3, r2
 800581e:	2b08      	cmp	r3, #8
 8005820:	d12d      	bne.n	800587e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005824:	2280      	movs	r2, #128	@ 0x80
 8005826:	0391      	lsls	r1, r2, #14
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	4a47      	ldr	r2, [pc, #284]	@ (8005948 <UART_CheckIdleState+0x14c>)
 800582c:	9200      	str	r2, [sp, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	f000 f88e 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 8005834:	1e03      	subs	r3, r0, #0
 8005836:	d022      	beq.n	800587e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005838:	f3ef 8310 	mrs	r3, PRIMASK
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005840:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005842:	2301      	movs	r3, #1
 8005844:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	f383 8810 	msr	PRIMASK, r3
}
 800584c:	46c0      	nop			@ (mov r8, r8)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2180      	movs	r1, #128	@ 0x80
 800585a:	438a      	bics	r2, r1
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005864:	f383 8810 	msr	PRIMASK, r3
}
 8005868:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2288      	movs	r2, #136	@ 0x88
 800586e:	2120      	movs	r1, #32
 8005870:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2284      	movs	r2, #132	@ 0x84
 8005876:	2100      	movs	r1, #0
 8005878:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e060      	b.n	8005940 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2204      	movs	r2, #4
 8005886:	4013      	ands	r3, r2
 8005888:	2b04      	cmp	r3, #4
 800588a:	d146      	bne.n	800591a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800588c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800588e:	2280      	movs	r2, #128	@ 0x80
 8005890:	03d1      	lsls	r1, r2, #15
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	4a2c      	ldr	r2, [pc, #176]	@ (8005948 <UART_CheckIdleState+0x14c>)
 8005896:	9200      	str	r2, [sp, #0]
 8005898:	2200      	movs	r2, #0
 800589a:	f000 f859 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 800589e:	1e03      	subs	r3, r0, #0
 80058a0:	d03b      	beq.n	800591a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a2:	f3ef 8310 	mrs	r3, PRIMASK
 80058a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80058a8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ac:	2301      	movs	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f383 8810 	msr	PRIMASK, r3
}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4922      	ldr	r1, [pc, #136]	@ (800594c <UART_CheckIdleState+0x150>)
 80058c4:	400a      	ands	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f383 8810 	msr	PRIMASK, r3
}
 80058d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d4:	f3ef 8310 	mrs	r3, PRIMASK
 80058d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80058da:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80058de:	2301      	movs	r3, #1
 80058e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f383 8810 	msr	PRIMASK, r3
}
 80058e8:	46c0      	nop			@ (mov r8, r8)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2101      	movs	r1, #1
 80058f6:	438a      	bics	r2, r1
 80058f8:	609a      	str	r2, [r3, #8]
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f383 8810 	msr	PRIMASK, r3
}
 8005904:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	228c      	movs	r2, #140	@ 0x8c
 800590a:	2120      	movs	r1, #32
 800590c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2284      	movs	r2, #132	@ 0x84
 8005912:	2100      	movs	r1, #0
 8005914:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e012      	b.n	8005940 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2288      	movs	r2, #136	@ 0x88
 800591e:	2120      	movs	r1, #32
 8005920:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	228c      	movs	r2, #140	@ 0x8c
 8005926:	2120      	movs	r1, #32
 8005928:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2284      	movs	r2, #132	@ 0x84
 800593a:	2100      	movs	r1, #0
 800593c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	0018      	movs	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	b010      	add	sp, #64	@ 0x40
 8005946:	bd80      	pop	{r7, pc}
 8005948:	01ffffff 	.word	0x01ffffff
 800594c:	fffffedf 	.word	0xfffffedf

08005950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	1dfb      	adds	r3, r7, #7
 800595e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005960:	e051      	b.n	8005a06 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	3301      	adds	r3, #1
 8005966:	d04e      	beq.n	8005a06 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005968:	f7fd fb2c 	bl	8002fc4 <HAL_GetTick>
 800596c:	0002      	movs	r2, r0
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	d302      	bcc.n	800597e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e051      	b.n	8005a26 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2204      	movs	r2, #4
 800598a:	4013      	ands	r3, r2
 800598c:	d03b      	beq.n	8005a06 <UART_WaitOnFlagUntilTimeout+0xb6>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b80      	cmp	r3, #128	@ 0x80
 8005992:	d038      	beq.n	8005a06 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d035      	beq.n	8005a06 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	2208      	movs	r2, #8
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d111      	bne.n	80059cc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2208      	movs	r2, #8
 80059ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 f83c 	bl	8005a30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2290      	movs	r2, #144	@ 0x90
 80059bc:	2108      	movs	r1, #8
 80059be:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2284      	movs	r2, #132	@ 0x84
 80059c4:	2100      	movs	r1, #0
 80059c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e02c      	b.n	8005a26 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	2380      	movs	r3, #128	@ 0x80
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	401a      	ands	r2, r3
 80059d8:	2380      	movs	r3, #128	@ 0x80
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	429a      	cmp	r2, r3
 80059de:	d112      	bne.n	8005a06 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2280      	movs	r2, #128	@ 0x80
 80059e6:	0112      	lsls	r2, r2, #4
 80059e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	0018      	movs	r0, r3
 80059ee:	f000 f81f 	bl	8005a30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2290      	movs	r2, #144	@ 0x90
 80059f6:	2120      	movs	r1, #32
 80059f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2284      	movs	r2, #132	@ 0x84
 80059fe:	2100      	movs	r1, #0
 8005a00:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e00f      	b.n	8005a26 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	425a      	negs	r2, r3
 8005a16:	4153      	adcs	r3, r2
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	1dfb      	adds	r3, r7, #7
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d09e      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	0018      	movs	r0, r3
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	b004      	add	sp, #16
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08e      	sub	sp, #56	@ 0x38
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a38:	f3ef 8310 	mrs	r3, PRIMASK
 8005a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8005a3e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a42:	2301      	movs	r3, #1
 8005a44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f383 8810 	msr	PRIMASK, r3
}
 8005a4c:	46c0      	nop			@ (mov r8, r8)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4926      	ldr	r1, [pc, #152]	@ (8005af4 <UART_EndRxTransfer+0xc4>)
 8005a5a:	400a      	ands	r2, r1
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f383 8810 	msr	PRIMASK, r3
}
 8005a68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6e:	623b      	str	r3, [r7, #32]
  return(result);
 8005a70:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a72:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a74:	2301      	movs	r3, #1
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	f383 8810 	msr	PRIMASK, r3
}
 8005a7e:	46c0      	nop			@ (mov r8, r8)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	491b      	ldr	r1, [pc, #108]	@ (8005af8 <UART_EndRxTransfer+0xc8>)
 8005a8c:	400a      	ands	r2, r1
 8005a8e:	609a      	str	r2, [r3, #8]
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	f383 8810 	msr	PRIMASK, r3
}
 8005a9a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d118      	bne.n	8005ad6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aae:	2301      	movs	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f383 8810 	msr	PRIMASK, r3
}
 8005ab8:	46c0      	nop			@ (mov r8, r8)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2110      	movs	r1, #16
 8005ac6:	438a      	bics	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005acc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f383 8810 	msr	PRIMASK, r3
}
 8005ad4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	228c      	movs	r2, #140	@ 0x8c
 8005ada:	2120      	movs	r1, #32
 8005adc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005aea:	46c0      	nop			@ (mov r8, r8)
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b00e      	add	sp, #56	@ 0x38
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	fffffedf 	.word	0xfffffedf
 8005af8:	effffffe 	.word	0xeffffffe

08005afc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2284      	movs	r2, #132	@ 0x84
 8005b08:	5c9b      	ldrb	r3, [r3, r2]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e027      	b.n	8005b62 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2284      	movs	r2, #132	@ 0x84
 8005b16:	2101      	movs	r1, #1
 8005b18:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2288      	movs	r2, #136	@ 0x88
 8005b1e:	2124      	movs	r1, #36	@ 0x24
 8005b20:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2101      	movs	r1, #1
 8005b36:	438a      	bics	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b6c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2288      	movs	r2, #136	@ 0x88
 8005b54:	2120      	movs	r1, #32
 8005b56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2284      	movs	r2, #132	@ 0x84
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	0018      	movs	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b004      	add	sp, #16
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	dfffffff 	.word	0xdfffffff

08005b70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2284      	movs	r2, #132	@ 0x84
 8005b7e:	5c9b      	ldrb	r3, [r3, r2]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e02e      	b.n	8005be6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2284      	movs	r2, #132	@ 0x84
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2288      	movs	r2, #136	@ 0x88
 8005b94:	2124      	movs	r1, #36	@ 0x24
 8005b96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2101      	movs	r1, #1
 8005bac:	438a      	bics	r2, r1
 8005bae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	08d9      	lsrs	r1, r3, #3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 f854 	bl	8005c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2288      	movs	r2, #136	@ 0x88
 8005bd8:	2120      	movs	r1, #32
 8005bda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2284      	movs	r2, #132	@ 0x84
 8005be0:	2100      	movs	r1, #0
 8005be2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	0018      	movs	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b004      	add	sp, #16
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2284      	movs	r2, #132	@ 0x84
 8005bfe:	5c9b      	ldrb	r3, [r3, r2]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e02f      	b.n	8005c68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2284      	movs	r2, #132	@ 0x84
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2288      	movs	r2, #136	@ 0x88
 8005c14:	2124      	movs	r1, #36	@ 0x24
 8005c16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	438a      	bics	r2, r1
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	4a0e      	ldr	r2, [pc, #56]	@ (8005c70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	0019      	movs	r1, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 f813 	bl	8005c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2288      	movs	r2, #136	@ 0x88
 8005c5a:	2120      	movs	r1, #32
 8005c5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2284      	movs	r2, #132	@ 0x84
 8005c62:	2100      	movs	r1, #0
 8005c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	0018      	movs	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b004      	add	sp, #16
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	f1ffffff 	.word	0xf1ffffff

08005c74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d108      	bne.n	8005c96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	226a      	movs	r2, #106	@ 0x6a
 8005c88:	2101      	movs	r1, #1
 8005c8a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2268      	movs	r2, #104	@ 0x68
 8005c90:	2101      	movs	r1, #1
 8005c92:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c94:	e043      	b.n	8005d1e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c96:	260f      	movs	r6, #15
 8005c98:	19bb      	adds	r3, r7, r6
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c9e:	200e      	movs	r0, #14
 8005ca0:	183b      	adds	r3, r7, r0
 8005ca2:	2208      	movs	r2, #8
 8005ca4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	0e5b      	lsrs	r3, r3, #25
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	240d      	movs	r4, #13
 8005cb2:	193b      	adds	r3, r7, r4
 8005cb4:	2107      	movs	r1, #7
 8005cb6:	400a      	ands	r2, r1
 8005cb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	0f5b      	lsrs	r3, r3, #29
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	250c      	movs	r5, #12
 8005cc6:	197b      	adds	r3, r7, r5
 8005cc8:	2107      	movs	r1, #7
 8005cca:	400a      	ands	r2, r1
 8005ccc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cce:	183b      	adds	r3, r7, r0
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	197a      	adds	r2, r7, r5
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	4914      	ldr	r1, [pc, #80]	@ (8005d28 <UARTEx_SetNbDataToProcess+0xb4>)
 8005cd8:	5c8a      	ldrb	r2, [r1, r2]
 8005cda:	435a      	muls	r2, r3
 8005cdc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cde:	197b      	adds	r3, r7, r5
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	4a12      	ldr	r2, [pc, #72]	@ (8005d2c <UARTEx_SetNbDataToProcess+0xb8>)
 8005ce4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	f7fa faa6 	bl	8000238 <__divsi3>
 8005cec:	0003      	movs	r3, r0
 8005cee:	b299      	uxth	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	226a      	movs	r2, #106	@ 0x6a
 8005cf4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf6:	19bb      	adds	r3, r7, r6
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	193a      	adds	r2, r7, r4
 8005cfc:	7812      	ldrb	r2, [r2, #0]
 8005cfe:	490a      	ldr	r1, [pc, #40]	@ (8005d28 <UARTEx_SetNbDataToProcess+0xb4>)
 8005d00:	5c8a      	ldrb	r2, [r1, r2]
 8005d02:	435a      	muls	r2, r3
 8005d04:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d06:	193b      	adds	r3, r7, r4
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	4a08      	ldr	r2, [pc, #32]	@ (8005d2c <UARTEx_SetNbDataToProcess+0xb8>)
 8005d0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d0e:	0019      	movs	r1, r3
 8005d10:	f7fa fa92 	bl	8000238 <__divsi3>
 8005d14:	0003      	movs	r3, r0
 8005d16:	b299      	uxth	r1, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2268      	movs	r2, #104	@ 0x68
 8005d1c:	5299      	strh	r1, [r3, r2]
}
 8005d1e:	46c0      	nop			@ (mov r8, r8)
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b005      	add	sp, #20
 8005d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	080067b4 	.word	0x080067b4
 8005d2c:	080067bc 	.word	0x080067bc

08005d30 <siprintf>:
 8005d30:	b40e      	push	{r1, r2, r3}
 8005d32:	b500      	push	{lr}
 8005d34:	490b      	ldr	r1, [pc, #44]	@ (8005d64 <siprintf+0x34>)
 8005d36:	b09c      	sub	sp, #112	@ 0x70
 8005d38:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d3a:	9002      	str	r0, [sp, #8]
 8005d3c:	9006      	str	r0, [sp, #24]
 8005d3e:	9107      	str	r1, [sp, #28]
 8005d40:	9104      	str	r1, [sp, #16]
 8005d42:	4809      	ldr	r0, [pc, #36]	@ (8005d68 <siprintf+0x38>)
 8005d44:	4909      	ldr	r1, [pc, #36]	@ (8005d6c <siprintf+0x3c>)
 8005d46:	cb04      	ldmia	r3!, {r2}
 8005d48:	9105      	str	r1, [sp, #20]
 8005d4a:	6800      	ldr	r0, [r0, #0]
 8005d4c:	a902      	add	r1, sp, #8
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	f000 f99e 	bl	8006090 <_svfiprintf_r>
 8005d54:	2200      	movs	r2, #0
 8005d56:	9b02      	ldr	r3, [sp, #8]
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	b01c      	add	sp, #112	@ 0x70
 8005d5c:	bc08      	pop	{r3}
 8005d5e:	b003      	add	sp, #12
 8005d60:	4718      	bx	r3
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	7fffffff 	.word	0x7fffffff
 8005d68:	20000010 	.word	0x20000010
 8005d6c:	ffff0208 	.word	0xffff0208

08005d70 <memset>:
 8005d70:	0003      	movs	r3, r0
 8005d72:	1882      	adds	r2, r0, r2
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d100      	bne.n	8005d7a <memset+0xa>
 8005d78:	4770      	bx	lr
 8005d7a:	7019      	strb	r1, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	e7f9      	b.n	8005d74 <memset+0x4>

08005d80 <__errno>:
 8005d80:	4b01      	ldr	r3, [pc, #4]	@ (8005d88 <__errno+0x8>)
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	4770      	bx	lr
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	20000010 	.word	0x20000010

08005d8c <__libc_init_array>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	2600      	movs	r6, #0
 8005d90:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc4 <__libc_init_array+0x38>)
 8005d92:	4d0d      	ldr	r5, [pc, #52]	@ (8005dc8 <__libc_init_array+0x3c>)
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	42a6      	cmp	r6, r4
 8005d9a:	d109      	bne.n	8005db0 <__libc_init_array+0x24>
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	f000 fc65 	bl	800666c <_init>
 8005da2:	4c0a      	ldr	r4, [pc, #40]	@ (8005dcc <__libc_init_array+0x40>)
 8005da4:	4d0a      	ldr	r5, [pc, #40]	@ (8005dd0 <__libc_init_array+0x44>)
 8005da6:	1b64      	subs	r4, r4, r5
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	42a6      	cmp	r6, r4
 8005dac:	d105      	bne.n	8005dba <__libc_init_array+0x2e>
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	00b3      	lsls	r3, r6, #2
 8005db2:	58eb      	ldr	r3, [r5, r3]
 8005db4:	4798      	blx	r3
 8005db6:	3601      	adds	r6, #1
 8005db8:	e7ee      	b.n	8005d98 <__libc_init_array+0xc>
 8005dba:	00b3      	lsls	r3, r6, #2
 8005dbc:	58eb      	ldr	r3, [r5, r3]
 8005dbe:	4798      	blx	r3
 8005dc0:	3601      	adds	r6, #1
 8005dc2:	e7f2      	b.n	8005daa <__libc_init_array+0x1e>
 8005dc4:	080067f8 	.word	0x080067f8
 8005dc8:	080067f8 	.word	0x080067f8
 8005dcc:	080067fc 	.word	0x080067fc
 8005dd0:	080067f8 	.word	0x080067f8

08005dd4 <__retarget_lock_acquire_recursive>:
 8005dd4:	4770      	bx	lr

08005dd6 <__retarget_lock_release_recursive>:
 8005dd6:	4770      	bx	lr

08005dd8 <_free_r>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	0005      	movs	r5, r0
 8005ddc:	1e0c      	subs	r4, r1, #0
 8005dde:	d010      	beq.n	8005e02 <_free_r+0x2a>
 8005de0:	3c04      	subs	r4, #4
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da00      	bge.n	8005dea <_free_r+0x12>
 8005de8:	18e4      	adds	r4, r4, r3
 8005dea:	0028      	movs	r0, r5
 8005dec:	f000 f8e0 	bl	8005fb0 <__malloc_lock>
 8005df0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e68 <_free_r+0x90>)
 8005df2:	6813      	ldr	r3, [r2, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <_free_r+0x2c>
 8005df8:	6063      	str	r3, [r4, #4]
 8005dfa:	6014      	str	r4, [r2, #0]
 8005dfc:	0028      	movs	r0, r5
 8005dfe:	f000 f8df 	bl	8005fc0 <__malloc_unlock>
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	42a3      	cmp	r3, r4
 8005e06:	d908      	bls.n	8005e1a <_free_r+0x42>
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	1821      	adds	r1, r4, r0
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	d1f3      	bne.n	8005df8 <_free_r+0x20>
 8005e10:	6819      	ldr	r1, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	1809      	adds	r1, r1, r0
 8005e16:	6021      	str	r1, [r4, #0]
 8005e18:	e7ee      	b.n	8005df8 <_free_r+0x20>
 8005e1a:	001a      	movs	r2, r3
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <_free_r+0x4e>
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	d9f9      	bls.n	8005e1a <_free_r+0x42>
 8005e26:	6811      	ldr	r1, [r2, #0]
 8005e28:	1850      	adds	r0, r2, r1
 8005e2a:	42a0      	cmp	r0, r4
 8005e2c:	d10b      	bne.n	8005e46 <_free_r+0x6e>
 8005e2e:	6820      	ldr	r0, [r4, #0]
 8005e30:	1809      	adds	r1, r1, r0
 8005e32:	1850      	adds	r0, r2, r1
 8005e34:	6011      	str	r1, [r2, #0]
 8005e36:	4283      	cmp	r3, r0
 8005e38:	d1e0      	bne.n	8005dfc <_free_r+0x24>
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	1841      	adds	r1, r0, r1
 8005e40:	6011      	str	r1, [r2, #0]
 8005e42:	6053      	str	r3, [r2, #4]
 8005e44:	e7da      	b.n	8005dfc <_free_r+0x24>
 8005e46:	42a0      	cmp	r0, r4
 8005e48:	d902      	bls.n	8005e50 <_free_r+0x78>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	e7d5      	b.n	8005dfc <_free_r+0x24>
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	1821      	adds	r1, r4, r0
 8005e54:	428b      	cmp	r3, r1
 8005e56:	d103      	bne.n	8005e60 <_free_r+0x88>
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	1809      	adds	r1, r1, r0
 8005e5e:	6021      	str	r1, [r4, #0]
 8005e60:	6063      	str	r3, [r4, #4]
 8005e62:	6054      	str	r4, [r2, #4]
 8005e64:	e7ca      	b.n	8005dfc <_free_r+0x24>
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	20000394 	.word	0x20000394

08005e6c <sbrk_aligned>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8005eac <sbrk_aligned+0x40>)
 8005e70:	000d      	movs	r5, r1
 8005e72:	6831      	ldr	r1, [r6, #0]
 8005e74:	0004      	movs	r4, r0
 8005e76:	2900      	cmp	r1, #0
 8005e78:	d102      	bne.n	8005e80 <sbrk_aligned+0x14>
 8005e7a:	f000 fb99 	bl	80065b0 <_sbrk_r>
 8005e7e:	6030      	str	r0, [r6, #0]
 8005e80:	0029      	movs	r1, r5
 8005e82:	0020      	movs	r0, r4
 8005e84:	f000 fb94 	bl	80065b0 <_sbrk_r>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d103      	bne.n	8005e94 <sbrk_aligned+0x28>
 8005e8c:	2501      	movs	r5, #1
 8005e8e:	426d      	negs	r5, r5
 8005e90:	0028      	movs	r0, r5
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	2303      	movs	r3, #3
 8005e96:	1cc5      	adds	r5, r0, #3
 8005e98:	439d      	bics	r5, r3
 8005e9a:	42a8      	cmp	r0, r5
 8005e9c:	d0f8      	beq.n	8005e90 <sbrk_aligned+0x24>
 8005e9e:	1a29      	subs	r1, r5, r0
 8005ea0:	0020      	movs	r0, r4
 8005ea2:	f000 fb85 	bl	80065b0 <_sbrk_r>
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d1f2      	bne.n	8005e90 <sbrk_aligned+0x24>
 8005eaa:	e7ef      	b.n	8005e8c <sbrk_aligned+0x20>
 8005eac:	20000390 	.word	0x20000390

08005eb0 <_malloc_r>:
 8005eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	1ccb      	adds	r3, r1, #3
 8005eb6:	4393      	bics	r3, r2
 8005eb8:	3308      	adds	r3, #8
 8005eba:	0005      	movs	r5, r0
 8005ebc:	001f      	movs	r7, r3
 8005ebe:	2b0c      	cmp	r3, #12
 8005ec0:	d234      	bcs.n	8005f2c <_malloc_r+0x7c>
 8005ec2:	270c      	movs	r7, #12
 8005ec4:	42b9      	cmp	r1, r7
 8005ec6:	d833      	bhi.n	8005f30 <_malloc_r+0x80>
 8005ec8:	0028      	movs	r0, r5
 8005eca:	f000 f871 	bl	8005fb0 <__malloc_lock>
 8005ece:	4e37      	ldr	r6, [pc, #220]	@ (8005fac <_malloc_r+0xfc>)
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	001c      	movs	r4, r3
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	d12f      	bne.n	8005f38 <_malloc_r+0x88>
 8005ed8:	0039      	movs	r1, r7
 8005eda:	0028      	movs	r0, r5
 8005edc:	f7ff ffc6 	bl	8005e6c <sbrk_aligned>
 8005ee0:	0004      	movs	r4, r0
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	d15f      	bne.n	8005fa6 <_malloc_r+0xf6>
 8005ee6:	6834      	ldr	r4, [r6, #0]
 8005ee8:	9400      	str	r4, [sp, #0]
 8005eea:	9b00      	ldr	r3, [sp, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d14a      	bne.n	8005f86 <_malloc_r+0xd6>
 8005ef0:	2c00      	cmp	r4, #0
 8005ef2:	d052      	beq.n	8005f9a <_malloc_r+0xea>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	0028      	movs	r0, r5
 8005ef8:	18e3      	adds	r3, r4, r3
 8005efa:	9900      	ldr	r1, [sp, #0]
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	f000 fb57 	bl	80065b0 <_sbrk_r>
 8005f02:	9b01      	ldr	r3, [sp, #4]
 8005f04:	4283      	cmp	r3, r0
 8005f06:	d148      	bne.n	8005f9a <_malloc_r+0xea>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	0028      	movs	r0, r5
 8005f0c:	1aff      	subs	r7, r7, r3
 8005f0e:	0039      	movs	r1, r7
 8005f10:	f7ff ffac 	bl	8005e6c <sbrk_aligned>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d040      	beq.n	8005f9a <_malloc_r+0xea>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	19db      	adds	r3, r3, r7
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	6833      	ldr	r3, [r6, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	d133      	bne.n	8005f8e <_malloc_r+0xde>
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	e019      	b.n	8005f60 <_malloc_r+0xb0>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	dac9      	bge.n	8005ec4 <_malloc_r+0x14>
 8005f30:	230c      	movs	r3, #12
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	2000      	movs	r0, #0
 8005f36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f38:	6821      	ldr	r1, [r4, #0]
 8005f3a:	1bc9      	subs	r1, r1, r7
 8005f3c:	d420      	bmi.n	8005f80 <_malloc_r+0xd0>
 8005f3e:	290b      	cmp	r1, #11
 8005f40:	d90a      	bls.n	8005f58 <_malloc_r+0xa8>
 8005f42:	19e2      	adds	r2, r4, r7
 8005f44:	6027      	str	r7, [r4, #0]
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	d104      	bne.n	8005f54 <_malloc_r+0xa4>
 8005f4a:	6032      	str	r2, [r6, #0]
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	6011      	str	r1, [r2, #0]
 8005f50:	6053      	str	r3, [r2, #4]
 8005f52:	e005      	b.n	8005f60 <_malloc_r+0xb0>
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	e7f9      	b.n	8005f4c <_malloc_r+0x9c>
 8005f58:	6862      	ldr	r2, [r4, #4]
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	d10e      	bne.n	8005f7c <_malloc_r+0xcc>
 8005f5e:	6032      	str	r2, [r6, #0]
 8005f60:	0028      	movs	r0, r5
 8005f62:	f000 f82d 	bl	8005fc0 <__malloc_unlock>
 8005f66:	0020      	movs	r0, r4
 8005f68:	2207      	movs	r2, #7
 8005f6a:	300b      	adds	r0, #11
 8005f6c:	1d23      	adds	r3, r4, #4
 8005f6e:	4390      	bics	r0, r2
 8005f70:	1ac2      	subs	r2, r0, r3
 8005f72:	4298      	cmp	r0, r3
 8005f74:	d0df      	beq.n	8005f36 <_malloc_r+0x86>
 8005f76:	1a1b      	subs	r3, r3, r0
 8005f78:	50a3      	str	r3, [r4, r2]
 8005f7a:	e7dc      	b.n	8005f36 <_malloc_r+0x86>
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	e7ef      	b.n	8005f60 <_malloc_r+0xb0>
 8005f80:	0023      	movs	r3, r4
 8005f82:	6864      	ldr	r4, [r4, #4]
 8005f84:	e7a6      	b.n	8005ed4 <_malloc_r+0x24>
 8005f86:	9c00      	ldr	r4, [sp, #0]
 8005f88:	6863      	ldr	r3, [r4, #4]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	e7ad      	b.n	8005eea <_malloc_r+0x3a>
 8005f8e:	001a      	movs	r2, r3
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	d1fb      	bne.n	8005f8e <_malloc_r+0xde>
 8005f96:	2300      	movs	r3, #0
 8005f98:	e7da      	b.n	8005f50 <_malloc_r+0xa0>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	0028      	movs	r0, r5
 8005f9e:	602b      	str	r3, [r5, #0]
 8005fa0:	f000 f80e 	bl	8005fc0 <__malloc_unlock>
 8005fa4:	e7c6      	b.n	8005f34 <_malloc_r+0x84>
 8005fa6:	6007      	str	r7, [r0, #0]
 8005fa8:	e7da      	b.n	8005f60 <_malloc_r+0xb0>
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	20000394 	.word	0x20000394

08005fb0 <__malloc_lock>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4802      	ldr	r0, [pc, #8]	@ (8005fbc <__malloc_lock+0xc>)
 8005fb4:	f7ff ff0e 	bl	8005dd4 <__retarget_lock_acquire_recursive>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	2000038c 	.word	0x2000038c

08005fc0 <__malloc_unlock>:
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	4802      	ldr	r0, [pc, #8]	@ (8005fcc <__malloc_unlock+0xc>)
 8005fc4:	f7ff ff07 	bl	8005dd6 <__retarget_lock_release_recursive>
 8005fc8:	bd10      	pop	{r4, pc}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	2000038c 	.word	0x2000038c

08005fd0 <__ssputs_r>:
 8005fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fd2:	688e      	ldr	r6, [r1, #8]
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	001f      	movs	r7, r3
 8005fd8:	000c      	movs	r4, r1
 8005fda:	680b      	ldr	r3, [r1, #0]
 8005fdc:	9002      	str	r0, [sp, #8]
 8005fde:	9203      	str	r2, [sp, #12]
 8005fe0:	42be      	cmp	r6, r7
 8005fe2:	d830      	bhi.n	8006046 <__ssputs_r+0x76>
 8005fe4:	210c      	movs	r1, #12
 8005fe6:	5e62      	ldrsh	r2, [r4, r1]
 8005fe8:	2190      	movs	r1, #144	@ 0x90
 8005fea:	00c9      	lsls	r1, r1, #3
 8005fec:	420a      	tst	r2, r1
 8005fee:	d028      	beq.n	8006042 <__ssputs_r+0x72>
 8005ff0:	2003      	movs	r0, #3
 8005ff2:	6921      	ldr	r1, [r4, #16]
 8005ff4:	1a5b      	subs	r3, r3, r1
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	6963      	ldr	r3, [r4, #20]
 8005ffa:	4343      	muls	r3, r0
 8005ffc:	9801      	ldr	r0, [sp, #4]
 8005ffe:	0fdd      	lsrs	r5, r3, #31
 8006000:	18ed      	adds	r5, r5, r3
 8006002:	1c7b      	adds	r3, r7, #1
 8006004:	181b      	adds	r3, r3, r0
 8006006:	106d      	asrs	r5, r5, #1
 8006008:	42ab      	cmp	r3, r5
 800600a:	d900      	bls.n	800600e <__ssputs_r+0x3e>
 800600c:	001d      	movs	r5, r3
 800600e:	0552      	lsls	r2, r2, #21
 8006010:	d528      	bpl.n	8006064 <__ssputs_r+0x94>
 8006012:	0029      	movs	r1, r5
 8006014:	9802      	ldr	r0, [sp, #8]
 8006016:	f7ff ff4b 	bl	8005eb0 <_malloc_r>
 800601a:	1e06      	subs	r6, r0, #0
 800601c:	d02c      	beq.n	8006078 <__ssputs_r+0xa8>
 800601e:	9a01      	ldr	r2, [sp, #4]
 8006020:	6921      	ldr	r1, [r4, #16]
 8006022:	f000 fae2 	bl	80065ea <memcpy>
 8006026:	89a2      	ldrh	r2, [r4, #12]
 8006028:	4b18      	ldr	r3, [pc, #96]	@ (800608c <__ssputs_r+0xbc>)
 800602a:	401a      	ands	r2, r3
 800602c:	2380      	movs	r3, #128	@ 0x80
 800602e:	4313      	orrs	r3, r2
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	9b01      	ldr	r3, [sp, #4]
 8006034:	6126      	str	r6, [r4, #16]
 8006036:	18f6      	adds	r6, r6, r3
 8006038:	6026      	str	r6, [r4, #0]
 800603a:	003e      	movs	r6, r7
 800603c:	6165      	str	r5, [r4, #20]
 800603e:	1aed      	subs	r5, r5, r3
 8006040:	60a5      	str	r5, [r4, #8]
 8006042:	42be      	cmp	r6, r7
 8006044:	d900      	bls.n	8006048 <__ssputs_r+0x78>
 8006046:	003e      	movs	r6, r7
 8006048:	0032      	movs	r2, r6
 800604a:	9903      	ldr	r1, [sp, #12]
 800604c:	6820      	ldr	r0, [r4, #0]
 800604e:	f000 fa9b 	bl	8006588 <memmove>
 8006052:	2000      	movs	r0, #0
 8006054:	68a3      	ldr	r3, [r4, #8]
 8006056:	1b9b      	subs	r3, r3, r6
 8006058:	60a3      	str	r3, [r4, #8]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	199b      	adds	r3, r3, r6
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	b005      	add	sp, #20
 8006062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006064:	002a      	movs	r2, r5
 8006066:	9802      	ldr	r0, [sp, #8]
 8006068:	f000 fac8 	bl	80065fc <_realloc_r>
 800606c:	1e06      	subs	r6, r0, #0
 800606e:	d1e0      	bne.n	8006032 <__ssputs_r+0x62>
 8006070:	6921      	ldr	r1, [r4, #16]
 8006072:	9802      	ldr	r0, [sp, #8]
 8006074:	f7ff feb0 	bl	8005dd8 <_free_r>
 8006078:	230c      	movs	r3, #12
 800607a:	2001      	movs	r0, #1
 800607c:	9a02      	ldr	r2, [sp, #8]
 800607e:	4240      	negs	r0, r0
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	89a2      	ldrh	r2, [r4, #12]
 8006084:	3334      	adds	r3, #52	@ 0x34
 8006086:	4313      	orrs	r3, r2
 8006088:	81a3      	strh	r3, [r4, #12]
 800608a:	e7e9      	b.n	8006060 <__ssputs_r+0x90>
 800608c:	fffffb7f 	.word	0xfffffb7f

08006090 <_svfiprintf_r>:
 8006090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006092:	b0a1      	sub	sp, #132	@ 0x84
 8006094:	9003      	str	r0, [sp, #12]
 8006096:	001d      	movs	r5, r3
 8006098:	898b      	ldrh	r3, [r1, #12]
 800609a:	000f      	movs	r7, r1
 800609c:	0016      	movs	r6, r2
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	d511      	bpl.n	80060c6 <_svfiprintf_r+0x36>
 80060a2:	690b      	ldr	r3, [r1, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10e      	bne.n	80060c6 <_svfiprintf_r+0x36>
 80060a8:	2140      	movs	r1, #64	@ 0x40
 80060aa:	f7ff ff01 	bl	8005eb0 <_malloc_r>
 80060ae:	6038      	str	r0, [r7, #0]
 80060b0:	6138      	str	r0, [r7, #16]
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d105      	bne.n	80060c2 <_svfiprintf_r+0x32>
 80060b6:	230c      	movs	r3, #12
 80060b8:	9a03      	ldr	r2, [sp, #12]
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	2001      	movs	r0, #1
 80060be:	4240      	negs	r0, r0
 80060c0:	e0cf      	b.n	8006262 <_svfiprintf_r+0x1d2>
 80060c2:	2340      	movs	r3, #64	@ 0x40
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	2300      	movs	r3, #0
 80060c8:	ac08      	add	r4, sp, #32
 80060ca:	6163      	str	r3, [r4, #20]
 80060cc:	3320      	adds	r3, #32
 80060ce:	7663      	strb	r3, [r4, #25]
 80060d0:	3310      	adds	r3, #16
 80060d2:	76a3      	strb	r3, [r4, #26]
 80060d4:	9507      	str	r5, [sp, #28]
 80060d6:	0035      	movs	r5, r6
 80060d8:	782b      	ldrb	r3, [r5, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <_svfiprintf_r+0x52>
 80060de:	2b25      	cmp	r3, #37	@ 0x25
 80060e0:	d148      	bne.n	8006174 <_svfiprintf_r+0xe4>
 80060e2:	1bab      	subs	r3, r5, r6
 80060e4:	9305      	str	r3, [sp, #20]
 80060e6:	42b5      	cmp	r5, r6
 80060e8:	d00b      	beq.n	8006102 <_svfiprintf_r+0x72>
 80060ea:	0032      	movs	r2, r6
 80060ec:	0039      	movs	r1, r7
 80060ee:	9803      	ldr	r0, [sp, #12]
 80060f0:	f7ff ff6e 	bl	8005fd0 <__ssputs_r>
 80060f4:	3001      	adds	r0, #1
 80060f6:	d100      	bne.n	80060fa <_svfiprintf_r+0x6a>
 80060f8:	e0ae      	b.n	8006258 <_svfiprintf_r+0x1c8>
 80060fa:	6963      	ldr	r3, [r4, #20]
 80060fc:	9a05      	ldr	r2, [sp, #20]
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	6163      	str	r3, [r4, #20]
 8006102:	782b      	ldrb	r3, [r5, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d100      	bne.n	800610a <_svfiprintf_r+0x7a>
 8006108:	e0a6      	b.n	8006258 <_svfiprintf_r+0x1c8>
 800610a:	2201      	movs	r2, #1
 800610c:	2300      	movs	r3, #0
 800610e:	4252      	negs	r2, r2
 8006110:	6062      	str	r2, [r4, #4]
 8006112:	a904      	add	r1, sp, #16
 8006114:	3254      	adds	r2, #84	@ 0x54
 8006116:	1852      	adds	r2, r2, r1
 8006118:	1c6e      	adds	r6, r5, #1
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	60e3      	str	r3, [r4, #12]
 800611e:	60a3      	str	r3, [r4, #8]
 8006120:	7013      	strb	r3, [r2, #0]
 8006122:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006124:	4b54      	ldr	r3, [pc, #336]	@ (8006278 <_svfiprintf_r+0x1e8>)
 8006126:	2205      	movs	r2, #5
 8006128:	0018      	movs	r0, r3
 800612a:	7831      	ldrb	r1, [r6, #0]
 800612c:	9305      	str	r3, [sp, #20]
 800612e:	f000 fa51 	bl	80065d4 <memchr>
 8006132:	1c75      	adds	r5, r6, #1
 8006134:	2800      	cmp	r0, #0
 8006136:	d11f      	bne.n	8006178 <_svfiprintf_r+0xe8>
 8006138:	6822      	ldr	r2, [r4, #0]
 800613a:	06d3      	lsls	r3, r2, #27
 800613c:	d504      	bpl.n	8006148 <_svfiprintf_r+0xb8>
 800613e:	2353      	movs	r3, #83	@ 0x53
 8006140:	a904      	add	r1, sp, #16
 8006142:	185b      	adds	r3, r3, r1
 8006144:	2120      	movs	r1, #32
 8006146:	7019      	strb	r1, [r3, #0]
 8006148:	0713      	lsls	r3, r2, #28
 800614a:	d504      	bpl.n	8006156 <_svfiprintf_r+0xc6>
 800614c:	2353      	movs	r3, #83	@ 0x53
 800614e:	a904      	add	r1, sp, #16
 8006150:	185b      	adds	r3, r3, r1
 8006152:	212b      	movs	r1, #43	@ 0x2b
 8006154:	7019      	strb	r1, [r3, #0]
 8006156:	7833      	ldrb	r3, [r6, #0]
 8006158:	2b2a      	cmp	r3, #42	@ 0x2a
 800615a:	d016      	beq.n	800618a <_svfiprintf_r+0xfa>
 800615c:	0035      	movs	r5, r6
 800615e:	2100      	movs	r1, #0
 8006160:	200a      	movs	r0, #10
 8006162:	68e3      	ldr	r3, [r4, #12]
 8006164:	782a      	ldrb	r2, [r5, #0]
 8006166:	1c6e      	adds	r6, r5, #1
 8006168:	3a30      	subs	r2, #48	@ 0x30
 800616a:	2a09      	cmp	r2, #9
 800616c:	d950      	bls.n	8006210 <_svfiprintf_r+0x180>
 800616e:	2900      	cmp	r1, #0
 8006170:	d111      	bne.n	8006196 <_svfiprintf_r+0x106>
 8006172:	e017      	b.n	80061a4 <_svfiprintf_r+0x114>
 8006174:	3501      	adds	r5, #1
 8006176:	e7af      	b.n	80060d8 <_svfiprintf_r+0x48>
 8006178:	9b05      	ldr	r3, [sp, #20]
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	1ac0      	subs	r0, r0, r3
 800617e:	2301      	movs	r3, #1
 8006180:	4083      	lsls	r3, r0
 8006182:	4313      	orrs	r3, r2
 8006184:	002e      	movs	r6, r5
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	e7cc      	b.n	8006124 <_svfiprintf_r+0x94>
 800618a:	9b07      	ldr	r3, [sp, #28]
 800618c:	1d19      	adds	r1, r3, #4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	9107      	str	r1, [sp, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	db01      	blt.n	800619a <_svfiprintf_r+0x10a>
 8006196:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006198:	e004      	b.n	80061a4 <_svfiprintf_r+0x114>
 800619a:	425b      	negs	r3, r3
 800619c:	60e3      	str	r3, [r4, #12]
 800619e:	2302      	movs	r3, #2
 80061a0:	4313      	orrs	r3, r2
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	782b      	ldrb	r3, [r5, #0]
 80061a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80061a8:	d10c      	bne.n	80061c4 <_svfiprintf_r+0x134>
 80061aa:	786b      	ldrb	r3, [r5, #1]
 80061ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80061ae:	d134      	bne.n	800621a <_svfiprintf_r+0x18a>
 80061b0:	9b07      	ldr	r3, [sp, #28]
 80061b2:	3502      	adds	r5, #2
 80061b4:	1d1a      	adds	r2, r3, #4
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	9207      	str	r2, [sp, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	da01      	bge.n	80061c2 <_svfiprintf_r+0x132>
 80061be:	2301      	movs	r3, #1
 80061c0:	425b      	negs	r3, r3
 80061c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061c4:	4e2d      	ldr	r6, [pc, #180]	@ (800627c <_svfiprintf_r+0x1ec>)
 80061c6:	2203      	movs	r2, #3
 80061c8:	0030      	movs	r0, r6
 80061ca:	7829      	ldrb	r1, [r5, #0]
 80061cc:	f000 fa02 	bl	80065d4 <memchr>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d006      	beq.n	80061e2 <_svfiprintf_r+0x152>
 80061d4:	2340      	movs	r3, #64	@ 0x40
 80061d6:	1b80      	subs	r0, r0, r6
 80061d8:	4083      	lsls	r3, r0
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	3501      	adds	r5, #1
 80061de:	4313      	orrs	r3, r2
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	7829      	ldrb	r1, [r5, #0]
 80061e4:	2206      	movs	r2, #6
 80061e6:	4826      	ldr	r0, [pc, #152]	@ (8006280 <_svfiprintf_r+0x1f0>)
 80061e8:	1c6e      	adds	r6, r5, #1
 80061ea:	7621      	strb	r1, [r4, #24]
 80061ec:	f000 f9f2 	bl	80065d4 <memchr>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d038      	beq.n	8006266 <_svfiprintf_r+0x1d6>
 80061f4:	4b23      	ldr	r3, [pc, #140]	@ (8006284 <_svfiprintf_r+0x1f4>)
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d122      	bne.n	8006240 <_svfiprintf_r+0x1b0>
 80061fa:	2207      	movs	r2, #7
 80061fc:	9b07      	ldr	r3, [sp, #28]
 80061fe:	3307      	adds	r3, #7
 8006200:	4393      	bics	r3, r2
 8006202:	3308      	adds	r3, #8
 8006204:	9307      	str	r3, [sp, #28]
 8006206:	6963      	ldr	r3, [r4, #20]
 8006208:	9a04      	ldr	r2, [sp, #16]
 800620a:	189b      	adds	r3, r3, r2
 800620c:	6163      	str	r3, [r4, #20]
 800620e:	e762      	b.n	80060d6 <_svfiprintf_r+0x46>
 8006210:	4343      	muls	r3, r0
 8006212:	0035      	movs	r5, r6
 8006214:	2101      	movs	r1, #1
 8006216:	189b      	adds	r3, r3, r2
 8006218:	e7a4      	b.n	8006164 <_svfiprintf_r+0xd4>
 800621a:	2300      	movs	r3, #0
 800621c:	200a      	movs	r0, #10
 800621e:	0019      	movs	r1, r3
 8006220:	3501      	adds	r5, #1
 8006222:	6063      	str	r3, [r4, #4]
 8006224:	782a      	ldrb	r2, [r5, #0]
 8006226:	1c6e      	adds	r6, r5, #1
 8006228:	3a30      	subs	r2, #48	@ 0x30
 800622a:	2a09      	cmp	r2, #9
 800622c:	d903      	bls.n	8006236 <_svfiprintf_r+0x1a6>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0c8      	beq.n	80061c4 <_svfiprintf_r+0x134>
 8006232:	9109      	str	r1, [sp, #36]	@ 0x24
 8006234:	e7c6      	b.n	80061c4 <_svfiprintf_r+0x134>
 8006236:	4341      	muls	r1, r0
 8006238:	0035      	movs	r5, r6
 800623a:	2301      	movs	r3, #1
 800623c:	1889      	adds	r1, r1, r2
 800623e:	e7f1      	b.n	8006224 <_svfiprintf_r+0x194>
 8006240:	aa07      	add	r2, sp, #28
 8006242:	9200      	str	r2, [sp, #0]
 8006244:	0021      	movs	r1, r4
 8006246:	003a      	movs	r2, r7
 8006248:	4b0f      	ldr	r3, [pc, #60]	@ (8006288 <_svfiprintf_r+0x1f8>)
 800624a:	9803      	ldr	r0, [sp, #12]
 800624c:	e000      	b.n	8006250 <_svfiprintf_r+0x1c0>
 800624e:	bf00      	nop
 8006250:	9004      	str	r0, [sp, #16]
 8006252:	9b04      	ldr	r3, [sp, #16]
 8006254:	3301      	adds	r3, #1
 8006256:	d1d6      	bne.n	8006206 <_svfiprintf_r+0x176>
 8006258:	89bb      	ldrh	r3, [r7, #12]
 800625a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800625c:	065b      	lsls	r3, r3, #25
 800625e:	d500      	bpl.n	8006262 <_svfiprintf_r+0x1d2>
 8006260:	e72c      	b.n	80060bc <_svfiprintf_r+0x2c>
 8006262:	b021      	add	sp, #132	@ 0x84
 8006264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006266:	aa07      	add	r2, sp, #28
 8006268:	9200      	str	r2, [sp, #0]
 800626a:	0021      	movs	r1, r4
 800626c:	003a      	movs	r2, r7
 800626e:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <_svfiprintf_r+0x1f8>)
 8006270:	9803      	ldr	r0, [sp, #12]
 8006272:	f000 f87b 	bl	800636c <_printf_i>
 8006276:	e7eb      	b.n	8006250 <_svfiprintf_r+0x1c0>
 8006278:	080067c4 	.word	0x080067c4
 800627c:	080067ca 	.word	0x080067ca
 8006280:	080067ce 	.word	0x080067ce
 8006284:	00000000 	.word	0x00000000
 8006288:	08005fd1 	.word	0x08005fd1

0800628c <_printf_common>:
 800628c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800628e:	0016      	movs	r6, r2
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	688a      	ldr	r2, [r1, #8]
 8006294:	690b      	ldr	r3, [r1, #16]
 8006296:	000c      	movs	r4, r1
 8006298:	9000      	str	r0, [sp, #0]
 800629a:	4293      	cmp	r3, r2
 800629c:	da00      	bge.n	80062a0 <_printf_common+0x14>
 800629e:	0013      	movs	r3, r2
 80062a0:	0022      	movs	r2, r4
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	3243      	adds	r2, #67	@ 0x43
 80062a6:	7812      	ldrb	r2, [r2, #0]
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	d001      	beq.n	80062b0 <_printf_common+0x24>
 80062ac:	3301      	adds	r3, #1
 80062ae:	6033      	str	r3, [r6, #0]
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	069b      	lsls	r3, r3, #26
 80062b4:	d502      	bpl.n	80062bc <_printf_common+0x30>
 80062b6:	6833      	ldr	r3, [r6, #0]
 80062b8:	3302      	adds	r3, #2
 80062ba:	6033      	str	r3, [r6, #0]
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	2306      	movs	r3, #6
 80062c0:	0015      	movs	r5, r2
 80062c2:	401d      	ands	r5, r3
 80062c4:	421a      	tst	r2, r3
 80062c6:	d027      	beq.n	8006318 <_printf_common+0x8c>
 80062c8:	0023      	movs	r3, r4
 80062ca:	3343      	adds	r3, #67	@ 0x43
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	1e5a      	subs	r2, r3, #1
 80062d0:	4193      	sbcs	r3, r2
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	0692      	lsls	r2, r2, #26
 80062d6:	d430      	bmi.n	800633a <_printf_common+0xae>
 80062d8:	0022      	movs	r2, r4
 80062da:	9901      	ldr	r1, [sp, #4]
 80062dc:	9800      	ldr	r0, [sp, #0]
 80062de:	9d08      	ldr	r5, [sp, #32]
 80062e0:	3243      	adds	r2, #67	@ 0x43
 80062e2:	47a8      	blx	r5
 80062e4:	3001      	adds	r0, #1
 80062e6:	d025      	beq.n	8006334 <_printf_common+0xa8>
 80062e8:	2206      	movs	r2, #6
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	2500      	movs	r5, #0
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d105      	bne.n	8006300 <_printf_common+0x74>
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	68e5      	ldr	r5, [r4, #12]
 80062f8:	1aed      	subs	r5, r5, r3
 80062fa:	43eb      	mvns	r3, r5
 80062fc:	17db      	asrs	r3, r3, #31
 80062fe:	401d      	ands	r5, r3
 8006300:	68a3      	ldr	r3, [r4, #8]
 8006302:	6922      	ldr	r2, [r4, #16]
 8006304:	4293      	cmp	r3, r2
 8006306:	dd01      	ble.n	800630c <_printf_common+0x80>
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	18ed      	adds	r5, r5, r3
 800630c:	2600      	movs	r6, #0
 800630e:	42b5      	cmp	r5, r6
 8006310:	d120      	bne.n	8006354 <_printf_common+0xc8>
 8006312:	2000      	movs	r0, #0
 8006314:	e010      	b.n	8006338 <_printf_common+0xac>
 8006316:	3501      	adds	r5, #1
 8006318:	68e3      	ldr	r3, [r4, #12]
 800631a:	6832      	ldr	r2, [r6, #0]
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	42ab      	cmp	r3, r5
 8006320:	ddd2      	ble.n	80062c8 <_printf_common+0x3c>
 8006322:	0022      	movs	r2, r4
 8006324:	2301      	movs	r3, #1
 8006326:	9901      	ldr	r1, [sp, #4]
 8006328:	9800      	ldr	r0, [sp, #0]
 800632a:	9f08      	ldr	r7, [sp, #32]
 800632c:	3219      	adds	r2, #25
 800632e:	47b8      	blx	r7
 8006330:	3001      	adds	r0, #1
 8006332:	d1f0      	bne.n	8006316 <_printf_common+0x8a>
 8006334:	2001      	movs	r0, #1
 8006336:	4240      	negs	r0, r0
 8006338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800633a:	2030      	movs	r0, #48	@ 0x30
 800633c:	18e1      	adds	r1, r4, r3
 800633e:	3143      	adds	r1, #67	@ 0x43
 8006340:	7008      	strb	r0, [r1, #0]
 8006342:	0021      	movs	r1, r4
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	3145      	adds	r1, #69	@ 0x45
 8006348:	7809      	ldrb	r1, [r1, #0]
 800634a:	18a2      	adds	r2, r4, r2
 800634c:	3243      	adds	r2, #67	@ 0x43
 800634e:	3302      	adds	r3, #2
 8006350:	7011      	strb	r1, [r2, #0]
 8006352:	e7c1      	b.n	80062d8 <_printf_common+0x4c>
 8006354:	0022      	movs	r2, r4
 8006356:	2301      	movs	r3, #1
 8006358:	9901      	ldr	r1, [sp, #4]
 800635a:	9800      	ldr	r0, [sp, #0]
 800635c:	9f08      	ldr	r7, [sp, #32]
 800635e:	321a      	adds	r2, #26
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	d0e6      	beq.n	8006334 <_printf_common+0xa8>
 8006366:	3601      	adds	r6, #1
 8006368:	e7d1      	b.n	800630e <_printf_common+0x82>
	...

0800636c <_printf_i>:
 800636c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636e:	b08b      	sub	sp, #44	@ 0x2c
 8006370:	9206      	str	r2, [sp, #24]
 8006372:	000a      	movs	r2, r1
 8006374:	3243      	adds	r2, #67	@ 0x43
 8006376:	9307      	str	r3, [sp, #28]
 8006378:	9005      	str	r0, [sp, #20]
 800637a:	9203      	str	r2, [sp, #12]
 800637c:	7e0a      	ldrb	r2, [r1, #24]
 800637e:	000c      	movs	r4, r1
 8006380:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006382:	2a78      	cmp	r2, #120	@ 0x78
 8006384:	d809      	bhi.n	800639a <_printf_i+0x2e>
 8006386:	2a62      	cmp	r2, #98	@ 0x62
 8006388:	d80b      	bhi.n	80063a2 <_printf_i+0x36>
 800638a:	2a00      	cmp	r2, #0
 800638c:	d100      	bne.n	8006390 <_printf_i+0x24>
 800638e:	e0bc      	b.n	800650a <_printf_i+0x19e>
 8006390:	497b      	ldr	r1, [pc, #492]	@ (8006580 <_printf_i+0x214>)
 8006392:	9104      	str	r1, [sp, #16]
 8006394:	2a58      	cmp	r2, #88	@ 0x58
 8006396:	d100      	bne.n	800639a <_printf_i+0x2e>
 8006398:	e090      	b.n	80064bc <_printf_i+0x150>
 800639a:	0025      	movs	r5, r4
 800639c:	3542      	adds	r5, #66	@ 0x42
 800639e:	702a      	strb	r2, [r5, #0]
 80063a0:	e022      	b.n	80063e8 <_printf_i+0x7c>
 80063a2:	0010      	movs	r0, r2
 80063a4:	3863      	subs	r0, #99	@ 0x63
 80063a6:	2815      	cmp	r0, #21
 80063a8:	d8f7      	bhi.n	800639a <_printf_i+0x2e>
 80063aa:	f7f9 feb1 	bl	8000110 <__gnu_thumb1_case_shi>
 80063ae:	0016      	.short	0x0016
 80063b0:	fff6001f 	.word	0xfff6001f
 80063b4:	fff6fff6 	.word	0xfff6fff6
 80063b8:	001ffff6 	.word	0x001ffff6
 80063bc:	fff6fff6 	.word	0xfff6fff6
 80063c0:	fff6fff6 	.word	0xfff6fff6
 80063c4:	003600a1 	.word	0x003600a1
 80063c8:	fff60080 	.word	0xfff60080
 80063cc:	00b2fff6 	.word	0x00b2fff6
 80063d0:	0036fff6 	.word	0x0036fff6
 80063d4:	fff6fff6 	.word	0xfff6fff6
 80063d8:	0084      	.short	0x0084
 80063da:	0025      	movs	r5, r4
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	3542      	adds	r5, #66	@ 0x42
 80063e0:	1d11      	adds	r1, r2, #4
 80063e2:	6019      	str	r1, [r3, #0]
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	702b      	strb	r3, [r5, #0]
 80063e8:	2301      	movs	r3, #1
 80063ea:	e0a0      	b.n	800652e <_printf_i+0x1c2>
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	6809      	ldr	r1, [r1, #0]
 80063f0:	1d02      	adds	r2, r0, #4
 80063f2:	060d      	lsls	r5, r1, #24
 80063f4:	d50b      	bpl.n	800640e <_printf_i+0xa2>
 80063f6:	6806      	ldr	r6, [r0, #0]
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	2e00      	cmp	r6, #0
 80063fc:	da03      	bge.n	8006406 <_printf_i+0x9a>
 80063fe:	232d      	movs	r3, #45	@ 0x2d
 8006400:	9a03      	ldr	r2, [sp, #12]
 8006402:	4276      	negs	r6, r6
 8006404:	7013      	strb	r3, [r2, #0]
 8006406:	4b5e      	ldr	r3, [pc, #376]	@ (8006580 <_printf_i+0x214>)
 8006408:	270a      	movs	r7, #10
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	e018      	b.n	8006440 <_printf_i+0xd4>
 800640e:	6806      	ldr	r6, [r0, #0]
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	0649      	lsls	r1, r1, #25
 8006414:	d5f1      	bpl.n	80063fa <_printf_i+0x8e>
 8006416:	b236      	sxth	r6, r6
 8006418:	e7ef      	b.n	80063fa <_printf_i+0x8e>
 800641a:	6808      	ldr	r0, [r1, #0]
 800641c:	6819      	ldr	r1, [r3, #0]
 800641e:	c940      	ldmia	r1!, {r6}
 8006420:	0605      	lsls	r5, r0, #24
 8006422:	d402      	bmi.n	800642a <_printf_i+0xbe>
 8006424:	0640      	lsls	r0, r0, #25
 8006426:	d500      	bpl.n	800642a <_printf_i+0xbe>
 8006428:	b2b6      	uxth	r6, r6
 800642a:	6019      	str	r1, [r3, #0]
 800642c:	4b54      	ldr	r3, [pc, #336]	@ (8006580 <_printf_i+0x214>)
 800642e:	270a      	movs	r7, #10
 8006430:	9304      	str	r3, [sp, #16]
 8006432:	2a6f      	cmp	r2, #111	@ 0x6f
 8006434:	d100      	bne.n	8006438 <_printf_i+0xcc>
 8006436:	3f02      	subs	r7, #2
 8006438:	0023      	movs	r3, r4
 800643a:	2200      	movs	r2, #0
 800643c:	3343      	adds	r3, #67	@ 0x43
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6863      	ldr	r3, [r4, #4]
 8006442:	60a3      	str	r3, [r4, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	db03      	blt.n	8006450 <_printf_i+0xe4>
 8006448:	2104      	movs	r1, #4
 800644a:	6822      	ldr	r2, [r4, #0]
 800644c:	438a      	bics	r2, r1
 800644e:	6022      	str	r2, [r4, #0]
 8006450:	2e00      	cmp	r6, #0
 8006452:	d102      	bne.n	800645a <_printf_i+0xee>
 8006454:	9d03      	ldr	r5, [sp, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00c      	beq.n	8006474 <_printf_i+0x108>
 800645a:	9d03      	ldr	r5, [sp, #12]
 800645c:	0030      	movs	r0, r6
 800645e:	0039      	movs	r1, r7
 8006460:	f7f9 fee6 	bl	8000230 <__aeabi_uidivmod>
 8006464:	9b04      	ldr	r3, [sp, #16]
 8006466:	3d01      	subs	r5, #1
 8006468:	5c5b      	ldrb	r3, [r3, r1]
 800646a:	702b      	strb	r3, [r5, #0]
 800646c:	0033      	movs	r3, r6
 800646e:	0006      	movs	r6, r0
 8006470:	429f      	cmp	r7, r3
 8006472:	d9f3      	bls.n	800645c <_printf_i+0xf0>
 8006474:	2f08      	cmp	r7, #8
 8006476:	d109      	bne.n	800648c <_printf_i+0x120>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07db      	lsls	r3, r3, #31
 800647c:	d506      	bpl.n	800648c <_printf_i+0x120>
 800647e:	6862      	ldr	r2, [r4, #4]
 8006480:	6923      	ldr	r3, [r4, #16]
 8006482:	429a      	cmp	r2, r3
 8006484:	dc02      	bgt.n	800648c <_printf_i+0x120>
 8006486:	2330      	movs	r3, #48	@ 0x30
 8006488:	3d01      	subs	r5, #1
 800648a:	702b      	strb	r3, [r5, #0]
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	1b5b      	subs	r3, r3, r5
 8006490:	6123      	str	r3, [r4, #16]
 8006492:	9b07      	ldr	r3, [sp, #28]
 8006494:	0021      	movs	r1, r4
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	9805      	ldr	r0, [sp, #20]
 800649a:	9b06      	ldr	r3, [sp, #24]
 800649c:	aa09      	add	r2, sp, #36	@ 0x24
 800649e:	f7ff fef5 	bl	800628c <_printf_common>
 80064a2:	3001      	adds	r0, #1
 80064a4:	d148      	bne.n	8006538 <_printf_i+0x1cc>
 80064a6:	2001      	movs	r0, #1
 80064a8:	4240      	negs	r0, r0
 80064aa:	b00b      	add	sp, #44	@ 0x2c
 80064ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ae:	2220      	movs	r2, #32
 80064b0:	6809      	ldr	r1, [r1, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	2278      	movs	r2, #120	@ 0x78
 80064b8:	4932      	ldr	r1, [pc, #200]	@ (8006584 <_printf_i+0x218>)
 80064ba:	9104      	str	r1, [sp, #16]
 80064bc:	0021      	movs	r1, r4
 80064be:	3145      	adds	r1, #69	@ 0x45
 80064c0:	700a      	strb	r2, [r1, #0]
 80064c2:	6819      	ldr	r1, [r3, #0]
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	c940      	ldmia	r1!, {r6}
 80064c8:	0610      	lsls	r0, r2, #24
 80064ca:	d402      	bmi.n	80064d2 <_printf_i+0x166>
 80064cc:	0650      	lsls	r0, r2, #25
 80064ce:	d500      	bpl.n	80064d2 <_printf_i+0x166>
 80064d0:	b2b6      	uxth	r6, r6
 80064d2:	6019      	str	r1, [r3, #0]
 80064d4:	07d3      	lsls	r3, r2, #31
 80064d6:	d502      	bpl.n	80064de <_printf_i+0x172>
 80064d8:	2320      	movs	r3, #32
 80064da:	4313      	orrs	r3, r2
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	2e00      	cmp	r6, #0
 80064e0:	d001      	beq.n	80064e6 <_printf_i+0x17a>
 80064e2:	2710      	movs	r7, #16
 80064e4:	e7a8      	b.n	8006438 <_printf_i+0xcc>
 80064e6:	2220      	movs	r2, #32
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	4393      	bics	r3, r2
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	e7f8      	b.n	80064e2 <_printf_i+0x176>
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	680d      	ldr	r5, [r1, #0]
 80064f4:	1d10      	adds	r0, r2, #4
 80064f6:	6949      	ldr	r1, [r1, #20]
 80064f8:	6018      	str	r0, [r3, #0]
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	062e      	lsls	r6, r5, #24
 80064fe:	d501      	bpl.n	8006504 <_printf_i+0x198>
 8006500:	6019      	str	r1, [r3, #0]
 8006502:	e002      	b.n	800650a <_printf_i+0x19e>
 8006504:	066d      	lsls	r5, r5, #25
 8006506:	d5fb      	bpl.n	8006500 <_printf_i+0x194>
 8006508:	8019      	strh	r1, [r3, #0]
 800650a:	2300      	movs	r3, #0
 800650c:	9d03      	ldr	r5, [sp, #12]
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	e7bf      	b.n	8006492 <_printf_i+0x126>
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	1d11      	adds	r1, r2, #4
 8006516:	6019      	str	r1, [r3, #0]
 8006518:	6815      	ldr	r5, [r2, #0]
 800651a:	2100      	movs	r1, #0
 800651c:	0028      	movs	r0, r5
 800651e:	6862      	ldr	r2, [r4, #4]
 8006520:	f000 f858 	bl	80065d4 <memchr>
 8006524:	2800      	cmp	r0, #0
 8006526:	d001      	beq.n	800652c <_printf_i+0x1c0>
 8006528:	1b40      	subs	r0, r0, r5
 800652a:	6060      	str	r0, [r4, #4]
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	2300      	movs	r3, #0
 8006532:	9a03      	ldr	r2, [sp, #12]
 8006534:	7013      	strb	r3, [r2, #0]
 8006536:	e7ac      	b.n	8006492 <_printf_i+0x126>
 8006538:	002a      	movs	r2, r5
 800653a:	6923      	ldr	r3, [r4, #16]
 800653c:	9906      	ldr	r1, [sp, #24]
 800653e:	9805      	ldr	r0, [sp, #20]
 8006540:	9d07      	ldr	r5, [sp, #28]
 8006542:	47a8      	blx	r5
 8006544:	3001      	adds	r0, #1
 8006546:	d0ae      	beq.n	80064a6 <_printf_i+0x13a>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	079b      	lsls	r3, r3, #30
 800654c:	d415      	bmi.n	800657a <_printf_i+0x20e>
 800654e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006550:	68e0      	ldr	r0, [r4, #12]
 8006552:	4298      	cmp	r0, r3
 8006554:	daa9      	bge.n	80064aa <_printf_i+0x13e>
 8006556:	0018      	movs	r0, r3
 8006558:	e7a7      	b.n	80064aa <_printf_i+0x13e>
 800655a:	0022      	movs	r2, r4
 800655c:	2301      	movs	r3, #1
 800655e:	9906      	ldr	r1, [sp, #24]
 8006560:	9805      	ldr	r0, [sp, #20]
 8006562:	9e07      	ldr	r6, [sp, #28]
 8006564:	3219      	adds	r2, #25
 8006566:	47b0      	blx	r6
 8006568:	3001      	adds	r0, #1
 800656a:	d09c      	beq.n	80064a6 <_printf_i+0x13a>
 800656c:	3501      	adds	r5, #1
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	42ab      	cmp	r3, r5
 8006576:	dcf0      	bgt.n	800655a <_printf_i+0x1ee>
 8006578:	e7e9      	b.n	800654e <_printf_i+0x1e2>
 800657a:	2500      	movs	r5, #0
 800657c:	e7f7      	b.n	800656e <_printf_i+0x202>
 800657e:	46c0      	nop			@ (mov r8, r8)
 8006580:	080067d5 	.word	0x080067d5
 8006584:	080067e6 	.word	0x080067e6

08006588 <memmove>:
 8006588:	b510      	push	{r4, lr}
 800658a:	4288      	cmp	r0, r1
 800658c:	d806      	bhi.n	800659c <memmove+0x14>
 800658e:	2300      	movs	r3, #0
 8006590:	429a      	cmp	r2, r3
 8006592:	d008      	beq.n	80065a6 <memmove+0x1e>
 8006594:	5ccc      	ldrb	r4, [r1, r3]
 8006596:	54c4      	strb	r4, [r0, r3]
 8006598:	3301      	adds	r3, #1
 800659a:	e7f9      	b.n	8006590 <memmove+0x8>
 800659c:	188b      	adds	r3, r1, r2
 800659e:	4298      	cmp	r0, r3
 80065a0:	d2f5      	bcs.n	800658e <memmove+0x6>
 80065a2:	3a01      	subs	r2, #1
 80065a4:	d200      	bcs.n	80065a8 <memmove+0x20>
 80065a6:	bd10      	pop	{r4, pc}
 80065a8:	5c8b      	ldrb	r3, [r1, r2]
 80065aa:	5483      	strb	r3, [r0, r2]
 80065ac:	e7f9      	b.n	80065a2 <memmove+0x1a>
	...

080065b0 <_sbrk_r>:
 80065b0:	2300      	movs	r3, #0
 80065b2:	b570      	push	{r4, r5, r6, lr}
 80065b4:	4d06      	ldr	r5, [pc, #24]	@ (80065d0 <_sbrk_r+0x20>)
 80065b6:	0004      	movs	r4, r0
 80065b8:	0008      	movs	r0, r1
 80065ba:	602b      	str	r3, [r5, #0]
 80065bc:	f7fc fc20 	bl	8002e00 <_sbrk>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d103      	bne.n	80065cc <_sbrk_r+0x1c>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d000      	beq.n	80065cc <_sbrk_r+0x1c>
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	46c0      	nop			@ (mov r8, r8)
 80065d0:	20000388 	.word	0x20000388

080065d4 <memchr>:
 80065d4:	b2c9      	uxtb	r1, r1
 80065d6:	1882      	adds	r2, r0, r2
 80065d8:	4290      	cmp	r0, r2
 80065da:	d101      	bne.n	80065e0 <memchr+0xc>
 80065dc:	2000      	movs	r0, #0
 80065de:	4770      	bx	lr
 80065e0:	7803      	ldrb	r3, [r0, #0]
 80065e2:	428b      	cmp	r3, r1
 80065e4:	d0fb      	beq.n	80065de <memchr+0xa>
 80065e6:	3001      	adds	r0, #1
 80065e8:	e7f6      	b.n	80065d8 <memchr+0x4>

080065ea <memcpy>:
 80065ea:	2300      	movs	r3, #0
 80065ec:	b510      	push	{r4, lr}
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d100      	bne.n	80065f4 <memcpy+0xa>
 80065f2:	bd10      	pop	{r4, pc}
 80065f4:	5ccc      	ldrb	r4, [r1, r3]
 80065f6:	54c4      	strb	r4, [r0, r3]
 80065f8:	3301      	adds	r3, #1
 80065fa:	e7f8      	b.n	80065ee <memcpy+0x4>

080065fc <_realloc_r>:
 80065fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065fe:	0006      	movs	r6, r0
 8006600:	000c      	movs	r4, r1
 8006602:	0015      	movs	r5, r2
 8006604:	2900      	cmp	r1, #0
 8006606:	d105      	bne.n	8006614 <_realloc_r+0x18>
 8006608:	0011      	movs	r1, r2
 800660a:	f7ff fc51 	bl	8005eb0 <_malloc_r>
 800660e:	0004      	movs	r4, r0
 8006610:	0020      	movs	r0, r4
 8006612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006614:	2a00      	cmp	r2, #0
 8006616:	d103      	bne.n	8006620 <_realloc_r+0x24>
 8006618:	f7ff fbde 	bl	8005dd8 <_free_r>
 800661c:	2400      	movs	r4, #0
 800661e:	e7f7      	b.n	8006610 <_realloc_r+0x14>
 8006620:	f000 f81b 	bl	800665a <_malloc_usable_size_r>
 8006624:	0007      	movs	r7, r0
 8006626:	4285      	cmp	r5, r0
 8006628:	d802      	bhi.n	8006630 <_realloc_r+0x34>
 800662a:	0843      	lsrs	r3, r0, #1
 800662c:	42ab      	cmp	r3, r5
 800662e:	d3ef      	bcc.n	8006610 <_realloc_r+0x14>
 8006630:	0029      	movs	r1, r5
 8006632:	0030      	movs	r0, r6
 8006634:	f7ff fc3c 	bl	8005eb0 <_malloc_r>
 8006638:	9001      	str	r0, [sp, #4]
 800663a:	2800      	cmp	r0, #0
 800663c:	d0ee      	beq.n	800661c <_realloc_r+0x20>
 800663e:	002a      	movs	r2, r5
 8006640:	42bd      	cmp	r5, r7
 8006642:	d900      	bls.n	8006646 <_realloc_r+0x4a>
 8006644:	003a      	movs	r2, r7
 8006646:	0021      	movs	r1, r4
 8006648:	9801      	ldr	r0, [sp, #4]
 800664a:	f7ff ffce 	bl	80065ea <memcpy>
 800664e:	0021      	movs	r1, r4
 8006650:	0030      	movs	r0, r6
 8006652:	f7ff fbc1 	bl	8005dd8 <_free_r>
 8006656:	9c01      	ldr	r4, [sp, #4]
 8006658:	e7da      	b.n	8006610 <_realloc_r+0x14>

0800665a <_malloc_usable_size_r>:
 800665a:	1f0b      	subs	r3, r1, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	1f18      	subs	r0, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	da01      	bge.n	8006668 <_malloc_usable_size_r+0xe>
 8006664:	580b      	ldr	r3, [r1, r0]
 8006666:	18c0      	adds	r0, r0, r3
 8006668:	4770      	bx	lr
	...

0800666c <_init>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr

08006678 <_fini>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	46c0      	nop			@ (mov r8, r8)
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr
